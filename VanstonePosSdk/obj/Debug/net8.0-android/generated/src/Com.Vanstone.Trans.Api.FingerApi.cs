//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable restore
using System;
using System.Collections.Generic;
using Android.Runtime;
using Java.Interop;

namespace Com.Vanstone.Trans.Api {

	// Metadata.xml XPath class reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='FingerApi']"
	[global::Android.Runtime.Register ("com/vanstone/trans/api/FingerApi", DoNotGenerateAcw=true)]
	public partial class FingerApi : global::Java.Lang.Object {
		// Metadata.xml XPath class reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='FingerApi.FType']"
		[global::Android.Runtime.Register ("com/vanstone/trans/api/FingerApi$FType", DoNotGenerateAcw=true)]
		public sealed partial class FType : global::Java.Lang.Enum {

			// Metadata.xml XPath field reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='FingerApi.FType']/field[@name='GENERATE_CHAR']"
			[Register ("GENERATE_CHAR")]
			public static global::Com.Vanstone.Trans.Api.FingerApi.FType? GenerateChar {
				get {
					const string __id = "GENERATE_CHAR.Lcom/vanstone/trans/api/FingerApi$FType;";

					var __v = _members.StaticFields.GetObjectValue (__id);
					return global::Java.Lang.Object.GetObject<global::Com.Vanstone.Trans.Api.FingerApi.FType> (__v.Handle, JniHandleOwnership.TransferLocalRef);
				}
			}


			// Metadata.xml XPath field reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='FingerApi.FType']/field[@name='GRAB_IMG']"
			[Register ("GRAB_IMG")]
			public static global::Com.Vanstone.Trans.Api.FingerApi.FType? GrabImg {
				get {
					const string __id = "GRAB_IMG.Lcom/vanstone/trans/api/FingerApi$FType;";

					var __v = _members.StaticFields.GetObjectValue (__id);
					return global::Java.Lang.Object.GetObject<global::Com.Vanstone.Trans.Api.FingerApi.FType> (__v.Handle, JniHandleOwnership.TransferLocalRef);
				}
			}


			// Metadata.xml XPath field reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='FingerApi.FType']/field[@name='MERGE_CHAR']"
			[Register ("MERGE_CHAR")]
			public static global::Com.Vanstone.Trans.Api.FingerApi.FType? MergeChar {
				get {
					const string __id = "MERGE_CHAR.Lcom/vanstone/trans/api/FingerApi$FType;";

					var __v = _members.StaticFields.GetObjectValue (__id);
					return global::Java.Lang.Object.GetObject<global::Com.Vanstone.Trans.Api.FingerApi.FType> (__v.Handle, JniHandleOwnership.TransferLocalRef);
				}
			}


			// Metadata.xml XPath field reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='FingerApi.FType']/field[@name='STORE_CHAR']"
			[Register ("STORE_CHAR")]
			public static global::Com.Vanstone.Trans.Api.FingerApi.FType? StoreChar {
				get {
					const string __id = "STORE_CHAR.Lcom/vanstone/trans/api/FingerApi$FType;";

					var __v = _members.StaticFields.GetObjectValue (__id);
					return global::Java.Lang.Object.GetObject<global::Com.Vanstone.Trans.Api.FingerApi.FType> (__v.Handle, JniHandleOwnership.TransferLocalRef);
				}
			}

			static readonly JniPeerMembers _members = new XAPeerMembers ("com/vanstone/trans/api/FingerApi$FType", typeof (FType));

			internal static IntPtr class_ref {
				get { return _members.JniPeerType.PeerReference.Handle; }
			}

			[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
			[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
			public override global::Java.Interop.JniPeerMembers JniPeerMembers {
				get { return _members; }
			}

			[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
			[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
			protected override IntPtr ThresholdClass {
				get { return _members.JniPeerType.PeerReference.Handle; }
			}

			[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
			[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
			protected override global::System.Type ThresholdType {
				get { return _members.ManagedPeerType; }
			}

			internal FType (IntPtr javaReference, JniHandleOwnership transfer) : base (javaReference, transfer)
			{
			}

			// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='FingerApi.FType']/method[@name='valueOf' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
			[Register ("valueOf", "(Ljava/lang/String;)Lcom/vanstone/trans/api/FingerApi$FType;", "")]
			public static unsafe global::Com.Vanstone.Trans.Api.FingerApi.FType? ValueOf (string? name)
			{
				const string __id = "valueOf.(Ljava/lang/String;)Lcom/vanstone/trans/api/FingerApi$FType;";
				IntPtr native_name = JNIEnv.NewString ((string?)name);
				try {
					JniArgumentValue* __args = stackalloc JniArgumentValue [1];
					__args [0] = new JniArgumentValue (native_name);
					var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
					return global::Java.Lang.Object.GetObject<global::Com.Vanstone.Trans.Api.FingerApi.FType> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
				} finally {
					JNIEnv.DeleteLocalRef (native_name);
				}
			}

			// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='FingerApi.FType']/method[@name='values' and count(parameter)=0]"
			[Register ("values", "()[Lcom/vanstone/trans/api/FingerApi$FType;", "")]
			public static unsafe global::Com.Vanstone.Trans.Api.FingerApi.FType[]? Values ()
			{
				const string __id = "values.()[Lcom/vanstone/trans/api/FingerApi$FType;";
				try {
					var __rm = _members.StaticMethods.InvokeObjectMethod (__id, null);
					return (global::Com.Vanstone.Trans.Api.FingerApi.FType[]?) JNIEnv.GetArray (__rm.Handle, JniHandleOwnership.TransferLocalRef, typeof (global::Com.Vanstone.Trans.Api.FingerApi.FType));
				} finally {
				}
			}

		}

		// Metadata.xml XPath interface reference: path="/api/package[@name='com.vanstone.trans.api']/interface[@name='FingerApi.IFingerEntryProcess']"
		[Register ("com/vanstone/trans/api/FingerApi$IFingerEntryProcess", "", "Com.Vanstone.Trans.Api.FingerApi/IFingerEntryProcessInvoker")]
		public partial interface IFingerEntryProcess : global::Com.Vanstone.Trans.Api.FingerApi.IFingerGrapImgProcess {
			// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/interface[@name='FingerApi.IFingerEntryProcess']/method[@name='entryFinger' and count(parameter)=1 and parameter[1][@type='int']]"
			[Register ("entryFinger", "(I)V", "GetEntryFinger_IHandler:Com.Vanstone.Trans.Api.FingerApi/IFingerEntryProcessInvoker, VanstonePosSdk")]
			void EntryFinger (int p0);

			// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/interface[@name='FingerApi.IFingerEntryProcess']/method[@name='failed' and count(parameter)=3 and parameter[1][@type='int'] and parameter[2][@type='com.vanstone.trans.api.FingerApi.FType'] and parameter[3][@type='int']]"
			[Register ("failed", "(ILcom/vanstone/trans/api/FingerApi$FType;I)V", "GetFailed_ILcom_vanstone_trans_api_FingerApi_FType_IHandler:Com.Vanstone.Trans.Api.FingerApi/IFingerEntryProcessInvoker, VanstonePosSdk")]
			void Failed (int p0, global::Com.Vanstone.Trans.Api.FingerApi.FType? p1, int p2);

			// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/interface[@name='FingerApi.IFingerEntryProcess']/method[@name='removeFinger' and count(parameter)=0]"
			[Register ("removeFinger", "()V", "GetRemoveFingerHandler:Com.Vanstone.Trans.Api.FingerApi/IFingerEntryProcessInvoker, VanstonePosSdk")]
			void RemoveFinger ();

			// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/interface[@name='FingerApi.IFingerEntryProcess']/method[@name='success' and count(parameter)=1 and parameter[1][@type='int']]"
			[Register ("success", "(I)V", "GetSuccess_IHandler:Com.Vanstone.Trans.Api.FingerApi/IFingerEntryProcessInvoker, VanstonePosSdk")]
			void Success (int p0);

			// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/interface[@name='FingerApi.IFingerEntryProcess']/method[@name='upImg' and count(parameter)=0]"
			[Register ("upImg", "()V", "GetUpImgHandler:Com.Vanstone.Trans.Api.FingerApi/IFingerEntryProcessInvoker, VanstonePosSdk")]
			void UpImg ();

		}

		[global::Android.Runtime.Register ("com/vanstone/trans/api/FingerApi$IFingerEntryProcess", DoNotGenerateAcw=true)]
		internal partial class IFingerEntryProcessInvoker : global::Java.Lang.Object, IFingerEntryProcess {
			static readonly JniPeerMembers _members = new XAPeerMembers ("com/vanstone/trans/api/FingerApi$IFingerEntryProcess", typeof (IFingerEntryProcessInvoker));

			static IntPtr java_class_ref {
				get { return _members.JniPeerType.PeerReference.Handle; }
			}

			[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
			[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
			public override global::Java.Interop.JniPeerMembers JniPeerMembers {
				get { return _members; }
			}

			[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
			[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
			protected override IntPtr ThresholdClass {
				get { return class_ref; }
			}

			[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
			[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
			protected override global::System.Type ThresholdType {
				get { return _members.ManagedPeerType; }
			}

			IntPtr class_ref;

			public static IFingerEntryProcess? GetObject (IntPtr handle, JniHandleOwnership transfer)
			{
				return global::Java.Lang.Object.GetObject<IFingerEntryProcess> (handle, transfer);
			}

			static IntPtr Validate (IntPtr handle)
			{
				if (!JNIEnv.IsInstanceOf (handle, java_class_ref))
					throw new InvalidCastException ($"Unable to convert instance of type '{JNIEnv.GetClassNameFromInstance (handle)}' to type 'com.vanstone.trans.api.FingerApi.IFingerEntryProcess'.");
				return handle;
			}

			protected override void Dispose (bool disposing)
			{
				if (this.class_ref != IntPtr.Zero)
					JNIEnv.DeleteGlobalRef (this.class_ref);
				this.class_ref = IntPtr.Zero;
				base.Dispose (disposing);
			}

			public IFingerEntryProcessInvoker (IntPtr handle, JniHandleOwnership transfer) : base (Validate (handle), transfer)
			{
				IntPtr local_ref = JNIEnv.GetObjectClass (((global::Java.Lang.Object) this).Handle);
				this.class_ref = JNIEnv.NewGlobalRef (local_ref);
				JNIEnv.DeleteLocalRef (local_ref);
			}

			static Delegate? cb_entryFinger_I;
#pragma warning disable 0169
			static Delegate GetEntryFinger_IHandler ()
			{
				if (cb_entryFinger_I == null)
					cb_entryFinger_I = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPI_V (n_EntryFinger_I));
				return cb_entryFinger_I;
			}

			static void n_EntryFinger_I (IntPtr jnienv, IntPtr native__this, int p0)
			{
				var __this = global::Java.Lang.Object.GetObject<global::Com.Vanstone.Trans.Api.FingerApi.IFingerEntryProcess> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
				__this.EntryFinger (p0);
			}
#pragma warning restore 0169

			IntPtr id_entryFinger_I;
			public unsafe void EntryFinger (int p0)
			{
				if (id_entryFinger_I == IntPtr.Zero)
					id_entryFinger_I = JNIEnv.GetMethodID (class_ref, "entryFinger", "(I)V");
				JValue* __args = stackalloc JValue [1];
				__args [0] = new JValue (p0);
				JNIEnv.CallVoidMethod (((global::Java.Lang.Object) this).Handle, id_entryFinger_I, __args);
			}

			static Delegate? cb_failed_ILcom_vanstone_trans_api_FingerApi_FType_I;
#pragma warning disable 0169
			static Delegate GetFailed_ILcom_vanstone_trans_api_FingerApi_FType_IHandler ()
			{
				if (cb_failed_ILcom_vanstone_trans_api_FingerApi_FType_I == null)
					cb_failed_ILcom_vanstone_trans_api_FingerApi_FType_I = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPILI_V (n_Failed_ILcom_vanstone_trans_api_FingerApi_FType_I));
				return cb_failed_ILcom_vanstone_trans_api_FingerApi_FType_I;
			}

			static void n_Failed_ILcom_vanstone_trans_api_FingerApi_FType_I (IntPtr jnienv, IntPtr native__this, int p0, IntPtr native_p1, int p2)
			{
				var __this = global::Java.Lang.Object.GetObject<global::Com.Vanstone.Trans.Api.FingerApi.IFingerEntryProcess> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
				var p1 = global::Java.Lang.Object.GetObject<global::Com.Vanstone.Trans.Api.FingerApi.FType> (native_p1, JniHandleOwnership.DoNotTransfer);
				__this.Failed (p0, p1, p2);
			}
#pragma warning restore 0169

			IntPtr id_failed_ILcom_vanstone_trans_api_FingerApi_FType_I;
			public unsafe void Failed (int p0, global::Com.Vanstone.Trans.Api.FingerApi.FType? p1, int p2)
			{
				if (id_failed_ILcom_vanstone_trans_api_FingerApi_FType_I == IntPtr.Zero)
					id_failed_ILcom_vanstone_trans_api_FingerApi_FType_I = JNIEnv.GetMethodID (class_ref, "failed", "(ILcom/vanstone/trans/api/FingerApi$FType;I)V");
				JValue* __args = stackalloc JValue [3];
				__args [0] = new JValue (p0);
				__args [1] = new JValue ((p1 == null) ? IntPtr.Zero : ((global::Java.Lang.Object) p1).Handle);
				__args [2] = new JValue (p2);
				JNIEnv.CallVoidMethod (((global::Java.Lang.Object) this).Handle, id_failed_ILcom_vanstone_trans_api_FingerApi_FType_I, __args);
			}

			static Delegate? cb_removeFinger;
#pragma warning disable 0169
			static Delegate GetRemoveFingerHandler ()
			{
				if (cb_removeFinger == null)
					cb_removeFinger = JNINativeWrapper.CreateDelegate (new _JniMarshal_PP_V (n_RemoveFinger));
				return cb_removeFinger;
			}

			static void n_RemoveFinger (IntPtr jnienv, IntPtr native__this)
			{
				var __this = global::Java.Lang.Object.GetObject<global::Com.Vanstone.Trans.Api.FingerApi.IFingerEntryProcess> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
				__this.RemoveFinger ();
			}
#pragma warning restore 0169

			IntPtr id_removeFinger;
			public unsafe void RemoveFinger ()
			{
				if (id_removeFinger == IntPtr.Zero)
					id_removeFinger = JNIEnv.GetMethodID (class_ref, "removeFinger", "()V");
				JNIEnv.CallVoidMethod (((global::Java.Lang.Object) this).Handle, id_removeFinger);
			}

			static Delegate? cb_success_I;
#pragma warning disable 0169
			static Delegate GetSuccess_IHandler ()
			{
				if (cb_success_I == null)
					cb_success_I = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPI_V (n_Success_I));
				return cb_success_I;
			}

			static void n_Success_I (IntPtr jnienv, IntPtr native__this, int p0)
			{
				var __this = global::Java.Lang.Object.GetObject<global::Com.Vanstone.Trans.Api.FingerApi.IFingerEntryProcess> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
				__this.Success (p0);
			}
#pragma warning restore 0169

			IntPtr id_success_I;
			public unsafe void Success (int p0)
			{
				if (id_success_I == IntPtr.Zero)
					id_success_I = JNIEnv.GetMethodID (class_ref, "success", "(I)V");
				JValue* __args = stackalloc JValue [1];
				__args [0] = new JValue (p0);
				JNIEnv.CallVoidMethod (((global::Java.Lang.Object) this).Handle, id_success_I, __args);
			}

			static Delegate? cb_upImg;
#pragma warning disable 0169
			static Delegate GetUpImgHandler ()
			{
				if (cb_upImg == null)
					cb_upImg = JNINativeWrapper.CreateDelegate (new _JniMarshal_PP_V (n_UpImg));
				return cb_upImg;
			}

			static void n_UpImg (IntPtr jnienv, IntPtr native__this)
			{
				var __this = global::Java.Lang.Object.GetObject<global::Com.Vanstone.Trans.Api.FingerApi.IFingerEntryProcess> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
				__this.UpImg ();
			}
#pragma warning restore 0169

			IntPtr id_upImg;
			public unsafe void UpImg ()
			{
				if (id_upImg == IntPtr.Zero)
					id_upImg = JNIEnv.GetMethodID (class_ref, "upImg", "()V");
				JNIEnv.CallVoidMethod (((global::Java.Lang.Object) this).Handle, id_upImg);
			}

			static Delegate? cb_putFinger;
#pragma warning disable 0169
			static Delegate GetPutFingerHandler ()
			{
				if (cb_putFinger == null)
					cb_putFinger = JNINativeWrapper.CreateDelegate (new _JniMarshal_PP_V (n_PutFinger));
				return cb_putFinger;
			}

			static void n_PutFinger (IntPtr jnienv, IntPtr native__this)
			{
				var __this = global::Java.Lang.Object.GetObject<global::Com.Vanstone.Trans.Api.FingerApi.IFingerEntryProcess> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
				__this.PutFinger ();
			}
#pragma warning restore 0169

			IntPtr id_putFinger;
			public unsafe void PutFinger ()
			{
				if (id_putFinger == IntPtr.Zero)
					id_putFinger = JNIEnv.GetMethodID (class_ref, "putFinger", "()V");
				JNIEnv.CallVoidMethod (((global::Java.Lang.Object) this).Handle, id_putFinger);
			}

		}

		// Metadata.xml XPath interface reference: path="/api/package[@name='com.vanstone.trans.api']/interface[@name='FingerApi.IFingerGetProcess']"
		[Register ("com/vanstone/trans/api/FingerApi$IFingerGetProcess", "", "Com.Vanstone.Trans.Api.FingerApi/IFingerGetProcessInvoker")]
		public partial interface IFingerGetProcess : global::Com.Vanstone.Trans.Api.FingerApi.IFingerGrapImgProcess {
			// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/interface[@name='FingerApi.IFingerGetProcess']/method[@name='failed' and count(parameter)=1 and parameter[1][@type='int']]"
			[Register ("failed", "(I)V", "GetFailed_IHandler:Com.Vanstone.Trans.Api.FingerApi/IFingerGetProcessInvoker, VanstonePosSdk")]
			void Failed (int p0);

			// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/interface[@name='FingerApi.IFingerGetProcess']/method[@name='success' and count(parameter)=2 and parameter[1][@type='byte[]'] and parameter[2][@type='int']]"
			[Register ("success", "([BI)V", "GetSuccess_arrayBIHandler:Com.Vanstone.Trans.Api.FingerApi/IFingerGetProcessInvoker, VanstonePosSdk")]
			void Success (byte[]? p0, int p1);

			// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/interface[@name='FingerApi.IFingerGetProcess']/method[@name='upImg' and count(parameter)=0]"
			[Register ("upImg", "()V", "GetUpImgHandler:Com.Vanstone.Trans.Api.FingerApi/IFingerGetProcessInvoker, VanstonePosSdk")]
			void UpImg ();

		}

		[global::Android.Runtime.Register ("com/vanstone/trans/api/FingerApi$IFingerGetProcess", DoNotGenerateAcw=true)]
		internal partial class IFingerGetProcessInvoker : global::Java.Lang.Object, IFingerGetProcess {
			static readonly JniPeerMembers _members = new XAPeerMembers ("com/vanstone/trans/api/FingerApi$IFingerGetProcess", typeof (IFingerGetProcessInvoker));

			static IntPtr java_class_ref {
				get { return _members.JniPeerType.PeerReference.Handle; }
			}

			[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
			[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
			public override global::Java.Interop.JniPeerMembers JniPeerMembers {
				get { return _members; }
			}

			[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
			[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
			protected override IntPtr ThresholdClass {
				get { return class_ref; }
			}

			[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
			[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
			protected override global::System.Type ThresholdType {
				get { return _members.ManagedPeerType; }
			}

			IntPtr class_ref;

			public static IFingerGetProcess? GetObject (IntPtr handle, JniHandleOwnership transfer)
			{
				return global::Java.Lang.Object.GetObject<IFingerGetProcess> (handle, transfer);
			}

			static IntPtr Validate (IntPtr handle)
			{
				if (!JNIEnv.IsInstanceOf (handle, java_class_ref))
					throw new InvalidCastException ($"Unable to convert instance of type '{JNIEnv.GetClassNameFromInstance (handle)}' to type 'com.vanstone.trans.api.FingerApi.IFingerGetProcess'.");
				return handle;
			}

			protected override void Dispose (bool disposing)
			{
				if (this.class_ref != IntPtr.Zero)
					JNIEnv.DeleteGlobalRef (this.class_ref);
				this.class_ref = IntPtr.Zero;
				base.Dispose (disposing);
			}

			public IFingerGetProcessInvoker (IntPtr handle, JniHandleOwnership transfer) : base (Validate (handle), transfer)
			{
				IntPtr local_ref = JNIEnv.GetObjectClass (((global::Java.Lang.Object) this).Handle);
				this.class_ref = JNIEnv.NewGlobalRef (local_ref);
				JNIEnv.DeleteLocalRef (local_ref);
			}

			static Delegate? cb_failed_I;
#pragma warning disable 0169
			static Delegate GetFailed_IHandler ()
			{
				if (cb_failed_I == null)
					cb_failed_I = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPI_V (n_Failed_I));
				return cb_failed_I;
			}

			static void n_Failed_I (IntPtr jnienv, IntPtr native__this, int p0)
			{
				var __this = global::Java.Lang.Object.GetObject<global::Com.Vanstone.Trans.Api.FingerApi.IFingerGetProcess> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
				__this.Failed (p0);
			}
#pragma warning restore 0169

			IntPtr id_failed_I;
			public unsafe void Failed (int p0)
			{
				if (id_failed_I == IntPtr.Zero)
					id_failed_I = JNIEnv.GetMethodID (class_ref, "failed", "(I)V");
				JValue* __args = stackalloc JValue [1];
				__args [0] = new JValue (p0);
				JNIEnv.CallVoidMethod (((global::Java.Lang.Object) this).Handle, id_failed_I, __args);
			}

			static Delegate? cb_success_arrayBI;
#pragma warning disable 0169
			static Delegate GetSuccess_arrayBIHandler ()
			{
				if (cb_success_arrayBI == null)
					cb_success_arrayBI = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPLI_V (n_Success_arrayBI));
				return cb_success_arrayBI;
			}

			static void n_Success_arrayBI (IntPtr jnienv, IntPtr native__this, IntPtr native_p0, int p1)
			{
				var __this = global::Java.Lang.Object.GetObject<global::Com.Vanstone.Trans.Api.FingerApi.IFingerGetProcess> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
				var p0 = (byte[]?) JNIEnv.GetArray (native_p0, JniHandleOwnership.DoNotTransfer, typeof (byte));
				__this.Success (p0, p1);
				if (p0 != null)
					JNIEnv.CopyArray (p0, native_p0);
			}
#pragma warning restore 0169

			IntPtr id_success_arrayBI;
			public unsafe void Success (byte[]? p0, int p1)
			{
				if (id_success_arrayBI == IntPtr.Zero)
					id_success_arrayBI = JNIEnv.GetMethodID (class_ref, "success", "([BI)V");
				IntPtr native_p0 = JNIEnv.NewArray (p0);
				JValue* __args = stackalloc JValue [2];
				__args [0] = new JValue (native_p0);
				__args [1] = new JValue (p1);
				JNIEnv.CallVoidMethod (((global::Java.Lang.Object) this).Handle, id_success_arrayBI, __args);
				if (p0 != null) {
					JNIEnv.CopyArray (native_p0, p0);
					JNIEnv.DeleteLocalRef (native_p0);
				}
			}

			static Delegate? cb_upImg;
#pragma warning disable 0169
			static Delegate GetUpImgHandler ()
			{
				if (cb_upImg == null)
					cb_upImg = JNINativeWrapper.CreateDelegate (new _JniMarshal_PP_V (n_UpImg));
				return cb_upImg;
			}

			static void n_UpImg (IntPtr jnienv, IntPtr native__this)
			{
				var __this = global::Java.Lang.Object.GetObject<global::Com.Vanstone.Trans.Api.FingerApi.IFingerGetProcess> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
				__this.UpImg ();
			}
#pragma warning restore 0169

			IntPtr id_upImg;
			public unsafe void UpImg ()
			{
				if (id_upImg == IntPtr.Zero)
					id_upImg = JNIEnv.GetMethodID (class_ref, "upImg", "()V");
				JNIEnv.CallVoidMethod (((global::Java.Lang.Object) this).Handle, id_upImg);
			}

			static Delegate? cb_putFinger;
#pragma warning disable 0169
			static Delegate GetPutFingerHandler ()
			{
				if (cb_putFinger == null)
					cb_putFinger = JNINativeWrapper.CreateDelegate (new _JniMarshal_PP_V (n_PutFinger));
				return cb_putFinger;
			}

			static void n_PutFinger (IntPtr jnienv, IntPtr native__this)
			{
				var __this = global::Java.Lang.Object.GetObject<global::Com.Vanstone.Trans.Api.FingerApi.IFingerGetProcess> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
				__this.PutFinger ();
			}
#pragma warning restore 0169

			IntPtr id_putFinger;
			public unsafe void PutFinger ()
			{
				if (id_putFinger == IntPtr.Zero)
					id_putFinger = JNIEnv.GetMethodID (class_ref, "putFinger", "()V");
				JNIEnv.CallVoidMethod (((global::Java.Lang.Object) this).Handle, id_putFinger);
			}

		}

		// Metadata.xml XPath interface reference: path="/api/package[@name='com.vanstone.trans.api']/interface[@name='FingerApi.IFingerGrapImgProcess']"
		[Register ("com/vanstone/trans/api/FingerApi$IFingerGrapImgProcess", "", "Com.Vanstone.Trans.Api.FingerApi/IFingerGrapImgProcessInvoker")]
		public partial interface IFingerGrapImgProcess : IJavaObject, IJavaPeerable {
			// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/interface[@name='FingerApi.IFingerGrapImgProcess']/method[@name='putFinger' and count(parameter)=0]"
			[Register ("putFinger", "()V", "GetPutFingerHandler:Com.Vanstone.Trans.Api.FingerApi/IFingerGrapImgProcessInvoker, VanstonePosSdk")]
			void PutFinger ();

		}

		[global::Android.Runtime.Register ("com/vanstone/trans/api/FingerApi$IFingerGrapImgProcess", DoNotGenerateAcw=true)]
		internal partial class IFingerGrapImgProcessInvoker : global::Java.Lang.Object, IFingerGrapImgProcess {
			static readonly JniPeerMembers _members = new XAPeerMembers ("com/vanstone/trans/api/FingerApi$IFingerGrapImgProcess", typeof (IFingerGrapImgProcessInvoker));

			static IntPtr java_class_ref {
				get { return _members.JniPeerType.PeerReference.Handle; }
			}

			[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
			[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
			public override global::Java.Interop.JniPeerMembers JniPeerMembers {
				get { return _members; }
			}

			[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
			[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
			protected override IntPtr ThresholdClass {
				get { return class_ref; }
			}

			[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
			[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
			protected override global::System.Type ThresholdType {
				get { return _members.ManagedPeerType; }
			}

			IntPtr class_ref;

			public static IFingerGrapImgProcess? GetObject (IntPtr handle, JniHandleOwnership transfer)
			{
				return global::Java.Lang.Object.GetObject<IFingerGrapImgProcess> (handle, transfer);
			}

			static IntPtr Validate (IntPtr handle)
			{
				if (!JNIEnv.IsInstanceOf (handle, java_class_ref))
					throw new InvalidCastException ($"Unable to convert instance of type '{JNIEnv.GetClassNameFromInstance (handle)}' to type 'com.vanstone.trans.api.FingerApi.IFingerGrapImgProcess'.");
				return handle;
			}

			protected override void Dispose (bool disposing)
			{
				if (this.class_ref != IntPtr.Zero)
					JNIEnv.DeleteGlobalRef (this.class_ref);
				this.class_ref = IntPtr.Zero;
				base.Dispose (disposing);
			}

			public IFingerGrapImgProcessInvoker (IntPtr handle, JniHandleOwnership transfer) : base (Validate (handle), transfer)
			{
				IntPtr local_ref = JNIEnv.GetObjectClass (((global::Java.Lang.Object) this).Handle);
				this.class_ref = JNIEnv.NewGlobalRef (local_ref);
				JNIEnv.DeleteLocalRef (local_ref);
			}

			static Delegate? cb_putFinger;
#pragma warning disable 0169
			static Delegate GetPutFingerHandler ()
			{
				if (cb_putFinger == null)
					cb_putFinger = JNINativeWrapper.CreateDelegate (new _JniMarshal_PP_V (n_PutFinger));
				return cb_putFinger;
			}

			static void n_PutFinger (IntPtr jnienv, IntPtr native__this)
			{
				var __this = global::Java.Lang.Object.GetObject<global::Com.Vanstone.Trans.Api.FingerApi.IFingerGrapImgProcess> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
				__this.PutFinger ();
			}
#pragma warning restore 0169

			IntPtr id_putFinger;
			public unsafe void PutFinger ()
			{
				if (id_putFinger == IntPtr.Zero)
					id_putFinger = JNIEnv.GetMethodID (class_ref, "putFinger", "()V");
				JNIEnv.CallVoidMethod (((global::Java.Lang.Object) this).Handle, id_putFinger);
			}

		}

		static readonly JniPeerMembers _members = new XAPeerMembers ("com/vanstone/trans/api/FingerApi", typeof (FingerApi));

		internal static IntPtr class_ref {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		public override global::Java.Interop.JniPeerMembers JniPeerMembers {
			get { return _members; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override IntPtr ThresholdClass {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override global::System.Type ThresholdType {
			get { return _members.ManagedPeerType; }
		}

		protected FingerApi (IntPtr javaReference, JniHandleOwnership transfer) : base (javaReference, transfer)
		{
		}

		// Metadata.xml XPath constructor reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='FingerApi']/constructor[@name='FingerApi' and count(parameter)=0]"
		[Register (".ctor", "()V", "")]
		public unsafe FingerApi () : base (IntPtr.Zero, JniHandleOwnership.DoNotTransfer)
		{
			const string __id = "()V";

			if (((global::Java.Lang.Object) this).Handle != IntPtr.Zero)
				return;

			try {
				var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), null);
				SetHandle (__r.Handle, JniHandleOwnership.TransferLocalRef);
				_members.InstanceMethods.FinishCreateInstance (__id, this, null);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='FingerApi']/method[@name='FingerCheckIDTemplate_Api' and count(parameter)=1 and parameter[1][@type='int']]"
		[Register ("FingerCheckIDTemplate_Api", "(I)I", "")]
		public static unsafe int FingerCheckIDTemplate_Api (int fingerID)
		{
			const string __id = "FingerCheckIDTemplate_Api.(I)I";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (fingerID);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='FingerApi']/method[@name='FingerClearCache_Api' and count(parameter)=0]"
		[Register ("FingerClearCache_Api", "()V", "")]
		public static unsafe void FingerClearCache_Api ()
		{
			const string __id = "FingerClearCache_Api.()V";
			try {
				_members.StaticMethods.InvokeVoidMethod (__id, null);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='FingerApi']/method[@name='FingerClose_Api' and count(parameter)=0]"
		[Register ("FingerClose_Api", "()I", "")]
		public static unsafe int FingerClose_Api ()
		{
			const string __id = "FingerClose_Api.()I";
			try {
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, null);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='FingerApi']/method[@name='FingerDeleteAll_Api' and count(parameter)=0]"
		[Register ("FingerDeleteAll_Api", "()I", "")]
		public static unsafe int FingerDeleteAll_Api ()
		{
			const string __id = "FingerDeleteAll_Api.()I";
			try {
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, null);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='FingerApi']/method[@name='FingerDelete_Api' and count(parameter)=1 and parameter[1][@type='int']]"
		[Register ("FingerDelete_Api", "(I)I", "")]
		public static unsafe int FingerDelete_Api (int fingerIndex)
		{
			const string __id = "FingerDelete_Api.(I)I";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (fingerIndex);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='FingerApi']/method[@name='FingerEnterFp_Api' and count(parameter)=4 and parameter[1][@type='int'] and parameter[2][@type='int'] and parameter[3][@type='int'] and parameter[4][@type='com.vanstone.trans.api.FingerApi.IFingerEntryProcess']]"
		[Register ("FingerEnterFp_Api", "(IIILcom/vanstone/trans/api/FingerApi$IFingerEntryProcess;)I", "")]
		public static unsafe int FingerEnterFp_Api (int fingerID, int entryCount, int timeOutMs, global::Com.Vanstone.Trans.Api.FingerApi.IFingerEntryProcess? listener)
		{
			const string __id = "FingerEnterFp_Api.(IIILcom/vanstone/trans/api/FingerApi$IFingerEntryProcess;)I";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [4];
				__args [0] = new JniArgumentValue (fingerID);
				__args [1] = new JniArgumentValue (entryCount);
				__args [2] = new JniArgumentValue (timeOutMs);
				__args [3] = new JniArgumentValue ((listener == null) ? IntPtr.Zero : ((global::Java.Lang.Object) listener).Handle);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				global::System.GC.KeepAlive (listener);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='FingerApi']/method[@name='FingerEnterFp_Api' and count(parameter)=5 and parameter[1][@type='int'] and parameter[2][@type='int'] and parameter[3][@type='int'] and parameter[4][@type='int'] and parameter[5][@type='com.vanstone.trans.api.FingerApi.IFingerEntryProcess']]"
		[Register ("FingerEnterFp_Api", "(IIIILcom/vanstone/trans/api/FingerApi$IFingerEntryProcess;)I", "")]
		public static unsafe int FingerEnterFp_Api (int fingerID, int entryCount, int featureType, int timeOutMs, global::Com.Vanstone.Trans.Api.FingerApi.IFingerEntryProcess? listener)
		{
			const string __id = "FingerEnterFp_Api.(IIIILcom/vanstone/trans/api/FingerApi$IFingerEntryProcess;)I";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [5];
				__args [0] = new JniArgumentValue (fingerID);
				__args [1] = new JniArgumentValue (entryCount);
				__args [2] = new JniArgumentValue (featureType);
				__args [3] = new JniArgumentValue (timeOutMs);
				__args [4] = new JniArgumentValue ((listener == null) ? IntPtr.Zero : ((global::Java.Lang.Object) listener).Handle);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				global::System.GC.KeepAlive (listener);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='FingerApi']/method[@name='FingerExportChar_Api' and count(parameter)=2 and parameter[1][@type='int'] and parameter[2][@type='byte[]']]"
		[Register ("FingerExportChar_Api", "(I[B)I", "")]
		public static unsafe int FingerExportChar_Api (int slotId, byte[]? buf)
		{
			const string __id = "FingerExportChar_Api.(I[B)I";
			IntPtr native_buf = JNIEnv.NewArray (buf);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (slotId);
				__args [1] = new JniArgumentValue (native_buf);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (buf != null) {
					JNIEnv.CopyArray (native_buf, buf);
					JNIEnv.DeleteLocalRef (native_buf);
				}
				global::System.GC.KeepAlive (buf);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='FingerApi']/method[@name='FingerExportChar_Api' and count(parameter)=3 and parameter[1][@type='int'] and parameter[2][@type='byte[]'] and parameter[3][@type='int']]"
		[Register ("FingerExportChar_Api", "(I[BI)I", "")]
		public static unsafe int FingerExportChar_Api (int slotId, byte[]? buf, int featureType)
		{
			const string __id = "FingerExportChar_Api.(I[BI)I";
			IntPtr native_buf = JNIEnv.NewArray (buf);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (slotId);
				__args [1] = new JniArgumentValue (native_buf);
				__args [2] = new JniArgumentValue (featureType);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (buf != null) {
					JNIEnv.CopyArray (native_buf, buf);
					JNIEnv.DeleteLocalRef (native_buf);
				}
				global::System.GC.KeepAlive (buf);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='FingerApi']/method[@name='FingerGetBmp_Api' and count(parameter)=1 and parameter[1][@type='byte[]']]"
		[Register ("FingerGetBmp_Api", "([B)[B", "")]
		public static unsafe byte[]? FingerGetBmp_Api (byte[]? imageData)
		{
			const string __id = "FingerGetBmp_Api.([B)[B";
			IntPtr native_imageData = JNIEnv.NewArray (imageData);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_imageData);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return (byte[]?) JNIEnv.GetArray (__rm.Handle, JniHandleOwnership.TransferLocalRef, typeof (byte));
			} finally {
				if (imageData != null) {
					JNIEnv.CopyArray (native_imageData, imageData);
					JNIEnv.DeleteLocalRef (native_imageData);
				}
				global::System.GC.KeepAlive (imageData);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='FingerApi']/method[@name='FingerGetCount_Api' and count(parameter)=0]"
		[Register ("FingerGetCount_Api", "()I", "")]
		public static unsafe int FingerGetCount_Api ()
		{
			const string __id = "FingerGetCount_Api.()I";
			try {
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, null);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='FingerApi']/method[@name='FingerGetDevInfo_Api' and count(parameter)=1 and parameter[1][@type='byte[]']]"
		[Register ("FingerGetDevInfo_Api", "([B)I", "")]
		public static unsafe int FingerGetDevInfo_Api (byte[]? devInfo)
		{
			const string __id = "FingerGetDevInfo_Api.([B)I";
			IntPtr native_devInfo = JNIEnv.NewArray (devInfo);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_devInfo);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (devInfo != null) {
					JNIEnv.CopyArray (native_devInfo, devInfo);
					JNIEnv.DeleteLocalRef (native_devInfo);
				}
				global::System.GC.KeepAlive (devInfo);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='FingerApi']/method[@name='FingerGetDevSN_Api' and count(parameter)=1 and parameter[1][@type='byte[]']]"
		[Register ("FingerGetDevSN_Api", "([B)I", "")]
		public static unsafe int FingerGetDevSN_Api (byte[]? sn)
		{
			const string __id = "FingerGetDevSN_Api.([B)I";
			IntPtr native_sn = JNIEnv.NewArray (sn);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_sn);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (sn != null) {
					JNIEnv.CopyArray (native_sn, sn);
					JNIEnv.DeleteLocalRef (native_sn);
				}
				global::System.GC.KeepAlive (sn);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='FingerApi']/method[@name='FingerGetFp_Api' and count(parameter)=3 and parameter[1][@type='int'] and parameter[2][@type='int'] and parameter[3][@type='com.vanstone.trans.api.FingerApi.IFingerGetProcess']]"
		[Register ("FingerGetFp_Api", "(IILcom/vanstone/trans/api/FingerApi$IFingerGetProcess;)I", "")]
		public static unsafe int FingerGetFp_Api (int featureType, int timeOutMs, global::Com.Vanstone.Trans.Api.FingerApi.IFingerGetProcess? listener)
		{
			const string __id = "FingerGetFp_Api.(IILcom/vanstone/trans/api/FingerApi$IFingerGetProcess;)I";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (featureType);
				__args [1] = new JniArgumentValue (timeOutMs);
				__args [2] = new JniArgumentValue ((listener == null) ? IntPtr.Zero : ((global::Java.Lang.Object) listener).Handle);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				global::System.GC.KeepAlive (listener);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='FingerApi']/method[@name='FingerGetNextEmptyID_Api' and count(parameter)=0]"
		[Register ("FingerGetNextEmptyID_Api", "()I", "")]
		public static unsafe int FingerGetNextEmptyID_Api ()
		{
			const string __id = "FingerGetNextEmptyID_Api.()I";
			try {
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, null);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='FingerApi']/method[@name='FingerGrabImg_Api' and count(parameter)=2 and parameter[1][@type='int'] and parameter[2][@type='com.vanstone.trans.api.FingerApi.IFingerGrapImgProcess']]"
		[Register ("FingerGrabImg_Api", "(ILcom/vanstone/trans/api/FingerApi$IFingerGrapImgProcess;)I", "")]
		public static unsafe int FingerGrabImg_Api (int timeOutMs, global::Com.Vanstone.Trans.Api.FingerApi.IFingerGrapImgProcess? listener)
		{
			const string __id = "FingerGrabImg_Api.(ILcom/vanstone/trans/api/FingerApi$IFingerGrapImgProcess;)I";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (timeOutMs);
				__args [1] = new JniArgumentValue ((listener == null) ? IntPtr.Zero : ((global::Java.Lang.Object) listener).Handle);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				global::System.GC.KeepAlive (listener);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='FingerApi']/method[@name='FingerIsHas_Api' and count(parameter)=0]"
		[Register ("FingerIsHas_Api", "()Z", "")]
		public static unsafe bool FingerIsHas_Api ()
		{
			const string __id = "FingerIsHas_Api.()Z";
			try {
				var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, null);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='FingerApi']/method[@name='FingerOpen_Api' and count(parameter)=0]"
		[Register ("FingerOpen_Api", "()I", "")]
		public static unsafe int FingerOpen_Api ()
		{
			const string __id = "FingerOpen_Api.()I";
			try {
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, null);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='FingerApi']/method[@name='FingerUpImage_Api' and count(parameter)=1 and parameter[1][@type='byte[]']]"
		[Register ("FingerUpImage_Api", "([B)I", "")]
		public static unsafe int FingerUpImage_Api (byte[]? imageData)
		{
			const string __id = "FingerUpImage_Api.([B)I";
			IntPtr native_imageData = JNIEnv.NewArray (imageData);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_imageData);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (imageData != null) {
					JNIEnv.CopyArray (native_imageData, imageData);
					JNIEnv.DeleteLocalRef (native_imageData);
				}
				global::System.GC.KeepAlive (imageData);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='FingerApi']/method[@name='FingerVerifyAll_Api' and count(parameter)=1 and parameter[1][@type='com.vanstone.trans.api.FingerApi.IFingerGrapImgProcess']]"
		[Register ("FingerVerifyAll_Api", "(Lcom/vanstone/trans/api/FingerApi$IFingerGrapImgProcess;)I", "")]
		public static unsafe int FingerVerifyAll_Api (global::Com.Vanstone.Trans.Api.FingerApi.IFingerGrapImgProcess? listener)
		{
			const string __id = "FingerVerifyAll_Api.(Lcom/vanstone/trans/api/FingerApi$IFingerGrapImgProcess;)I";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue ((listener == null) ? IntPtr.Zero : ((global::Java.Lang.Object) listener).Handle);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				global::System.GC.KeepAlive (listener);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='FingerApi']/method[@name='FingerVerifySetTimeout_Api' and count(parameter)=3 and parameter[1][@type='int'] and parameter[2][@type='int'] and parameter[3][@type='com.vanstone.trans.api.FingerApi.IFingerGrapImgProcess']]"
		[Register ("FingerVerifySetTimeout_Api", "(IILcom/vanstone/trans/api/FingerApi$IFingerGrapImgProcess;)I", "")]
		public static unsafe int FingerVerifySetTimeout_Api (int fingerID, int timeout, global::Com.Vanstone.Trans.Api.FingerApi.IFingerGrapImgProcess? listener)
		{
			const string __id = "FingerVerifySetTimeout_Api.(IILcom/vanstone/trans/api/FingerApi$IFingerGrapImgProcess;)I";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (fingerID);
				__args [1] = new JniArgumentValue (timeout);
				__args [2] = new JniArgumentValue ((listener == null) ? IntPtr.Zero : ((global::Java.Lang.Object) listener).Handle);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				global::System.GC.KeepAlive (listener);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='FingerApi']/method[@name='FingerVerify_Api' and count(parameter)=2 and parameter[1][@type='int'] and parameter[2][@type='com.vanstone.trans.api.FingerApi.IFingerGrapImgProcess']]"
		[Register ("FingerVerify_Api", "(ILcom/vanstone/trans/api/FingerApi$IFingerGrapImgProcess;)I", "")]
		public static unsafe int FingerVerify_Api (int fingerID, global::Com.Vanstone.Trans.Api.FingerApi.IFingerGrapImgProcess? listener)
		{
			const string __id = "FingerVerify_Api.(ILcom/vanstone/trans/api/FingerApi$IFingerGrapImgProcess;)I";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (fingerID);
				__args [1] = new JniArgumentValue ((listener == null) ? IntPtr.Zero : ((global::Java.Lang.Object) listener).Handle);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				global::System.GC.KeepAlive (listener);
			}
		}

	}
}
