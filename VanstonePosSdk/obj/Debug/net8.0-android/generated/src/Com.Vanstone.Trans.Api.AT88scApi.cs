//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable restore
using System;
using System.Collections.Generic;
using Android.Runtime;
using Java.Interop;

namespace Com.Vanstone.Trans.Api {

	// Metadata.xml XPath class reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='AT88scApi']"
	[global::Android.Runtime.Register ("com/vanstone/trans/api/AT88scApi", DoNotGenerateAcw=true)]
	public partial class AT88scApi : global::Java.Lang.Object {
		static readonly JniPeerMembers _members = new XAPeerMembers ("com/vanstone/trans/api/AT88scApi", typeof (AT88scApi));

		internal static IntPtr class_ref {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		public override global::Java.Interop.JniPeerMembers JniPeerMembers {
			get { return _members; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override IntPtr ThresholdClass {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override global::System.Type ThresholdType {
			get { return _members.ManagedPeerType; }
		}

		protected AT88scApi (IntPtr javaReference, JniHandleOwnership transfer) : base (javaReference, transfer)
		{
		}

		// Metadata.xml XPath constructor reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='AT88scApi']/constructor[@name='AT88scApi' and count(parameter)=0]"
		[Register (".ctor", "()V", "")]
		public unsafe AT88scApi () : base (IntPtr.Zero, JniHandleOwnership.DoNotTransfer)
		{
			const string __id = "()V";

			if (((global::Java.Lang.Object) this).Handle != IntPtr.Zero)
				return;

			try {
				var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), null);
				SetHandle (__r.Handle, JniHandleOwnership.TransferLocalRef);
				_members.InstanceMethods.FinishCreateInstance (__id, this, null);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='AT88scApi']/method[@name='EarseEzData_Api' and count(parameter)=3 and parameter[1][@type='int'] and parameter[2][@type='int'] and parameter[3][@type='int']]"
		[Register ("EarseEzData_Api", "(III)I", "")]
		public static unsafe int EarseEzData_Api (int zone, int offset, int len)
		{
			const string __id = "EarseEzData_Api.(III)I";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (zone);
				__args [1] = new JniArgumentValue (offset);
				__args [2] = new JniArgumentValue (len);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='AT88scApi']/method[@name='Get1608ConfigZoneData' and count(parameter)=3 and parameter[1][@type='int'] and parameter[2][@type='int'] and parameter[3][@type='byte[]']]"
		[Register ("Get1608ConfigZoneData", "(II[B)I", "")]
		public static unsafe int Get1608ConfigZoneData (int offset, int len, byte[]? data_buffer)
		{
			const string __id = "Get1608ConfigZoneData.(II[B)I";
			IntPtr native_data_buffer = JNIEnv.NewArray (data_buffer);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (offset);
				__args [1] = new JniArgumentValue (len);
				__args [2] = new JniArgumentValue (native_data_buffer);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (data_buffer != null) {
					JNIEnv.CopyArray (native_data_buffer, data_buffer);
					JNIEnv.DeleteLocalRef (native_data_buffer);
				}
				global::System.GC.KeepAlive (data_buffer);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='AT88scApi']/method[@name='GetEzKey' and count(parameter)=3 and parameter[1][@type='int'] and parameter[2][@type='int'] and parameter[3][@type='byte[]']]"
		[Register ("GetEzKey", "(II[B)I", "")]
		public static unsafe int GetEzKey (int zone, int len, byte[]? bKey)
		{
			const string __id = "GetEzKey.(II[B)I";
			IntPtr native_bKey = JNIEnv.NewArray (bKey);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (zone);
				__args [1] = new JniArgumentValue (len);
				__args [2] = new JniArgumentValue (native_bKey);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (bKey != null) {
					JNIEnv.CopyArray (native_bKey, bKey);
					JNIEnv.DeleteLocalRef (native_bKey);
				}
				global::System.GC.KeepAlive (bKey);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='AT88scApi']/method[@name='IccDetect_Api' and count(parameter)=1 and parameter[1][@type='int']]"
		[Register ("IccDetect_Api", "(I)I", "")]
		public static unsafe int IccDetect_Api (int cardNo)
		{
			const string __id = "IccDetect_Api.(I)I";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (cardNo);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='AT88scApi']/method[@name='Verify102EzKey_Api' and count(parameter)=3 and parameter[1][@type='int'] and parameter[2][@type='int'] and parameter[3][@type='byte[]']]"
		[Register ("Verify102EzKey_Api", "(II[B)I", "")]
		public static unsafe int Verify102EzKey_Api (int zone, int len, byte[]? bKey)
		{
			const string __id = "Verify102EzKey_Api.(II[B)I";
			IntPtr native_bKey = JNIEnv.NewArray (bKey);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (zone);
				__args [1] = new JniArgumentValue (len);
				__args [2] = new JniArgumentValue (native_bKey);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (bKey != null) {
					JNIEnv.CopyArray (native_bKey, bKey);
					JNIEnv.DeleteLocalRef (native_bKey);
				}
				global::System.GC.KeepAlive (bKey);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='AT88scApi']/method[@name='icc102CheckCardType_Api' and count(parameter)=1 and parameter[1][@type='byte[]']]"
		[Register ("icc102CheckCardType_Api", "([B)I", "")]
		public static unsafe int Icc102CheckCardType_Api (byte[]? cardType)
		{
			const string __id = "icc102CheckCardType_Api.([B)I";
			IntPtr native_cardType = JNIEnv.NewArray (cardType);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_cardType);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (cardType != null) {
					JNIEnv.CopyArray (native_cardType, cardType);
					JNIEnv.DeleteLocalRef (native_cardType);
				}
				global::System.GC.KeepAlive (cardType);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='AT88scApi']/method[@name='icc102ReadAppArea_Api' and count(parameter)=4 and parameter[1][@type='int'] and parameter[2][@type='int'] and parameter[3][@type='int'] and parameter[4][@type='byte[]']]"
		[Register ("icc102ReadAppArea_Api", "(III[B)I", "")]
		public static unsafe int Icc102ReadAppArea_Api (int appIndex, int offset, int len, byte[]? buffer)
		{
			const string __id = "icc102ReadAppArea_Api.(III[B)I";
			IntPtr native_buffer = JNIEnv.NewArray (buffer);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [4];
				__args [0] = new JniArgumentValue (appIndex);
				__args [1] = new JniArgumentValue (offset);
				__args [2] = new JniArgumentValue (len);
				__args [3] = new JniArgumentValue (native_buffer);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (buffer != null) {
					JNIEnv.CopyArray (native_buffer, buffer);
					JNIEnv.DeleteLocalRef (native_buffer);
				}
				global::System.GC.KeepAlive (buffer);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='AT88scApi']/method[@name='icc102ReadCodeProtectedBlock_Api' and count(parameter)=3 and parameter[1][@type='int'] and parameter[2][@type='int'] and parameter[3][@type='byte[]']]"
		[Register ("icc102ReadCodeProtectedBlock_Api", "(II[B)I", "")]
		public static unsafe int Icc102ReadCodeProtectedBlock_Api (int offset, int len, byte[]? buffer)
		{
			const string __id = "icc102ReadCodeProtectedBlock_Api.(II[B)I";
			IntPtr native_buffer = JNIEnv.NewArray (buffer);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (offset);
				__args [1] = new JniArgumentValue (len);
				__args [2] = new JniArgumentValue (native_buffer);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (buffer != null) {
					JNIEnv.CopyArray (native_buffer, buffer);
					JNIEnv.DeleteLocalRef (native_buffer);
				}
				global::System.GC.KeepAlive (buffer);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='AT88scApi']/method[@name='icc102ReadErrorCountBlock_Api' and count(parameter)=1 and parameter[1][@type='byte[]']]"
		[Register ("icc102ReadErrorCountBlock_Api", "([B)I", "")]
		public static unsafe int Icc102ReadErrorCountBlock_Api (byte[]? errorCount)
		{
			const string __id = "icc102ReadErrorCountBlock_Api.([B)I";
			IntPtr native_errorCount = JNIEnv.NewArray (errorCount);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_errorCount);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (errorCount != null) {
					JNIEnv.CopyArray (native_errorCount, errorCount);
					JNIEnv.DeleteLocalRef (native_errorCount);
				}
				global::System.GC.KeepAlive (errorCount);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='AT88scApi']/method[@name='icc102ReadMfrsLoneCode_Api' and count(parameter)=0]"
		[Register ("icc102ReadMfrsLoneCode_Api", "()[B", "")]
		public static unsafe byte[]? Icc102ReadMfrsLoneCode_Api ()
		{
			const string __id = "icc102ReadMfrsLoneCode_Api.()[B";
			try {
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, null);
				return (byte[]?) JNIEnv.GetArray (__rm.Handle, JniHandleOwnership.TransferLocalRef, typeof (byte));
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='AT88scApi']/method[@name='icc102ReadMfrsShortCode_Api' and count(parameter)=0]"
		[Register ("icc102ReadMfrsShortCode_Api", "()[B", "")]
		public static unsafe byte[]? Icc102ReadMfrsShortCode_Api ()
		{
			const string __id = "icc102ReadMfrsShortCode_Api.()[B";
			try {
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, null);
				return (byte[]?) JNIEnv.GetArray (__rm.Handle, JniHandleOwnership.TransferLocalRef, typeof (byte));
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='AT88scApi']/method[@name='icc102ReadPwdErrorCount_Api' and count(parameter)=0]"
		[Register ("icc102ReadPwdErrorCount_Api", "()I", "")]
		public static unsafe int Icc102ReadPwdErrorCount_Api ()
		{
			const string __id = "icc102ReadPwdErrorCount_Api.()I";
			try {
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, null);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='AT88scApi']/method[@name='icc102ReadTestBlock_Api' and count(parameter)=0]"
		[Register ("icc102ReadTestBlock_Api", "()[B", "")]
		public static unsafe byte[]? Icc102ReadTestBlock_Api ()
		{
			const string __id = "icc102ReadTestBlock_Api.()[B";
			try {
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, null);
				return (byte[]?) JNIEnv.GetArray (__rm.Handle, JniHandleOwnership.TransferLocalRef, typeof (byte));
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='AT88scApi']/method[@name='icc102UpdatePwd_Api' and count(parameter)=1 and parameter[1][@type='byte[]']]"
		[Register ("icc102UpdatePwd_Api", "([B)I", "")]
		public static unsafe int Icc102UpdatePwd_Api (byte[]? key)
		{
			const string __id = "icc102UpdatePwd_Api.([B)I";
			IntPtr native_key = JNIEnv.NewArray (key);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_key);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (key != null) {
					JNIEnv.CopyArray (native_key, key);
					JNIEnv.DeleteLocalRef (native_key);
				}
				global::System.GC.KeepAlive (key);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='AT88scApi']/method[@name='icc102VerifyPwd_Api' and count(parameter)=1 and parameter[1][@type='byte[]']]"
		[Register ("icc102VerifyPwd_Api", "([B)I", "")]
		public static unsafe int Icc102VerifyPwd_Api (byte[]? key)
		{
			const string __id = "icc102VerifyPwd_Api.([B)I";
			IntPtr native_key = JNIEnv.NewArray (key);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_key);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (key != null) {
					JNIEnv.CopyArray (native_key, key);
					JNIEnv.DeleteLocalRef (native_key);
				}
				global::System.GC.KeepAlive (key);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='AT88scApi']/method[@name='icc102WriteAppArea_Api' and count(parameter)=3 and parameter[1][@type='byte'] and parameter[2][@type='byte'] and parameter[3][@type='byte[]']]"
		[Register ("icc102WriteAppArea_Api", "(BB[B)I", "")]
		public static unsafe int Icc102WriteAppArea_Api (sbyte appArea, sbyte addrOffset, byte[]? writeData)
		{
			const string __id = "icc102WriteAppArea_Api.(BB[B)I";
			IntPtr native_writeData = JNIEnv.NewArray (writeData);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (appArea);
				__args [1] = new JniArgumentValue (addrOffset);
				__args [2] = new JniArgumentValue (native_writeData);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (writeData != null) {
					JNIEnv.CopyArray (native_writeData, writeData);
					JNIEnv.DeleteLocalRef (native_writeData);
				}
				global::System.GC.KeepAlive (writeData);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='AT88scApi']/method[@name='icc102WriteCardMfrsData_Api' and count(parameter)=1 and parameter[1][@type='byte[]']]"
		[Register ("icc102WriteCardMfrsData_Api", "([B)I", "")]
		public static unsafe int Icc102WriteCardMfrsData_Api (byte[]? data)
		{
			const string __id = "icc102WriteCardMfrsData_Api.([B)I";
			IntPtr native_data = JNIEnv.NewArray (data);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_data);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (data != null) {
					JNIEnv.CopyArray (native_data, data);
					JNIEnv.DeleteLocalRef (native_data);
				}
				global::System.GC.KeepAlive (data);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='AT88scApi']/method[@name='icc102WriteCodeProtectedBlock_Api' and count(parameter)=3 and parameter[1][@type='int'] and parameter[2][@type='int'] and parameter[3][@type='byte[]']]"
		[Register ("icc102WriteCodeProtectedBlock_Api", "(II[B)I", "")]
		public static unsafe int Icc102WriteCodeProtectedBlock_Api (int offset, int len, byte[]? data)
		{
			const string __id = "icc102WriteCodeProtectedBlock_Api.(II[B)I";
			IntPtr native_data = JNIEnv.NewArray (data);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (offset);
				__args [1] = new JniArgumentValue (len);
				__args [2] = new JniArgumentValue (native_data);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (data != null) {
					JNIEnv.CopyArray (native_data, data);
					JNIEnv.DeleteLocalRef (native_data);
				}
				global::System.GC.KeepAlive (data);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='AT88scApi']/method[@name='icc102WriteTestBlock_Api' and count(parameter)=1 and parameter[1][@type='byte[]']]"
		[Register ("icc102WriteTestBlock_Api", "([B)I", "")]
		public static unsafe int Icc102WriteTestBlock_Api (byte[]? data)
		{
			const string __id = "icc102WriteTestBlock_Api.([B)I";
			IntPtr native_data = JNIEnv.NewArray (data);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_data);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (data != null) {
					JNIEnv.CopyArray (native_data, data);
					JNIEnv.DeleteLocalRef (native_data);
				}
				global::System.GC.KeepAlive (data);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='AT88scApi']/method[@name='icc1608Certify_Api' and count(parameter)=0]"
		[Register ("icc1608Certify_Api", "()I", "")]
		public static unsafe int Icc1608Certify_Api ()
		{
			const string __id = "icc1608Certify_Api.()I";
			try {
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, null);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='AT88scApi']/method[@name='icc1608CheckCardType_Api' and count(parameter)=1 and parameter[1][@type='byte[]']]"
		[Register ("icc1608CheckCardType_Api", "([B)I", "")]
		public static unsafe int Icc1608CheckCardType_Api (byte[]? cardType)
		{
			const string __id = "icc1608CheckCardType_Api.([B)I";
			IntPtr native_cardType = JNIEnv.NewArray (cardType);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_cardType);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (cardType != null) {
					JNIEnv.CopyArray (native_cardType, cardType);
					JNIEnv.DeleteLocalRef (native_cardType);
				}
				global::System.GC.KeepAlive (cardType);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='AT88scApi']/method[@name='icc1608Read_Api' and count(parameter)=3 and parameter[1][@type='byte'] and parameter[2][@type='byte'] and parameter[3][@type='byte[]']]"
		[Register ("icc1608Read_Api", "(BB[B)I", "")]
		public static unsafe int Icc1608Read_Api (sbyte userArea, sbyte addr, byte[]? readData)
		{
			const string __id = "icc1608Read_Api.(BB[B)I";
			IntPtr native_readData = JNIEnv.NewArray (readData);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (userArea);
				__args [1] = new JniArgumentValue (addr);
				__args [2] = new JniArgumentValue (native_readData);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (readData != null) {
					JNIEnv.CopyArray (native_readData, readData);
					JNIEnv.DeleteLocalRef (native_readData);
				}
				global::System.GC.KeepAlive (readData);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='AT88scApi']/method[@name='icc1608SelectUserArea_Api' and count(parameter)=1 and parameter[1][@type='byte']]"
		[Register ("icc1608SelectUserArea_Api", "(B)I", "")]
		public static unsafe int Icc1608SelectUserArea_Api (sbyte userArea)
		{
			const string __id = "icc1608SelectUserArea_Api.(B)I";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (userArea);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='AT88scApi']/method[@name='icc1608VerifyKey_Api' and count(parameter)=3 and parameter[1][@type='byte'] and parameter[2][@type='byte[]'] and parameter[3][@type='byte']]"
		[Register ("icc1608VerifyKey_Api", "(B[BB)I", "")]
		public static unsafe int Icc1608VerifyKey_Api (sbyte keyMode, byte[]? key, sbyte areaCode)
		{
			const string __id = "icc1608VerifyKey_Api.(B[BB)I";
			IntPtr native_key = JNIEnv.NewArray (key);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (keyMode);
				__args [1] = new JniArgumentValue (native_key);
				__args [2] = new JniArgumentValue (areaCode);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (key != null) {
					JNIEnv.CopyArray (native_key, key);
					JNIEnv.DeleteLocalRef (native_key);
				}
				global::System.GC.KeepAlive (key);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='AT88scApi']/method[@name='icc1608Write_Api' and count(parameter)=3 and parameter[1][@type='byte'] and parameter[2][@type='byte'] and parameter[3][@type='byte[]']]"
		[Register ("icc1608Write_Api", "(BB[B)I", "")]
		public static unsafe int Icc1608Write_Api (sbyte userArea, sbyte addr, byte[]? writeData)
		{
			const string __id = "icc1608Write_Api.(BB[B)I";
			IntPtr native_writeData = JNIEnv.NewArray (writeData);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (userArea);
				__args [1] = new JniArgumentValue (addr);
				__args [2] = new JniArgumentValue (native_writeData);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (writeData != null) {
					JNIEnv.CopyArray (native_writeData, writeData);
					JNIEnv.DeleteLocalRef (native_writeData);
				}
				global::System.GC.KeepAlive (writeData);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='AT88scApi']/method[@name='powerDown_Api' and count(parameter)=0]"
		[Register ("powerDown_Api", "()I", "")]
		public static unsafe int PowerDown_Api ()
		{
			const string __id = "powerDown_Api.()I";
			try {
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, null);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='AT88scApi']/method[@name='powerOn_Api' and count(parameter)=0]"
		[Register ("powerOn_Api", "()I", "")]
		public static unsafe int PowerOn_Api ()
		{
			const string __id = "powerOn_Api.()I";
			try {
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, null);
				return __rm;
			} finally {
			}
		}

	}
}
