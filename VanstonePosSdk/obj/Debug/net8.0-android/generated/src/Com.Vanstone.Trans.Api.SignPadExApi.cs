//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable restore
using System;
using System.Collections.Generic;
using Android.Runtime;
using Java.Interop;

namespace Com.Vanstone.Trans.Api {

	// Metadata.xml XPath class reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='SignPadExApi']"
	[global::Android.Runtime.Register ("com/vanstone/trans/api/SignPadExApi", DoNotGenerateAcw=true)]
	public partial class SignPadExApi : global::Java.Lang.Object {
		static readonly JniPeerMembers _members = new XAPeerMembers ("com/vanstone/trans/api/SignPadExApi", typeof (SignPadExApi));

		internal static IntPtr class_ref {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		public override global::Java.Interop.JniPeerMembers JniPeerMembers {
			get { return _members; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override IntPtr ThresholdClass {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override global::System.Type ThresholdType {
			get { return _members.ManagedPeerType; }
		}

		protected SignPadExApi (IntPtr javaReference, JniHandleOwnership transfer) : base (javaReference, transfer)
		{
		}

		// Metadata.xml XPath constructor reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='SignPadExApi']/constructor[@name='SignPadExApi' and count(parameter)=0]"
		[Register (".ctor", "()V", "")]
		public unsafe SignPadExApi () : base (IntPtr.Zero, JniHandleOwnership.DoNotTransfer)
		{
			const string __id = "()V";

			if (((global::Java.Lang.Object) this).Handle != IntPtr.Zero)
				return;

			try {
				var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), null);
				SetHandle (__r.Handle, JniHandleOwnership.TransferLocalRef);
				_members.InstanceMethods.FinishCreateInstance (__id, this, null);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='SignPadExApi']/method[@name='SPadCalEx_Api' and count(parameter)=0]"
		[Register ("SPadCalEx_Api", "()I", "")]
		public static unsafe int SPadCalEx_Api ()
		{
			const string __id = "SPadCalEx_Api.()I";
			try {
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, null);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='SignPadExApi']/method[@name='SPadCloseEx_Api' and count(parameter)=0]"
		[Register ("SPadCloseEx_Api", "()I", "")]
		public static unsafe int SPadCloseEx_Api ()
		{
			const string __id = "SPadCloseEx_Api.()I";
			try {
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, null);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='SignPadExApi']/method[@name='SPadMakeSignEx_Api' and count(parameter)=4 and parameter[1][@type='java.lang.String'] and parameter[2][@type='int'] and parameter[3][@type='byte[]'] and parameter[4][@type='int']]"
		[Register ("SPadMakeSignEx_Api", "(Ljava/lang/String;I[BI)I", "")]
		public static unsafe int SPadMakeSignEx_Api (string? SignCode, int SignCodeLen, byte[]? pDestData, int TimeOuts)
		{
			const string __id = "SPadMakeSignEx_Api.(Ljava/lang/String;I[BI)I";
			IntPtr native_SignCode = JNIEnv.NewString ((string?)SignCode);
			IntPtr native_pDestData = JNIEnv.NewArray (pDestData);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [4];
				__args [0] = new JniArgumentValue (native_SignCode);
				__args [1] = new JniArgumentValue (SignCodeLen);
				__args [2] = new JniArgumentValue (native_pDestData);
				__args [3] = new JniArgumentValue (TimeOuts);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				JNIEnv.DeleteLocalRef (native_SignCode);
				if (pDestData != null) {
					JNIEnv.CopyArray (native_pDestData, pDestData);
					JNIEnv.DeleteLocalRef (native_pDestData);
				}
				global::System.GC.KeepAlive (pDestData);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='SignPadExApi']/method[@name='SPadOpenEx_Api' and count(parameter)=2 and parameter[1][@type='int'] and parameter[2][@type='int']]"
		[Register ("SPadOpenEx_Api", "(II)I", "")]
		public static unsafe int SPadOpenEx_Api (int SPadPort, int baud)
		{
			const string __id = "SPadOpenEx_Api.(II)I";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (SPadPort);
				__args [1] = new JniArgumentValue (baud);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='SignPadExApi']/method[@name='SPadStatusEx_Api' and count(parameter)=2 and parameter[1][@type='byte[]'] and parameter[2][@type='byte[]']]"
		[Register ("SPadStatusEx_Api", "([B[B)I", "")]
		public static unsafe int SPadStatusEx_Api (byte[]? SPadInforOut, byte[]? iInforLen)
		{
			const string __id = "SPadStatusEx_Api.([B[B)I";
			IntPtr native_SPadInforOut = JNIEnv.NewArray (SPadInforOut);
			IntPtr native_iInforLen = JNIEnv.NewArray (iInforLen);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_SPadInforOut);
				__args [1] = new JniArgumentValue (native_iInforLen);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (SPadInforOut != null) {
					JNIEnv.CopyArray (native_SPadInforOut, SPadInforOut);
					JNIEnv.DeleteLocalRef (native_SPadInforOut);
				}
				if (iInforLen != null) {
					JNIEnv.CopyArray (native_iInforLen, iInforLen);
					JNIEnv.DeleteLocalRef (native_iInforLen);
				}
				global::System.GC.KeepAlive (SPadInforOut);
				global::System.GC.KeepAlive (iInforLen);
			}
		}

	}
}
