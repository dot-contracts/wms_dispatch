//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable restore
using System;
using System.Collections.Generic;
using Android.Runtime;
using Java.Interop;

namespace Com.Vanstone.Utils {

	// Metadata.xml XPath class reference: path="/api/package[@name='com.vanstone.utils']/class[@name='Log']"
	[global::Android.Runtime.Register ("com/vanstone/utils/Log", DoNotGenerateAcw=true)]
	public partial class Log : global::Java.Lang.Object {

		// Metadata.xml XPath field reference: path="/api/package[@name='com.vanstone.utils']/class[@name='Log']/field[@name='delFlag']"
		[Register ("delFlag")]
		public static bool DelFlag {
			get {
				const string __id = "delFlag.Z";

				var __v = _members.StaticFields.GetBooleanValue (__id);
				return __v;
			}
			set {
				const string __id = "delFlag.Z";

				try {
					_members.StaticFields.SetValue (__id, value);
				} finally {
				}
			}
		}

		// Metadata.xml XPath field reference: path="/api/package[@name='com.vanstone.utils']/class[@name='Log']/field[@name='LOG_FILE_TITLE']"
		[Register ("LOG_FILE_TITLE")]
		public const string LogFileTitle = (string) "Debug";


		// Metadata.xml XPath field reference: path="/api/package[@name='com.vanstone.utils']/class[@name='Log']/field[@name='LOG_PATH']"
		[Register ("LOG_PATH")]
		public static string? LogPath {
			get {
				const string __id = "LOG_PATH.Ljava/lang/String;";

				var __v = _members.StaticFields.GetObjectValue (__id);
				return JNIEnv.GetString (__v.Handle, JniHandleOwnership.TransferLocalRef);
			}
			set {
				const string __id = "LOG_PATH.Ljava/lang/String;";

				IntPtr native_value = JNIEnv.NewString ((string?)value);
				try {
					_members.StaticFields.SetValue (__id, new JniObjectReference (native_value));
				} finally {
					JNIEnv.DeleteLocalRef (native_value);
				}
			}
		}

		static readonly JniPeerMembers _members = new XAPeerMembers ("com/vanstone/utils/Log", typeof (Log));

		internal static IntPtr class_ref {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		public override global::Java.Interop.JniPeerMembers JniPeerMembers {
			get { return _members; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override IntPtr ThresholdClass {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override global::System.Type ThresholdType {
			get { return _members.ManagedPeerType; }
		}

		protected Log (IntPtr javaReference, JniHandleOwnership transfer) : base (javaReference, transfer)
		{
		}

		// Metadata.xml XPath constructor reference: path="/api/package[@name='com.vanstone.utils']/class[@name='Log']/constructor[@name='Log' and count(parameter)=0]"
		[Register (".ctor", "()V", "")]
		public unsafe Log () : base (IntPtr.Zero, JniHandleOwnership.DoNotTransfer)
		{
			const string __id = "()V";

			if (((global::Java.Lang.Object) this).Handle != IntPtr.Zero)
				return;

			try {
				var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), null);
				SetHandle (__r.Handle, JniHandleOwnership.TransferLocalRef);
				_members.InstanceMethods.FinishCreateInstance (__id, this, null);
			} finally {
			}
		}

		public static unsafe string? LOG_PATH {
			// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='Log']/method[@name='getLOG_PATH' and count(parameter)=0]"
			[Register ("getLOG_PATH", "()Ljava/lang/String;", "")]
			get {
				const string __id = "getLOG_PATH.()Ljava/lang/String;";
				try {
					var __rm = _members.StaticMethods.InvokeObjectMethod (__id, null);
					return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
				} finally {
				}
			}
			// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='Log']/method[@name='setLOG_PATH' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
			[Register ("setLOG_PATH", "(Ljava/lang/String;)V", "")]
			set {
				const string __id = "setLOG_PATH.(Ljava/lang/String;)V";
				IntPtr native_value = JNIEnv.NewString ((string?)value);
				try {
					JniArgumentValue* __args = stackalloc JniArgumentValue [1];
					__args [0] = new JniArgumentValue (native_value);
					_members.StaticMethods.InvokeVoidMethod (__id, __args);
				} finally {
					JNIEnv.DeleteLocalRef (native_value);
				}
			}
		}

		public static unsafe bool LogFlag {
			// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='Log']/method[@name='isLogFlag' and count(parameter)=0]"
			[Register ("isLogFlag", "()Z", "")]
			get {
				const string __id = "isLogFlag.()Z";
				try {
					var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, null);
					return __rm;
				} finally {
				}
			}
			// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='Log']/method[@name='setLogFlag' and count(parameter)=1 and parameter[1][@type='boolean']]"
			[Register ("setLogFlag", "(Z)V", "")]
			set {
				const string __id = "setLogFlag.(Z)V";
				try {
					JniArgumentValue* __args = stackalloc JniArgumentValue [1];
					__args [0] = new JniArgumentValue (value);
					_members.StaticMethods.InvokeVoidMethod (__id, __args);
				} finally {
				}
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='Log']/method[@name='ByteLog' and count(parameter)=5 and parameter[1][@type='java.lang.String'] and parameter[2][@type='java.lang.Throwable'] and parameter[3][@type='java.lang.String'] and parameter[4][@type='int'] and parameter[5][@type='int']]"
		[Register ("ByteLog", "(Ljava/lang/String;Ljava/lang/Throwable;Ljava/lang/String;II)V", "")]
		public static unsafe void ByteLog (string? path, global::Java.Lang.Throwable? e, string? error_desc, int arg1, int agr2)
		{
			const string __id = "ByteLog.(Ljava/lang/String;Ljava/lang/Throwable;Ljava/lang/String;II)V";
			IntPtr native_path = JNIEnv.NewString ((string?)path);
			IntPtr native_error_desc = JNIEnv.NewString ((string?)error_desc);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [5];
				__args [0] = new JniArgumentValue (native_path);
				__args [1] = new JniArgumentValue ((e == null) ? IntPtr.Zero : ((global::Java.Lang.Throwable) e).Handle);
				__args [2] = new JniArgumentValue (native_error_desc);
				__args [3] = new JniArgumentValue (arg1);
				__args [4] = new JniArgumentValue (agr2);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				JNIEnv.DeleteLocalRef (native_path);
				JNIEnv.DeleteLocalRef (native_error_desc);
				global::System.GC.KeepAlive (e);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='Log']/method[@name='delBeforeLog' and count(parameter)=0]"
		[Register ("delBeforeLog", "()V", "")]
		public static unsafe void DelBeforeLog ()
		{
			const string __id = "delBeforeLog.()V";
			try {
				_members.StaticMethods.InvokeVoidMethod (__id, null);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='Log']/method[@name='print' and count(parameter)=1 and parameter[1][@type='byte[]']]"
		[Register ("print", "([B)V", "")]
		public static unsafe void Print (byte[]? SendBuf)
		{
			const string __id = "print.([B)V";
			IntPtr native_SendBuf = JNIEnv.NewArray (SendBuf);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_SendBuf);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				if (SendBuf != null) {
					JNIEnv.CopyArray (native_SendBuf, SendBuf);
					JNIEnv.DeleteLocalRef (native_SendBuf);
				}
				global::System.GC.KeepAlive (SendBuf);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='Log']/method[@name='writeLog' and count(parameter)=1 and parameter[1][@type='byte[]']]"
		[Register ("writeLog", "([B)V", "")]
		public static unsafe void WriteLog (byte[]? logBuf)
		{
			const string __id = "writeLog.([B)V";
			IntPtr native_logBuf = JNIEnv.NewArray (logBuf);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_logBuf);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				if (logBuf != null) {
					JNIEnv.CopyArray (native_logBuf, logBuf);
					JNIEnv.DeleteLocalRef (native_logBuf);
				}
				global::System.GC.KeepAlive (logBuf);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='Log']/method[@name='writeLog' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
		[Register ("writeLog", "(Ljava/lang/String;)V", "")]
		public static unsafe void WriteLog (string? data)
		{
			const string __id = "writeLog.(Ljava/lang/String;)V";
			IntPtr native_data = JNIEnv.NewString ((string?)data);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_data);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				JNIEnv.DeleteLocalRef (native_data);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='Log']/method[@name='writeLog' and count(parameter)=1 and parameter[1][@type='java.lang.Throwable']]"
		[Register ("writeLog", "(Ljava/lang/Throwable;)V", "")]
		public static unsafe void WriteLog (global::Java.Lang.Throwable? e)
		{
			const string __id = "writeLog.(Ljava/lang/Throwable;)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue ((e == null) ? IntPtr.Zero : ((global::Java.Lang.Throwable) e).Handle);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				global::System.GC.KeepAlive (e);
			}
		}

	}
}
