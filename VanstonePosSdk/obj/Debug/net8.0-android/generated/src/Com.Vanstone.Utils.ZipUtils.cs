//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable restore
using System;
using System.Collections.Generic;
using Android.Runtime;
using Java.Interop;

namespace Com.Vanstone.Utils {

	// Metadata.xml XPath class reference: path="/api/package[@name='com.vanstone.utils']/class[@name='ZipUtils']"
	[global::Android.Runtime.Register ("com/vanstone/utils/ZipUtils", DoNotGenerateAcw=true)]
	public partial class ZipUtils : global::Java.Lang.Object {
		static readonly JniPeerMembers _members = new XAPeerMembers ("com/vanstone/utils/ZipUtils", typeof (ZipUtils));

		internal static IntPtr class_ref {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		public override global::Java.Interop.JniPeerMembers JniPeerMembers {
			get { return _members; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override IntPtr ThresholdClass {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override global::System.Type ThresholdType {
			get { return _members.ManagedPeerType; }
		}

		protected ZipUtils (IntPtr javaReference, JniHandleOwnership transfer) : base (javaReference, transfer)
		{
		}

		// Metadata.xml XPath constructor reference: path="/api/package[@name='com.vanstone.utils']/class[@name='ZipUtils']/constructor[@name='ZipUtils' and count(parameter)=0]"
		[Register (".ctor", "()V", "")]
		public unsafe ZipUtils () : base (IntPtr.Zero, JniHandleOwnership.DoNotTransfer)
		{
			const string __id = "()V";

			if (((global::Java.Lang.Object) this).Handle != IntPtr.Zero)
				return;

			try {
				var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), null);
				SetHandle (__r.Handle, JniHandleOwnership.TransferLocalRef);
				_members.InstanceMethods.FinishCreateInstance (__id, this, null);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='ZipUtils']/method[@name='getEntriesEnumeration' and count(parameter)=1 and parameter[1][@type='java.io.File']]"
		[Register ("getEntriesEnumeration", "(Ljava/io/File;)Ljava/util/Enumeration;", "")]
		public static unsafe global::Java.Util.IEnumeration? GetEntriesEnumeration (global::Java.IO.File? zipFile)
		{
			const string __id = "getEntriesEnumeration.(Ljava/io/File;)Ljava/util/Enumeration;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue ((zipFile == null) ? IntPtr.Zero : ((global::Java.Lang.Object) zipFile).Handle);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return global::Java.Lang.Object.GetObject<global::Java.Util.IEnumeration> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				global::System.GC.KeepAlive (zipFile);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='ZipUtils']/method[@name='getEntriesNames' and count(parameter)=1 and parameter[1][@type='java.io.File']]"
		[Register ("getEntriesNames", "(Ljava/io/File;)Ljava/util/ArrayList;", "")]
		public static unsafe global::System.Collections.Generic.IList<string>? GetEntriesNames (global::Java.IO.File? zipFile)
		{
			const string __id = "getEntriesNames.(Ljava/io/File;)Ljava/util/ArrayList;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue ((zipFile == null) ? IntPtr.Zero : ((global::Java.Lang.Object) zipFile).Handle);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return global::Android.Runtime.JavaList<string>.FromJniHandle (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				global::System.GC.KeepAlive (zipFile);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='ZipUtils']/method[@name='getEntryComment' and count(parameter)=1 and parameter[1][@type='java.util.zip.ZipEntry']]"
		[Register ("getEntryComment", "(Ljava/util/zip/ZipEntry;)Ljava/lang/String;", "")]
		public static unsafe string? GetEntryComment (global::Java.Util.Zip.ZipEntry? entry)
		{
			const string __id = "getEntryComment.(Ljava/util/zip/ZipEntry;)Ljava/lang/String;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue ((entry == null) ? IntPtr.Zero : ((global::Java.Lang.Object) entry).Handle);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				global::System.GC.KeepAlive (entry);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='ZipUtils']/method[@name='getEntryName' and count(parameter)=1 and parameter[1][@type='java.util.zip.ZipEntry']]"
		[Register ("getEntryName", "(Ljava/util/zip/ZipEntry;)Ljava/lang/String;", "")]
		public static unsafe string? GetEntryName (global::Java.Util.Zip.ZipEntry? entry)
		{
			const string __id = "getEntryName.(Ljava/util/zip/ZipEntry;)Ljava/lang/String;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue ((entry == null) ? IntPtr.Zero : ((global::Java.Lang.Object) entry).Handle);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				global::System.GC.KeepAlive (entry);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='ZipUtils']/method[@name='upZipFile' and count(parameter)=2 and parameter[1][@type='java.io.File'] and parameter[2][@type='java.lang.String']]"
		[Register ("upZipFile", "(Ljava/io/File;Ljava/lang/String;)V", "")]
		public static unsafe void UpZipFile (global::Java.IO.File? zipFile, string? folderPath)
		{
			const string __id = "upZipFile.(Ljava/io/File;Ljava/lang/String;)V";
			IntPtr native_folderPath = JNIEnv.NewString ((string?)folderPath);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue ((zipFile == null) ? IntPtr.Zero : ((global::Java.Lang.Object) zipFile).Handle);
				__args [1] = new JniArgumentValue (native_folderPath);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				JNIEnv.DeleteLocalRef (native_folderPath);
				global::System.GC.KeepAlive (zipFile);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='ZipUtils']/method[@name='upZipSelectedFile' and count(parameter)=3 and parameter[1][@type='java.io.File'] and parameter[2][@type='java.lang.String'] and parameter[3][@type='java.lang.String']]"
		[Register ("upZipSelectedFile", "(Ljava/io/File;Ljava/lang/String;Ljava/lang/String;)Ljava/util/ArrayList;", "")]
		public static unsafe global::System.Collections.Generic.IList<global::Java.IO.File>? UpZipSelectedFile (global::Java.IO.File? zipFile, string? folderPath, string? nameContains)
		{
			const string __id = "upZipSelectedFile.(Ljava/io/File;Ljava/lang/String;Ljava/lang/String;)Ljava/util/ArrayList;";
			IntPtr native_folderPath = JNIEnv.NewString ((string?)folderPath);
			IntPtr native_nameContains = JNIEnv.NewString ((string?)nameContains);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue ((zipFile == null) ? IntPtr.Zero : ((global::Java.Lang.Object) zipFile).Handle);
				__args [1] = new JniArgumentValue (native_folderPath);
				__args [2] = new JniArgumentValue (native_nameContains);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return global::Android.Runtime.JavaList<global::Java.IO.File>.FromJniHandle (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				JNIEnv.DeleteLocalRef (native_folderPath);
				JNIEnv.DeleteLocalRef (native_nameContains);
				global::System.GC.KeepAlive (zipFile);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='ZipUtils']/method[@name='zipFiles' and count(parameter)=2 and parameter[1][@type='java.util.Collection&lt;java.io.File&gt;'] and parameter[2][@type='java.io.File']]"
		[Register ("zipFiles", "(Ljava/util/Collection;Ljava/io/File;)V", "")]
		public static unsafe void ZipFiles (global::System.Collections.Generic.ICollection<global::Java.IO.File>? resFileList, global::Java.IO.File? zipFile)
		{
			const string __id = "zipFiles.(Ljava/util/Collection;Ljava/io/File;)V";
			IntPtr native_resFileList = global::Android.Runtime.JavaCollection<global::Java.IO.File>.ToLocalJniHandle (resFileList);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_resFileList);
				__args [1] = new JniArgumentValue ((zipFile == null) ? IntPtr.Zero : ((global::Java.Lang.Object) zipFile).Handle);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				JNIEnv.DeleteLocalRef (native_resFileList);
				global::System.GC.KeepAlive (resFileList);
				global::System.GC.KeepAlive (zipFile);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='ZipUtils']/method[@name='zipFiles' and count(parameter)=3 and parameter[1][@type='java.util.Collection&lt;java.io.File&gt;'] and parameter[2][@type='java.io.File'] and parameter[3][@type='java.lang.String']]"
		[Register ("zipFiles", "(Ljava/util/Collection;Ljava/io/File;Ljava/lang/String;)V", "")]
		public static unsafe void ZipFiles (global::System.Collections.Generic.ICollection<global::Java.IO.File>? resFileList, global::Java.IO.File? zipFile, string? comment)
		{
			const string __id = "zipFiles.(Ljava/util/Collection;Ljava/io/File;Ljava/lang/String;)V";
			IntPtr native_resFileList = global::Android.Runtime.JavaCollection<global::Java.IO.File>.ToLocalJniHandle (resFileList);
			IntPtr native_comment = JNIEnv.NewString ((string?)comment);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (native_resFileList);
				__args [1] = new JniArgumentValue ((zipFile == null) ? IntPtr.Zero : ((global::Java.Lang.Object) zipFile).Handle);
				__args [2] = new JniArgumentValue (native_comment);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				JNIEnv.DeleteLocalRef (native_resFileList);
				JNIEnv.DeleteLocalRef (native_comment);
				global::System.GC.KeepAlive (resFileList);
				global::System.GC.KeepAlive (zipFile);
			}
		}

	}
}
