//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable restore
using System;
using System.Collections.Generic;
using Android.Runtime;
using Java.Interop;

namespace Com.Vanstone.Trans.Api {

	// Metadata.xml XPath class reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='MathsApi']"
	[global::Android.Runtime.Register ("com/vanstone/trans/api/MathsApi", DoNotGenerateAcw=true)]
	public partial class MathsApi : global::Java.Lang.Object {
		static readonly JniPeerMembers _members = new XAPeerMembers ("com/vanstone/trans/api/MathsApi", typeof (MathsApi));

		internal static IntPtr class_ref {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		public override global::Java.Interop.JniPeerMembers JniPeerMembers {
			get { return _members; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override IntPtr ThresholdClass {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override global::System.Type ThresholdType {
			get { return _members.ManagedPeerType; }
		}

		protected MathsApi (IntPtr javaReference, JniHandleOwnership transfer) : base (javaReference, transfer)
		{
		}

		// Metadata.xml XPath constructor reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='MathsApi']/constructor[@name='MathsApi' and count(parameter)=0]"
		[Register (".ctor", "()V", "")]
		public unsafe MathsApi () : base (IntPtr.Zero, JniHandleOwnership.DoNotTransfer)
		{
			const string __id = "()V";

			if (((global::Java.Lang.Object) this).Handle != IntPtr.Zero)
				return;

			try {
				var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), null);
				SetHandle (__r.Handle, JniHandleOwnership.TransferLocalRef);
				_members.InstanceMethods.FinishCreateInstance (__id, this, null);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='MathsApi']/method[@name='AscAdd_Api' and count(parameter)=3 and parameter[1][@type='byte[]'] and parameter[2][@type='byte[]'] and parameter[3][@type='int']]"
		[Register ("AscAdd_Api", "([B[BI)I", "")]
		public static unsafe int AscAdd_Api (byte[]? augend, byte[]? addend, int len)
		{
			const string __id = "AscAdd_Api.([B[BI)I";
			IntPtr native_augend = JNIEnv.NewArray (augend);
			IntPtr native_addend = JNIEnv.NewArray (addend);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (native_augend);
				__args [1] = new JniArgumentValue (native_addend);
				__args [2] = new JniArgumentValue (len);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (augend != null) {
					JNIEnv.CopyArray (native_augend, augend);
					JNIEnv.DeleteLocalRef (native_augend);
				}
				if (addend != null) {
					JNIEnv.CopyArray (native_addend, addend);
					JNIEnv.DeleteLocalRef (native_addend);
				}
				global::System.GC.KeepAlive (augend);
				global::System.GC.KeepAlive (addend);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='MathsApi']/method[@name='AscDec_Api' and count(parameter)=2 and parameter[1][@type='byte[]'] and parameter[2][@type='int']]"
		[Register ("AscDec_Api", "([BI)I", "")]
		public static unsafe int AscDec_Api (byte[]? asc, int len)
		{
			const string __id = "AscDec_Api.([BI)I";
			IntPtr native_asc = JNIEnv.NewArray (asc);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_asc);
				__args [1] = new JniArgumentValue (len);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (asc != null) {
					JNIEnv.CopyArray (native_asc, asc);
					JNIEnv.DeleteLocalRef (native_asc);
				}
				global::System.GC.KeepAlive (asc);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='MathsApi']/method[@name='AscInc_Api' and count(parameter)=2 and parameter[1][@type='byte[]'] and parameter[2][@type='int']]"
		[Register ("AscInc_Api", "([BI)I", "")]
		public static unsafe int AscInc_Api (byte[]? asc, int len)
		{
			const string __id = "AscInc_Api.([BI)I";
			IntPtr native_asc = JNIEnv.NewArray (asc);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_asc);
				__args [1] = new JniArgumentValue (len);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (asc != null) {
					JNIEnv.CopyArray (native_asc, asc);
					JNIEnv.DeleteLocalRef (native_asc);
				}
				global::System.GC.KeepAlive (asc);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='MathsApi']/method[@name='AscSub_Api' and count(parameter)=3 and parameter[1][@type='byte[]'] and parameter[2][@type='byte[]'] and parameter[3][@type='int']]"
		[Register ("AscSub_Api", "([B[BI)I", "")]
		public static unsafe int AscSub_Api (byte[]? minuend, byte[]? subtrahend, int len)
		{
			const string __id = "AscSub_Api.([B[BI)I";
			IntPtr native_minuend = JNIEnv.NewArray (minuend);
			IntPtr native_subtrahend = JNIEnv.NewArray (subtrahend);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (native_minuend);
				__args [1] = new JniArgumentValue (native_subtrahend);
				__args [2] = new JniArgumentValue (len);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (minuend != null) {
					JNIEnv.CopyArray (native_minuend, minuend);
					JNIEnv.DeleteLocalRef (native_minuend);
				}
				if (subtrahend != null) {
					JNIEnv.CopyArray (native_subtrahend, subtrahend);
					JNIEnv.DeleteLocalRef (native_subtrahend);
				}
				global::System.GC.KeepAlive (minuend);
				global::System.GC.KeepAlive (subtrahend);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='MathsApi']/method[@name='AscToBcd_Api' and count(parameter)=3 and parameter[1][@type='byte[]'] and parameter[2][@type='byte[]'] and parameter[3][@type='int']]"
		[Register ("AscToBcd_Api", "([B[BI)V", "")]
		public static unsafe void AscToBcd_Api (byte[]? sBcdBuf, byte[]? sAscBuf, int iAscLen)
		{
			const string __id = "AscToBcd_Api.([B[BI)V";
			IntPtr native_sBcdBuf = JNIEnv.NewArray (sBcdBuf);
			IntPtr native_sAscBuf = JNIEnv.NewArray (sAscBuf);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (native_sBcdBuf);
				__args [1] = new JniArgumentValue (native_sAscBuf);
				__args [2] = new JniArgumentValue (iAscLen);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				if (sBcdBuf != null) {
					JNIEnv.CopyArray (native_sBcdBuf, sBcdBuf);
					JNIEnv.DeleteLocalRef (native_sBcdBuf);
				}
				if (sAscBuf != null) {
					JNIEnv.CopyArray (native_sAscBuf, sAscBuf);
					JNIEnv.DeleteLocalRef (native_sAscBuf);
				}
				global::System.GC.KeepAlive (sBcdBuf);
				global::System.GC.KeepAlive (sAscBuf);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='MathsApi']/method[@name='AscToLong_Api' and count(parameter)=2 and parameter[1][@type='byte[]'] and parameter[2][@type='int']]"
		[Register ("AscToLong_Api", "([BI)J", "")]
		public static unsafe long AscToLong_Api (byte[]? sAsc, int ucLen)
		{
			const string __id = "AscToLong_Api.([BI)J";
			IntPtr native_sAsc = JNIEnv.NewArray (sAsc);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_sAsc);
				__args [1] = new JniArgumentValue (ucLen);
				var __rm = _members.StaticMethods.InvokeInt64Method (__id, __args);
				return __rm;
			} finally {
				if (sAsc != null) {
					JNIEnv.CopyArray (native_sAsc, sAsc);
					JNIEnv.DeleteLocalRef (native_sAsc);
				}
				global::System.GC.KeepAlive (sAsc);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='MathsApi']/method[@name='BcdAdd_Api' and count(parameter)=3 and parameter[1][@type='byte[]'] and parameter[2][@type='byte[]'] and parameter[3][@type='int']]"
		[Register ("BcdAdd_Api", "([B[BI)I", "")]
		public static unsafe int BcdAdd_Api (byte[]? augend, byte[]? addend, int len)
		{
			const string __id = "BcdAdd_Api.([B[BI)I";
			IntPtr native_augend = JNIEnv.NewArray (augend);
			IntPtr native_addend = JNIEnv.NewArray (addend);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (native_augend);
				__args [1] = new JniArgumentValue (native_addend);
				__args [2] = new JniArgumentValue (len);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (augend != null) {
					JNIEnv.CopyArray (native_augend, augend);
					JNIEnv.DeleteLocalRef (native_augend);
				}
				if (addend != null) {
					JNIEnv.CopyArray (native_addend, addend);
					JNIEnv.DeleteLocalRef (native_addend);
				}
				global::System.GC.KeepAlive (augend);
				global::System.GC.KeepAlive (addend);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='MathsApi']/method[@name='BcdDec_Api' and count(parameter)=2 and parameter[1][@type='byte[]'] and parameter[2][@type='int']]"
		[Register ("BcdDec_Api", "([BI)I", "")]
		public static unsafe int BcdDec_Api (byte[]? bcd, int len)
		{
			const string __id = "BcdDec_Api.([BI)I";
			IntPtr native_bcd = JNIEnv.NewArray (bcd);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_bcd);
				__args [1] = new JniArgumentValue (len);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (bcd != null) {
					JNIEnv.CopyArray (native_bcd, bcd);
					JNIEnv.DeleteLocalRef (native_bcd);
				}
				global::System.GC.KeepAlive (bcd);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='MathsApi']/method[@name='BcdInc_Api' and count(parameter)=2 and parameter[1][@type='byte[]'] and parameter[2][@type='int']]"
		[Register ("BcdInc_Api", "([BI)I", "")]
		public static unsafe int BcdInc_Api (byte[]? bcd, int len)
		{
			const string __id = "BcdInc_Api.([BI)I";
			IntPtr native_bcd = JNIEnv.NewArray (bcd);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_bcd);
				__args [1] = new JniArgumentValue (len);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (bcd != null) {
					JNIEnv.CopyArray (native_bcd, bcd);
					JNIEnv.DeleteLocalRef (native_bcd);
				}
				global::System.GC.KeepAlive (bcd);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='MathsApi']/method[@name='BcdSubDataTime_Api' and count(parameter)=3 and parameter[1][@type='byte[]'] and parameter[2][@type='byte[]'] and parameter[3][@type='byte[]']]"
		[Register ("BcdSubDataTime_Api", "([B[B[B)I", "")]
		public static unsafe int BcdSubDataTime_Api (byte[]? pInBcdDateTimeOne, byte[]? pInBcdDateTimeTwo, byte[]? pOutSub)
		{
			const string __id = "BcdSubDataTime_Api.([B[B[B)I";
			IntPtr native_pInBcdDateTimeOne = JNIEnv.NewArray (pInBcdDateTimeOne);
			IntPtr native_pInBcdDateTimeTwo = JNIEnv.NewArray (pInBcdDateTimeTwo);
			IntPtr native_pOutSub = JNIEnv.NewArray (pOutSub);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (native_pInBcdDateTimeOne);
				__args [1] = new JniArgumentValue (native_pInBcdDateTimeTwo);
				__args [2] = new JniArgumentValue (native_pOutSub);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (pInBcdDateTimeOne != null) {
					JNIEnv.CopyArray (native_pInBcdDateTimeOne, pInBcdDateTimeOne);
					JNIEnv.DeleteLocalRef (native_pInBcdDateTimeOne);
				}
				if (pInBcdDateTimeTwo != null) {
					JNIEnv.CopyArray (native_pInBcdDateTimeTwo, pInBcdDateTimeTwo);
					JNIEnv.DeleteLocalRef (native_pInBcdDateTimeTwo);
				}
				if (pOutSub != null) {
					JNIEnv.CopyArray (native_pOutSub, pOutSub);
					JNIEnv.DeleteLocalRef (native_pOutSub);
				}
				global::System.GC.KeepAlive (pInBcdDateTimeOne);
				global::System.GC.KeepAlive (pInBcdDateTimeTwo);
				global::System.GC.KeepAlive (pOutSub);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='MathsApi']/method[@name='BcdSub_Api' and count(parameter)=3 and parameter[1][@type='byte[]'] and parameter[2][@type='byte[]'] and parameter[3][@type='int']]"
		[Register ("BcdSub_Api", "([B[BI)I", "")]
		public static unsafe int BcdSub_Api (byte[]? minuend, byte[]? subtrahend, int len)
		{
			const string __id = "BcdSub_Api.([B[BI)I";
			IntPtr native_minuend = JNIEnv.NewArray (minuend);
			IntPtr native_subtrahend = JNIEnv.NewArray (subtrahend);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (native_minuend);
				__args [1] = new JniArgumentValue (native_subtrahend);
				__args [2] = new JniArgumentValue (len);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (minuend != null) {
					JNIEnv.CopyArray (native_minuend, minuend);
					JNIEnv.DeleteLocalRef (native_minuend);
				}
				if (subtrahend != null) {
					JNIEnv.CopyArray (native_subtrahend, subtrahend);
					JNIEnv.DeleteLocalRef (native_subtrahend);
				}
				global::System.GC.KeepAlive (minuend);
				global::System.GC.KeepAlive (subtrahend);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='MathsApi']/method[@name='BcdToAsc_Api' and count(parameter)=3 and parameter[1][@type='byte[]'] and parameter[2][@type='byte[]'] and parameter[3][@type='int']]"
		[Register ("BcdToAsc_Api", "([B[BI)V", "")]
		public static unsafe void BcdToAsc_Api (byte[]? sAscBuf, byte[]? sBcdBuf, int iAscLen)
		{
			const string __id = "BcdToAsc_Api.([B[BI)V";
			IntPtr native_sAscBuf = JNIEnv.NewArray (sAscBuf);
			IntPtr native_sBcdBuf = JNIEnv.NewArray (sBcdBuf);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (native_sAscBuf);
				__args [1] = new JniArgumentValue (native_sBcdBuf);
				__args [2] = new JniArgumentValue (iAscLen);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				if (sAscBuf != null) {
					JNIEnv.CopyArray (native_sAscBuf, sAscBuf);
					JNIEnv.DeleteLocalRef (native_sAscBuf);
				}
				if (sBcdBuf != null) {
					JNIEnv.CopyArray (native_sBcdBuf, sBcdBuf);
					JNIEnv.DeleteLocalRef (native_sBcdBuf);
				}
				global::System.GC.KeepAlive (sAscBuf);
				global::System.GC.KeepAlive (sBcdBuf);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='MathsApi']/method[@name='BcdToLong_Api' and count(parameter)=2 and parameter[1][@type='byte[]'] and parameter[2][@type='int']]"
		[Register ("BcdToLong_Api", "([BI)J", "")]
		public static unsafe long BcdToLong_Api (byte[]? sBcdBuf, int iBcdLen)
		{
			const string __id = "BcdToLong_Api.([BI)J";
			IntPtr native_sBcdBuf = JNIEnv.NewArray (sBcdBuf);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_sBcdBuf);
				__args [1] = new JniArgumentValue (iBcdLen);
				var __rm = _members.StaticMethods.InvokeInt64Method (__id, __args);
				return __rm;
			} finally {
				if (sBcdBuf != null) {
					JNIEnv.CopyArray (native_sBcdBuf, sBcdBuf);
					JNIEnv.DeleteLocalRef (native_sBcdBuf);
				}
				global::System.GC.KeepAlive (sBcdBuf);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='MathsApi']/method[@name='Des3Calc_Api' and count(parameter)=4 and parameter[1][@type='byte[]'] and parameter[2][@type='byte[]'] and parameter[3][@type='byte[]'] and parameter[4][@type='int']]"
		[Register ("Des3Calc_Api", "([B[B[BI)V", "")]
		public static unsafe void Des3Calc_Api (byte[]? source, byte[]? dest, byte[]? inkey, int flag)
		{
			const string __id = "Des3Calc_Api.([B[B[BI)V";
			IntPtr native_source = JNIEnv.NewArray (source);
			IntPtr native_dest = JNIEnv.NewArray (dest);
			IntPtr native_inkey = JNIEnv.NewArray (inkey);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [4];
				__args [0] = new JniArgumentValue (native_source);
				__args [1] = new JniArgumentValue (native_dest);
				__args [2] = new JniArgumentValue (native_inkey);
				__args [3] = new JniArgumentValue (flag);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				if (source != null) {
					JNIEnv.CopyArray (native_source, source);
					JNIEnv.DeleteLocalRef (native_source);
				}
				if (dest != null) {
					JNIEnv.CopyArray (native_dest, dest);
					JNIEnv.DeleteLocalRef (native_dest);
				}
				if (inkey != null) {
					JNIEnv.CopyArray (native_inkey, inkey);
					JNIEnv.DeleteLocalRef (native_inkey);
				}
				global::System.GC.KeepAlive (source);
				global::System.GC.KeepAlive (dest);
				global::System.GC.KeepAlive (inkey);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='MathsApi']/method[@name='Des3Calc_Api' and count(parameter)=6 and parameter[1][@type='byte[]'] and parameter[2][@type='int'] and parameter[3][@type='byte[]'] and parameter[4][@type='int'] and parameter[5][@type='byte[]'] and parameter[6][@type='int']]"
		[Register ("Des3Calc_Api", "([BI[BI[BI)V", "")]
		public static unsafe void Des3Calc_Api (byte[]? source, int spos, byte[]? dest, int dpos, byte[]? inkey, int flag)
		{
			const string __id = "Des3Calc_Api.([BI[BI[BI)V";
			IntPtr native_source = JNIEnv.NewArray (source);
			IntPtr native_dest = JNIEnv.NewArray (dest);
			IntPtr native_inkey = JNIEnv.NewArray (inkey);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [6];
				__args [0] = new JniArgumentValue (native_source);
				__args [1] = new JniArgumentValue (spos);
				__args [2] = new JniArgumentValue (native_dest);
				__args [3] = new JniArgumentValue (dpos);
				__args [4] = new JniArgumentValue (native_inkey);
				__args [5] = new JniArgumentValue (flag);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				if (source != null) {
					JNIEnv.CopyArray (native_source, source);
					JNIEnv.DeleteLocalRef (native_source);
				}
				if (dest != null) {
					JNIEnv.CopyArray (native_dest, dest);
					JNIEnv.DeleteLocalRef (native_dest);
				}
				if (inkey != null) {
					JNIEnv.CopyArray (native_inkey, inkey);
					JNIEnv.DeleteLocalRef (native_inkey);
				}
				global::System.GC.KeepAlive (source);
				global::System.GC.KeepAlive (dest);
				global::System.GC.KeepAlive (inkey);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='MathsApi']/method[@name='DesCalc_Api' and count(parameter)=4 and parameter[1][@type='byte[]'] and parameter[2][@type='byte[]'] and parameter[3][@type='byte[]'] and parameter[4][@type='int']]"
		[Register ("DesCalc_Api", "([B[B[BI)V", "")]
		public static unsafe void DesCalc_Api (byte[]? source, byte[]? dest, byte[]? inkey, int flag)
		{
			const string __id = "DesCalc_Api.([B[B[BI)V";
			IntPtr native_source = JNIEnv.NewArray (source);
			IntPtr native_dest = JNIEnv.NewArray (dest);
			IntPtr native_inkey = JNIEnv.NewArray (inkey);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [4];
				__args [0] = new JniArgumentValue (native_source);
				__args [1] = new JniArgumentValue (native_dest);
				__args [2] = new JniArgumentValue (native_inkey);
				__args [3] = new JniArgumentValue (flag);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				if (source != null) {
					JNIEnv.CopyArray (native_source, source);
					JNIEnv.DeleteLocalRef (native_source);
				}
				if (dest != null) {
					JNIEnv.CopyArray (native_dest, dest);
					JNIEnv.DeleteLocalRef (native_dest);
				}
				if (inkey != null) {
					JNIEnv.CopyArray (native_inkey, inkey);
					JNIEnv.DeleteLocalRef (native_inkey);
				}
				global::System.GC.KeepAlive (source);
				global::System.GC.KeepAlive (dest);
				global::System.GC.KeepAlive (inkey);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='MathsApi']/method[@name='DesCalc_Api' and count(parameter)=6 and parameter[1][@type='byte[]'] and parameter[2][@type='int'] and parameter[3][@type='byte[]'] and parameter[4][@type='int'] and parameter[5][@type='byte[]'] and parameter[6][@type='int']]"
		[Register ("DesCalc_Api", "([BI[BI[BI)V", "")]
		public static unsafe void DesCalc_Api (byte[]? source, int spos, byte[]? dest, int dpos, byte[]? inkey, int flag)
		{
			const string __id = "DesCalc_Api.([BI[BI[BI)V";
			IntPtr native_source = JNIEnv.NewArray (source);
			IntPtr native_dest = JNIEnv.NewArray (dest);
			IntPtr native_inkey = JNIEnv.NewArray (inkey);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [6];
				__args [0] = new JniArgumentValue (native_source);
				__args [1] = new JniArgumentValue (spos);
				__args [2] = new JniArgumentValue (native_dest);
				__args [3] = new JniArgumentValue (dpos);
				__args [4] = new JniArgumentValue (native_inkey);
				__args [5] = new JniArgumentValue (flag);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				if (source != null) {
					JNIEnv.CopyArray (native_source, source);
					JNIEnv.DeleteLocalRef (native_source);
				}
				if (dest != null) {
					JNIEnv.CopyArray (native_dest, dest);
					JNIEnv.DeleteLocalRef (native_dest);
				}
				if (inkey != null) {
					JNIEnv.CopyArray (native_inkey, inkey);
					JNIEnv.DeleteLocalRef (native_inkey);
				}
				global::System.GC.KeepAlive (source);
				global::System.GC.KeepAlive (dest);
				global::System.GC.KeepAlive (inkey);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='MathsApi']/method[@name='LeepYear' and count(parameter)=1 and parameter[1][@type='int']]"
		[Register ("LeepYear", "(I)Z", "")]
		public static unsafe bool LeepYear (int year)
		{
			const string __id = "LeepYear.(I)Z";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (year);
				var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, __args);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='MathsApi']/method[@name='LongToAsc_Api' and count(parameter)=2 and parameter[1][@type='long'] and parameter[2][@type='byte[]']]"
		[Register ("LongToAsc_Api", "(J[B)V", "")]
		public static unsafe void LongToAsc_Api (long lSrcValue, byte[]? szAscBuf)
		{
			const string __id = "LongToAsc_Api.(J[B)V";
			IntPtr native_szAscBuf = JNIEnv.NewArray (szAscBuf);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (lSrcValue);
				__args [1] = new JniArgumentValue (native_szAscBuf);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				if (szAscBuf != null) {
					JNIEnv.CopyArray (native_szAscBuf, szAscBuf);
					JNIEnv.DeleteLocalRef (native_szAscBuf);
				}
				global::System.GC.KeepAlive (szAscBuf);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='MathsApi']/method[@name='LongToBcd_Api' and count(parameter)=3 and parameter[1][@type='byte[]'] and parameter[2][@type='long'] and parameter[3][@type='int']]"
		[Register ("LongToBcd_Api", "([BJI)I", "")]
		public static unsafe int LongToBcd_Api (byte[]? sBcdBuf, long lSrcValue, int iBcdLen)
		{
			const string __id = "LongToBcd_Api.([BJI)I";
			IntPtr native_sBcdBuf = JNIEnv.NewArray (sBcdBuf);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (native_sBcdBuf);
				__args [1] = new JniArgumentValue (lSrcValue);
				__args [2] = new JniArgumentValue (iBcdLen);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (sBcdBuf != null) {
					JNIEnv.CopyArray (native_sBcdBuf, sBcdBuf);
					JNIEnv.DeleteLocalRef (native_sBcdBuf);
				}
				global::System.GC.KeepAlive (sBcdBuf);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='MathsApi']/method[@name='Sm4Calc_Api' and count(parameter)=5 and parameter[1][@type='byte[]'] and parameter[2][@type='int'] and parameter[3][@type='byte[]'] and parameter[4][@type='byte[]'] and parameter[5][@type='int']]"
		[Register ("Sm4Calc_Api", "([BI[B[BI)I", "")]
		public static unsafe int Sm4Calc_Api (byte[]? Source, int SourceLen, byte[]? Dest, byte[]? Inkey, int Flag)
		{
			const string __id = "Sm4Calc_Api.([BI[B[BI)I";
			IntPtr native_Source = JNIEnv.NewArray (Source);
			IntPtr native_Dest = JNIEnv.NewArray (Dest);
			IntPtr native_Inkey = JNIEnv.NewArray (Inkey);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [5];
				__args [0] = new JniArgumentValue (native_Source);
				__args [1] = new JniArgumentValue (SourceLen);
				__args [2] = new JniArgumentValue (native_Dest);
				__args [3] = new JniArgumentValue (native_Inkey);
				__args [4] = new JniArgumentValue (Flag);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (Source != null) {
					JNIEnv.CopyArray (native_Source, Source);
					JNIEnv.DeleteLocalRef (native_Source);
				}
				if (Dest != null) {
					JNIEnv.CopyArray (native_Dest, Dest);
					JNIEnv.DeleteLocalRef (native_Dest);
				}
				if (Inkey != null) {
					JNIEnv.CopyArray (native_Inkey, Inkey);
					JNIEnv.DeleteLocalRef (native_Inkey);
				}
				global::System.GC.KeepAlive (Source);
				global::System.GC.KeepAlive (Dest);
				global::System.GC.KeepAlive (Inkey);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='MathsApi']/method[@name='U32ToBcd' and count(parameter)=3 and parameter[1][@type='byte[]'] and parameter[2][@type='int'] and parameter[3][@type='int']]"
		[Register ("U32ToBcd", "([BII)V", "")]
		public static unsafe void U32ToBcd (byte[]? Bcd, int Src, int Len)
		{
			const string __id = "U32ToBcd.([BII)V";
			IntPtr native_Bcd = JNIEnv.NewArray (Bcd);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (native_Bcd);
				__args [1] = new JniArgumentValue (Src);
				__args [2] = new JniArgumentValue (Len);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				if (Bcd != null) {
					JNIEnv.CopyArray (native_Bcd, Bcd);
					JNIEnv.DeleteLocalRef (native_Bcd);
				}
				global::System.GC.KeepAlive (Bcd);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='MathsApi']/method[@name='XorCalc_Api' and count(parameter)=2 and parameter[1][@type='byte[]'] and parameter[2][@type='int']]"
		[Register ("XorCalc_Api", "([BI)I", "")]
		public static unsafe int XorCalc_Api (byte[]? Inbuf, int Len)
		{
			const string __id = "XorCalc_Api.([BI)I";
			IntPtr native_Inbuf = JNIEnv.NewArray (Inbuf);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_Inbuf);
				__args [1] = new JniArgumentValue (Len);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (Inbuf != null) {
					JNIEnv.CopyArray (native_Inbuf, Inbuf);
					JNIEnv.DeleteLocalRef (native_Inbuf);
				}
				global::System.GC.KeepAlive (Inbuf);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='MathsApi']/method[@name='XorCalc_Api' and count(parameter)=3 and parameter[1][@type='byte[]'] and parameter[2][@type='int'] and parameter[3][@type='int']]"
		[Register ("XorCalc_Api", "([BII)I", "")]
		public static unsafe int XorCalc_Api (byte[]? Inbuf, int start, int Len)
		{
			const string __id = "XorCalc_Api.([BII)I";
			IntPtr native_Inbuf = JNIEnv.NewArray (Inbuf);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (native_Inbuf);
				__args [1] = new JniArgumentValue (start);
				__args [2] = new JniArgumentValue (Len);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (Inbuf != null) {
					JNIEnv.CopyArray (native_Inbuf, Inbuf);
					JNIEnv.DeleteLocalRef (native_Inbuf);
				}
				global::System.GC.KeepAlive (Inbuf);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='MathsApi']/method[@name='byte2short' and count(parameter)=1 and parameter[1][@type='byte[]']]"
		[Register ("byte2short", "([B)S", "")]
		public static unsafe short Byte2short (byte[]? buf)
		{
			const string __id = "byte2short.([B)S";
			IntPtr native_buf = JNIEnv.NewArray (buf);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_buf);
				var __rm = _members.StaticMethods.InvokeInt16Method (__id, __args);
				return __rm;
			} finally {
				if (buf != null) {
					JNIEnv.CopyArray (native_buf, buf);
					JNIEnv.DeleteLocalRef (native_buf);
				}
				global::System.GC.KeepAlive (buf);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='MathsApi']/method[@name='leapyear' and count(parameter)=1 and parameter[1][@type='int']]"
		[Register ("leapyear", "(I)I", "")]
		public static unsafe int Leapyear (int year)
		{
			const string __id = "leapyear.(I)I";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (year);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='MathsApi']/method[@name='s32ToArry' and count(parameter)=2 and parameter[1][@type='byte[]'] and parameter[2][@type='int']]"
		[Register ("s32ToArry", "([BI)V", "")]
		public static unsafe void S32ToArry (byte[]? arr, int v)
		{
			const string __id = "s32ToArry.([BI)V";
			IntPtr native_arr = JNIEnv.NewArray (arr);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_arr);
				__args [1] = new JniArgumentValue (v);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				if (arr != null) {
					JNIEnv.CopyArray (native_arr, arr);
					JNIEnv.DeleteLocalRef (native_arr);
				}
				global::System.GC.KeepAlive (arr);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='MathsApi']/method[@name='short2byte' and count(parameter)=2 and parameter[1][@type='byte[]'] and parameter[2][@type='int']]"
		[Register ("short2byte", "([BI)V", "")]
		public static unsafe void Short2byte (byte[]? buf, int shortvar)
		{
			const string __id = "short2byte.([BI)V";
			IntPtr native_buf = JNIEnv.NewArray (buf);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_buf);
				__args [1] = new JniArgumentValue (shortvar);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				if (buf != null) {
					JNIEnv.CopyArray (native_buf, buf);
					JNIEnv.DeleteLocalRef (native_buf);
				}
				global::System.GC.KeepAlive (buf);
			}
		}

	}
}
