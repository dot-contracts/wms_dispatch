//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable restore
using System;
using System.Collections.Generic;
using Android.Runtime;
using Java.Interop;

namespace Com.Vanstone.Trans.Ssl {

	// Metadata.xml XPath class reference: path="/api/package[@name='com.vanstone.trans.ssl']/class[@name='SSLconnect']"
	[global::Android.Runtime.Register ("com/vanstone/trans/ssl/SSLconnect", DoNotGenerateAcw=true)]
	public partial class SSLconnect : global::Java.Lang.Object {

		// Metadata.xml XPath field reference: path="/api/package[@name='com.vanstone.trans.ssl']/class[@name='SSLconnect']/field[@name='errCode']"
		[Register ("errCode")]
		public int ErrCode {
			get {
				const string __id = "errCode.I";

				var __v = _members.InstanceFields.GetInt32Value (__id, this);
				return __v;
			}
			set {
				const string __id = "errCode.I";

				try {
					_members.InstanceFields.SetValue (__id, this, value);
				} finally {
				}
			}
		}


		// Metadata.xml XPath field reference: path="/api/package[@name='com.vanstone.trans.ssl']/class[@name='SSLconnect']/field[@name='errMsg']"
		[Register ("errMsg")]
		public string? ErrMsg {
			get {
				const string __id = "errMsg.Ljava/lang/String;";

				var __v = _members.InstanceFields.GetObjectValue (__id, this);
				return JNIEnv.GetString (__v.Handle, JniHandleOwnership.TransferLocalRef);
			}
			set {
				const string __id = "errMsg.Ljava/lang/String;";

				IntPtr native_value = JNIEnv.NewString ((string?)value);
				try {
					_members.InstanceFields.SetValue (__id, this, new JniObjectReference (native_value));
				} finally {
					JNIEnv.DeleteLocalRef (native_value);
				}
			}
		}


		// Metadata.xml XPath field reference: path="/api/package[@name='com.vanstone.trans.ssl']/class[@name='SSLconnect']/field[@name='socket']"
		[Register ("socket")]
		public static global::Java.Net.Socket? Socket {
			get {
				const string __id = "socket.Ljava/net/Socket;";

				var __v = _members.StaticFields.GetObjectValue (__id);
				return global::Java.Lang.Object.GetObject<global::Java.Net.Socket> (__v.Handle, JniHandleOwnership.TransferLocalRef);
			}
			set {
				const string __id = "socket.Ljava/net/Socket;";

				IntPtr native_value = global::Android.Runtime.JNIEnv.ToLocalJniHandle (value);
				try {
					_members.StaticFields.SetValue (__id, new JniObjectReference (native_value));
				} finally {
					global::Android.Runtime.JNIEnv.DeleteLocalRef (native_value);
				}
			}
		}


		// Metadata.xml XPath field reference: path="/api/package[@name='com.vanstone.trans.ssl']/class[@name='SSLconnect']/field[@name='zhujiMsg']"
		[Register ("zhujiMsg")]
		public string? ZhujiMsg {
			get {
				const string __id = "zhujiMsg.Ljava/lang/String;";

				var __v = _members.InstanceFields.GetObjectValue (__id, this);
				return JNIEnv.GetString (__v.Handle, JniHandleOwnership.TransferLocalRef);
			}
			set {
				const string __id = "zhujiMsg.Ljava/lang/String;";

				IntPtr native_value = JNIEnv.NewString ((string?)value);
				try {
					_members.InstanceFields.SetValue (__id, this, new JniObjectReference (native_value));
				} finally {
					JNIEnv.DeleteLocalRef (native_value);
				}
			}
		}

		static readonly JniPeerMembers _members = new XAPeerMembers ("com/vanstone/trans/ssl/SSLconnect", typeof (SSLconnect));

		internal static IntPtr class_ref {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		public override global::Java.Interop.JniPeerMembers JniPeerMembers {
			get { return _members; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override IntPtr ThresholdClass {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override global::System.Type ThresholdType {
			get { return _members.ManagedPeerType; }
		}

		protected SSLconnect (IntPtr javaReference, JniHandleOwnership transfer) : base (javaReference, transfer)
		{
		}

		// Metadata.xml XPath constructor reference: path="/api/package[@name='com.vanstone.trans.ssl']/class[@name='SSLconnect']/constructor[@name='SSLconnect' and count(parameter)=1 and parameter[1][@type='com.vanstone.trans.api.CommApi.CertInfo']]"
		[Register (".ctor", "(Lcom/vanstone/trans/api/CommApi$CertInfo;)V", "")]
		public unsafe SSLconnect (global::Com.Vanstone.Trans.Api.CommApi.CertInfo? certInfo) : base (IntPtr.Zero, JniHandleOwnership.DoNotTransfer)
		{
			const string __id = "(Lcom/vanstone/trans/api/CommApi$CertInfo;)V";

			if (((global::Java.Lang.Object) this).Handle != IntPtr.Zero)
				return;

			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue ((certInfo == null) ? IntPtr.Zero : ((global::Java.Lang.Object) certInfo).Handle);
				var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), __args);
				SetHandle (__r.Handle, JniHandleOwnership.TransferLocalRef);
				_members.InstanceMethods.FinishCreateInstance (__id, this, __args);
			} finally {
				global::System.GC.KeepAlive (certInfo);
			}
		}

		static Delegate? cb_connect_Ljava_lang_String_I;
#pragma warning disable 0169
		static Delegate GetConnect_Ljava_lang_String_IHandler ()
		{
			if (cb_connect_Ljava_lang_String_I == null)
				cb_connect_Ljava_lang_String_I = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPLI_L (n_Connect_Ljava_lang_String_I));
			return cb_connect_Ljava_lang_String_I;
		}

		static IntPtr n_Connect_Ljava_lang_String_I (IntPtr jnienv, IntPtr native__this, IntPtr native_ip, int port)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Vanstone.Trans.Ssl.SSLconnect> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			var ip = JNIEnv.GetString (native_ip, JniHandleOwnership.DoNotTransfer);
			IntPtr __ret = JNIEnv.ToLocalJniHandle (__this.Connect (ip, port));
			return __ret;
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.ssl']/class[@name='SSLconnect']/method[@name='connect' and count(parameter)=2 and parameter[1][@type='java.lang.String'] and parameter[2][@type='int']]"
		[Register ("connect", "(Ljava/lang/String;I)Ljava/net/Socket;", "GetConnect_Ljava_lang_String_IHandler")]
		public virtual unsafe global::Java.Net.Socket? Connect (string? ip, int port)
		{
			const string __id = "connect.(Ljava/lang/String;I)Ljava/net/Socket;";
			IntPtr native_ip = JNIEnv.NewString ((string?)ip);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_ip);
				__args [1] = new JniArgumentValue (port);
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, __args);
				return global::Java.Lang.Object.GetObject<global::Java.Net.Socket> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				JNIEnv.DeleteLocalRef (native_ip);
			}
		}

		static Delegate? cb_createSSLSocket;
#pragma warning disable 0169
		static Delegate GetCreateSSLSocketHandler ()
		{
			if (cb_createSSLSocket == null)
				cb_createSSLSocket = JNINativeWrapper.CreateDelegate (new _JniMarshal_PP_L (n_CreateSSLSocket));
			return cb_createSSLSocket;
		}

		static IntPtr n_CreateSSLSocket (IntPtr jnienv, IntPtr native__this)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Vanstone.Trans.Ssl.SSLconnect> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			return JNIEnv.ToLocalJniHandle (__this.CreateSSLSocket ());
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.ssl']/class[@name='SSLconnect']/method[@name='createSSLSocket' and count(parameter)=0]"
		[Register ("createSSLSocket", "()Ljava/net/Socket;", "GetCreateSSLSocketHandler")]
		protected virtual unsafe global::Java.Net.Socket? CreateSSLSocket ()
		{
			const string __id = "createSSLSocket.()Ljava/net/Socket;";
			try {
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, null);
				return global::Java.Lang.Object.GetObject<global::Java.Net.Socket> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
			}
		}

	}
}
