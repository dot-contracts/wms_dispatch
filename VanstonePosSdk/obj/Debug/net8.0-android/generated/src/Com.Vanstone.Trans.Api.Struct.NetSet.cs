//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable restore
using System;
using System.Collections.Generic;
using Android.Runtime;
using Java.Interop;

namespace Com.Vanstone.Trans.Api.Struct {

	// Metadata.xml XPath class reference: path="/api/package[@name='com.vanstone.trans.api.struct']/class[@name='NetSet']"
	[global::Android.Runtime.Register ("com/vanstone/trans/api/struct/NetSet", DoNotGenerateAcw=true)]
	public partial class NetSet : global::Java.Lang.Object, global::Com.Vanstone.Base.Interfaces.IStructInterface {

		// Metadata.xml XPath field reference: path="/api/package[@name='com.vanstone.trans.api.struct']/class[@name='NetSet']/field[@name='NetClientIp']"
		[Register ("NetClientIp")]
		public IList<byte>? NetClientIp {
			get {
				const string __id = "NetClientIp.[B";

				var __v = _members.InstanceFields.GetObjectValue (__id, this);
				return global::Android.Runtime.JavaArray<byte>.FromJniHandle (__v.Handle, JniHandleOwnership.TransferLocalRef);
			}
			set {
				const string __id = "NetClientIp.[B";

				IntPtr native_value = global::Android.Runtime.JavaArray<byte>.ToLocalJniHandle (value);
				try {
					_members.InstanceFields.SetValue (__id, this, new JniObjectReference (native_value));
				} finally {
					global::Android.Runtime.JNIEnv.DeleteLocalRef (native_value);
				}
			}
		}


		// Metadata.xml XPath field reference: path="/api/package[@name='com.vanstone.trans.api.struct']/class[@name='NetSet']/field[@name='NetGate']"
		[Register ("NetGate")]
		public IList<byte>? NetGate {
			get {
				const string __id = "NetGate.[B";

				var __v = _members.InstanceFields.GetObjectValue (__id, this);
				return global::Android.Runtime.JavaArray<byte>.FromJniHandle (__v.Handle, JniHandleOwnership.TransferLocalRef);
			}
			set {
				const string __id = "NetGate.[B";

				IntPtr native_value = global::Android.Runtime.JavaArray<byte>.ToLocalJniHandle (value);
				try {
					_members.InstanceFields.SetValue (__id, this, new JniObjectReference (native_value));
				} finally {
					global::Android.Runtime.JNIEnv.DeleteLocalRef (native_value);
				}
			}
		}


		// Metadata.xml XPath field reference: path="/api/package[@name='com.vanstone.trans.api.struct']/class[@name='NetSet']/field[@name='NetMask']"
		[Register ("NetMask")]
		public IList<byte>? NetMask {
			get {
				const string __id = "NetMask.[B";

				var __v = _members.InstanceFields.GetObjectValue (__id, this);
				return global::Android.Runtime.JavaArray<byte>.FromJniHandle (__v.Handle, JniHandleOwnership.TransferLocalRef);
			}
			set {
				const string __id = "NetMask.[B";

				IntPtr native_value = global::Android.Runtime.JavaArray<byte>.ToLocalJniHandle (value);
				try {
					_members.InstanceFields.SetValue (__id, this, new JniObjectReference (native_value));
				} finally {
					global::Android.Runtime.JNIEnv.DeleteLocalRef (native_value);
				}
			}
		}


		// Metadata.xml XPath field reference: path="/api/package[@name='com.vanstone.trans.api.struct']/class[@name='NetSet']/field[@name='NetServer2Ip']"
		[Register ("NetServer2Ip")]
		public IList<byte>? NetServer2Ip {
			get {
				const string __id = "NetServer2Ip.[B";

				var __v = _members.InstanceFields.GetObjectValue (__id, this);
				return global::Android.Runtime.JavaArray<byte>.FromJniHandle (__v.Handle, JniHandleOwnership.TransferLocalRef);
			}
			set {
				const string __id = "NetServer2Ip.[B";

				IntPtr native_value = global::Android.Runtime.JavaArray<byte>.ToLocalJniHandle (value);
				try {
					_members.InstanceFields.SetValue (__id, this, new JniObjectReference (native_value));
				} finally {
					global::Android.Runtime.JNIEnv.DeleteLocalRef (native_value);
				}
			}
		}


		// Metadata.xml XPath field reference: path="/api/package[@name='com.vanstone.trans.api.struct']/class[@name='NetSet']/field[@name='NetServer2Port']"
		[Register ("NetServer2Port")]
		public IList<byte>? NetServer2Port {
			get {
				const string __id = "NetServer2Port.[B";

				var __v = _members.InstanceFields.GetObjectValue (__id, this);
				return global::Android.Runtime.JavaArray<byte>.FromJniHandle (__v.Handle, JniHandleOwnership.TransferLocalRef);
			}
			set {
				const string __id = "NetServer2Port.[B";

				IntPtr native_value = global::Android.Runtime.JavaArray<byte>.ToLocalJniHandle (value);
				try {
					_members.InstanceFields.SetValue (__id, this, new JniObjectReference (native_value));
				} finally {
					global::Android.Runtime.JNIEnv.DeleteLocalRef (native_value);
				}
			}
		}


		// Metadata.xml XPath field reference: path="/api/package[@name='com.vanstone.trans.api.struct']/class[@name='NetSet']/field[@name='NetServerIp']"
		[Register ("NetServerIp")]
		public IList<byte>? NetServerIp {
			get {
				const string __id = "NetServerIp.[B";

				var __v = _members.InstanceFields.GetObjectValue (__id, this);
				return global::Android.Runtime.JavaArray<byte>.FromJniHandle (__v.Handle, JniHandleOwnership.TransferLocalRef);
			}
			set {
				const string __id = "NetServerIp.[B";

				IntPtr native_value = global::Android.Runtime.JavaArray<byte>.ToLocalJniHandle (value);
				try {
					_members.InstanceFields.SetValue (__id, this, new JniObjectReference (native_value));
				} finally {
					global::Android.Runtime.JNIEnv.DeleteLocalRef (native_value);
				}
			}
		}


		// Metadata.xml XPath field reference: path="/api/package[@name='com.vanstone.trans.api.struct']/class[@name='NetSet']/field[@name='NetServerPort']"
		[Register ("NetServerPort")]
		public IList<byte>? NetServerPort {
			get {
				const string __id = "NetServerPort.[B";

				var __v = _members.InstanceFields.GetObjectValue (__id, this);
				return global::Android.Runtime.JavaArray<byte>.FromJniHandle (__v.Handle, JniHandleOwnership.TransferLocalRef);
			}
			set {
				const string __id = "NetServerPort.[B";

				IntPtr native_value = global::Android.Runtime.JavaArray<byte>.ToLocalJniHandle (value);
				try {
					_members.InstanceFields.SetValue (__id, this, new JniObjectReference (native_value));
				} finally {
					global::Android.Runtime.JNIEnv.DeleteLocalRef (native_value);
				}
			}
		}

		static readonly JniPeerMembers _members = new XAPeerMembers ("com/vanstone/trans/api/struct/NetSet", typeof (NetSet));

		internal static IntPtr class_ref {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		public override global::Java.Interop.JniPeerMembers JniPeerMembers {
			get { return _members; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override IntPtr ThresholdClass {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override global::System.Type ThresholdType {
			get { return _members.ManagedPeerType; }
		}

		protected NetSet (IntPtr javaReference, JniHandleOwnership transfer) : base (javaReference, transfer)
		{
		}

		// Metadata.xml XPath constructor reference: path="/api/package[@name='com.vanstone.trans.api.struct']/class[@name='NetSet']/constructor[@name='NetSet' and count(parameter)=0]"
		[Register (".ctor", "()V", "")]
		public unsafe NetSet () : base (IntPtr.Zero, JniHandleOwnership.DoNotTransfer)
		{
			const string __id = "()V";

			if (((global::Java.Lang.Object) this).Handle != IntPtr.Zero)
				return;

			try {
				var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), null);
				SetHandle (__r.Handle, JniHandleOwnership.TransferLocalRef);
				_members.InstanceMethods.FinishCreateInstance (__id, this, null);
			} finally {
			}
		}

		static Delegate? cb_getNetClientIp;
#pragma warning disable 0169
		static Delegate GetGetNetClientIpHandler ()
		{
			if (cb_getNetClientIp == null)
				cb_getNetClientIp = JNINativeWrapper.CreateDelegate (new _JniMarshal_PP_L (n_GetNetClientIp));
			return cb_getNetClientIp;
		}

		static IntPtr n_GetNetClientIp (IntPtr jnienv, IntPtr native__this)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Vanstone.Trans.Api.Struct.NetSet> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			return JNIEnv.NewArray (__this.GetNetClientIp ());
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api.struct']/class[@name='NetSet']/method[@name='getNetClientIp' and count(parameter)=0]"
		[Register ("getNetClientIp", "()[B", "GetGetNetClientIpHandler")]
		public virtual unsafe byte[]? GetNetClientIp ()
		{
			const string __id = "getNetClientIp.()[B";
			try {
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, null);
				return (byte[]?) JNIEnv.GetArray (__rm.Handle, JniHandleOwnership.TransferLocalRef, typeof (byte));
			} finally {
			}
		}

		static Delegate? cb_getNetGate;
#pragma warning disable 0169
		static Delegate GetGetNetGateHandler ()
		{
			if (cb_getNetGate == null)
				cb_getNetGate = JNINativeWrapper.CreateDelegate (new _JniMarshal_PP_L (n_GetNetGate));
			return cb_getNetGate;
		}

		static IntPtr n_GetNetGate (IntPtr jnienv, IntPtr native__this)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Vanstone.Trans.Api.Struct.NetSet> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			return JNIEnv.NewArray (__this.GetNetGate ());
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api.struct']/class[@name='NetSet']/method[@name='getNetGate' and count(parameter)=0]"
		[Register ("getNetGate", "()[B", "GetGetNetGateHandler")]
		public virtual unsafe byte[]? GetNetGate ()
		{
			const string __id = "getNetGate.()[B";
			try {
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, null);
				return (byte[]?) JNIEnv.GetArray (__rm.Handle, JniHandleOwnership.TransferLocalRef, typeof (byte));
			} finally {
			}
		}

		static Delegate? cb_getNetMask;
#pragma warning disable 0169
		static Delegate GetGetNetMaskHandler ()
		{
			if (cb_getNetMask == null)
				cb_getNetMask = JNINativeWrapper.CreateDelegate (new _JniMarshal_PP_L (n_GetNetMask));
			return cb_getNetMask;
		}

		static IntPtr n_GetNetMask (IntPtr jnienv, IntPtr native__this)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Vanstone.Trans.Api.Struct.NetSet> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			return JNIEnv.NewArray (__this.GetNetMask ());
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api.struct']/class[@name='NetSet']/method[@name='getNetMask' and count(parameter)=0]"
		[Register ("getNetMask", "()[B", "GetGetNetMaskHandler")]
		public virtual unsafe byte[]? GetNetMask ()
		{
			const string __id = "getNetMask.()[B";
			try {
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, null);
				return (byte[]?) JNIEnv.GetArray (__rm.Handle, JniHandleOwnership.TransferLocalRef, typeof (byte));
			} finally {
			}
		}

		static Delegate? cb_getNetServer2Ip;
#pragma warning disable 0169
		static Delegate GetGetNetServer2IpHandler ()
		{
			if (cb_getNetServer2Ip == null)
				cb_getNetServer2Ip = JNINativeWrapper.CreateDelegate (new _JniMarshal_PP_L (n_GetNetServer2Ip));
			return cb_getNetServer2Ip;
		}

		static IntPtr n_GetNetServer2Ip (IntPtr jnienv, IntPtr native__this)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Vanstone.Trans.Api.Struct.NetSet> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			return JNIEnv.NewArray (__this.GetNetServer2Ip ());
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api.struct']/class[@name='NetSet']/method[@name='getNetServer2Ip' and count(parameter)=0]"
		[Register ("getNetServer2Ip", "()[B", "GetGetNetServer2IpHandler")]
		public virtual unsafe byte[]? GetNetServer2Ip ()
		{
			const string __id = "getNetServer2Ip.()[B";
			try {
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, null);
				return (byte[]?) JNIEnv.GetArray (__rm.Handle, JniHandleOwnership.TransferLocalRef, typeof (byte));
			} finally {
			}
		}

		static Delegate? cb_getNetServer2Port;
#pragma warning disable 0169
		static Delegate GetGetNetServer2PortHandler ()
		{
			if (cb_getNetServer2Port == null)
				cb_getNetServer2Port = JNINativeWrapper.CreateDelegate (new _JniMarshal_PP_L (n_GetNetServer2Port));
			return cb_getNetServer2Port;
		}

		static IntPtr n_GetNetServer2Port (IntPtr jnienv, IntPtr native__this)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Vanstone.Trans.Api.Struct.NetSet> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			return JNIEnv.NewArray (__this.GetNetServer2Port ());
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api.struct']/class[@name='NetSet']/method[@name='getNetServer2Port' and count(parameter)=0]"
		[Register ("getNetServer2Port", "()[B", "GetGetNetServer2PortHandler")]
		public virtual unsafe byte[]? GetNetServer2Port ()
		{
			const string __id = "getNetServer2Port.()[B";
			try {
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, null);
				return (byte[]?) JNIEnv.GetArray (__rm.Handle, JniHandleOwnership.TransferLocalRef, typeof (byte));
			} finally {
			}
		}

		static Delegate? cb_getNetServerIp;
#pragma warning disable 0169
		static Delegate GetGetNetServerIpHandler ()
		{
			if (cb_getNetServerIp == null)
				cb_getNetServerIp = JNINativeWrapper.CreateDelegate (new _JniMarshal_PP_L (n_GetNetServerIp));
			return cb_getNetServerIp;
		}

		static IntPtr n_GetNetServerIp (IntPtr jnienv, IntPtr native__this)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Vanstone.Trans.Api.Struct.NetSet> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			return JNIEnv.NewArray (__this.GetNetServerIp ());
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api.struct']/class[@name='NetSet']/method[@name='getNetServerIp' and count(parameter)=0]"
		[Register ("getNetServerIp", "()[B", "GetGetNetServerIpHandler")]
		public virtual unsafe byte[]? GetNetServerIp ()
		{
			const string __id = "getNetServerIp.()[B";
			try {
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, null);
				return (byte[]?) JNIEnv.GetArray (__rm.Handle, JniHandleOwnership.TransferLocalRef, typeof (byte));
			} finally {
			}
		}

		static Delegate? cb_getNetServerPort;
#pragma warning disable 0169
		static Delegate GetGetNetServerPortHandler ()
		{
			if (cb_getNetServerPort == null)
				cb_getNetServerPort = JNINativeWrapper.CreateDelegate (new _JniMarshal_PP_L (n_GetNetServerPort));
			return cb_getNetServerPort;
		}

		static IntPtr n_GetNetServerPort (IntPtr jnienv, IntPtr native__this)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Vanstone.Trans.Api.Struct.NetSet> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			return JNIEnv.NewArray (__this.GetNetServerPort ());
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api.struct']/class[@name='NetSet']/method[@name='getNetServerPort' and count(parameter)=0]"
		[Register ("getNetServerPort", "()[B", "GetGetNetServerPortHandler")]
		public virtual unsafe byte[]? GetNetServerPort ()
		{
			const string __id = "getNetServerPort.()[B";
			try {
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, null);
				return (byte[]?) JNIEnv.GetArray (__rm.Handle, JniHandleOwnership.TransferLocalRef, typeof (byte));
			} finally {
			}
		}

		static Delegate? cb_setNetClientIp_arrayB;
#pragma warning disable 0169
		static Delegate GetSetNetClientIp_arrayBHandler ()
		{
			if (cb_setNetClientIp_arrayB == null)
				cb_setNetClientIp_arrayB = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPL_V (n_SetNetClientIp_arrayB));
			return cb_setNetClientIp_arrayB;
		}

		static void n_SetNetClientIp_arrayB (IntPtr jnienv, IntPtr native__this, IntPtr native_netClientIp)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Vanstone.Trans.Api.Struct.NetSet> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			var netClientIp = (byte[]?) JNIEnv.GetArray (native_netClientIp, JniHandleOwnership.DoNotTransfer, typeof (byte));
			__this.SetNetClientIp (netClientIp);
			if (netClientIp != null)
				JNIEnv.CopyArray (netClientIp, native_netClientIp);
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api.struct']/class[@name='NetSet']/method[@name='setNetClientIp' and count(parameter)=1 and parameter[1][@type='byte[]']]"
		[Register ("setNetClientIp", "([B)V", "GetSetNetClientIp_arrayBHandler")]
		public virtual unsafe void SetNetClientIp (byte[]? netClientIp)
		{
			const string __id = "setNetClientIp.([B)V";
			IntPtr native_netClientIp = JNIEnv.NewArray (netClientIp);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_netClientIp);
				_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, __args);
			} finally {
				if (netClientIp != null) {
					JNIEnv.CopyArray (native_netClientIp, netClientIp);
					JNIEnv.DeleteLocalRef (native_netClientIp);
				}
				global::System.GC.KeepAlive (netClientIp);
			}
		}

		static Delegate? cb_setNetGate_arrayB;
#pragma warning disable 0169
		static Delegate GetSetNetGate_arrayBHandler ()
		{
			if (cb_setNetGate_arrayB == null)
				cb_setNetGate_arrayB = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPL_V (n_SetNetGate_arrayB));
			return cb_setNetGate_arrayB;
		}

		static void n_SetNetGate_arrayB (IntPtr jnienv, IntPtr native__this, IntPtr native_netGate)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Vanstone.Trans.Api.Struct.NetSet> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			var netGate = (byte[]?) JNIEnv.GetArray (native_netGate, JniHandleOwnership.DoNotTransfer, typeof (byte));
			__this.SetNetGate (netGate);
			if (netGate != null)
				JNIEnv.CopyArray (netGate, native_netGate);
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api.struct']/class[@name='NetSet']/method[@name='setNetGate' and count(parameter)=1 and parameter[1][@type='byte[]']]"
		[Register ("setNetGate", "([B)V", "GetSetNetGate_arrayBHandler")]
		public virtual unsafe void SetNetGate (byte[]? netGate)
		{
			const string __id = "setNetGate.([B)V";
			IntPtr native_netGate = JNIEnv.NewArray (netGate);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_netGate);
				_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, __args);
			} finally {
				if (netGate != null) {
					JNIEnv.CopyArray (native_netGate, netGate);
					JNIEnv.DeleteLocalRef (native_netGate);
				}
				global::System.GC.KeepAlive (netGate);
			}
		}

		static Delegate? cb_setNetMask_arrayB;
#pragma warning disable 0169
		static Delegate GetSetNetMask_arrayBHandler ()
		{
			if (cb_setNetMask_arrayB == null)
				cb_setNetMask_arrayB = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPL_V (n_SetNetMask_arrayB));
			return cb_setNetMask_arrayB;
		}

		static void n_SetNetMask_arrayB (IntPtr jnienv, IntPtr native__this, IntPtr native_netMask)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Vanstone.Trans.Api.Struct.NetSet> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			var netMask = (byte[]?) JNIEnv.GetArray (native_netMask, JniHandleOwnership.DoNotTransfer, typeof (byte));
			__this.SetNetMask (netMask);
			if (netMask != null)
				JNIEnv.CopyArray (netMask, native_netMask);
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api.struct']/class[@name='NetSet']/method[@name='setNetMask' and count(parameter)=1 and parameter[1][@type='byte[]']]"
		[Register ("setNetMask", "([B)V", "GetSetNetMask_arrayBHandler")]
		public virtual unsafe void SetNetMask (byte[]? netMask)
		{
			const string __id = "setNetMask.([B)V";
			IntPtr native_netMask = JNIEnv.NewArray (netMask);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_netMask);
				_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, __args);
			} finally {
				if (netMask != null) {
					JNIEnv.CopyArray (native_netMask, netMask);
					JNIEnv.DeleteLocalRef (native_netMask);
				}
				global::System.GC.KeepAlive (netMask);
			}
		}

		static Delegate? cb_setNetServer2Ip_arrayB;
#pragma warning disable 0169
		static Delegate GetSetNetServer2Ip_arrayBHandler ()
		{
			if (cb_setNetServer2Ip_arrayB == null)
				cb_setNetServer2Ip_arrayB = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPL_V (n_SetNetServer2Ip_arrayB));
			return cb_setNetServer2Ip_arrayB;
		}

		static void n_SetNetServer2Ip_arrayB (IntPtr jnienv, IntPtr native__this, IntPtr native_netServer2Ip)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Vanstone.Trans.Api.Struct.NetSet> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			var netServer2Ip = (byte[]?) JNIEnv.GetArray (native_netServer2Ip, JniHandleOwnership.DoNotTransfer, typeof (byte));
			__this.SetNetServer2Ip (netServer2Ip);
			if (netServer2Ip != null)
				JNIEnv.CopyArray (netServer2Ip, native_netServer2Ip);
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api.struct']/class[@name='NetSet']/method[@name='setNetServer2Ip' and count(parameter)=1 and parameter[1][@type='byte[]']]"
		[Register ("setNetServer2Ip", "([B)V", "GetSetNetServer2Ip_arrayBHandler")]
		public virtual unsafe void SetNetServer2Ip (byte[]? netServer2Ip)
		{
			const string __id = "setNetServer2Ip.([B)V";
			IntPtr native_netServer2Ip = JNIEnv.NewArray (netServer2Ip);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_netServer2Ip);
				_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, __args);
			} finally {
				if (netServer2Ip != null) {
					JNIEnv.CopyArray (native_netServer2Ip, netServer2Ip);
					JNIEnv.DeleteLocalRef (native_netServer2Ip);
				}
				global::System.GC.KeepAlive (netServer2Ip);
			}
		}

		static Delegate? cb_setNetServer2Port_arrayB;
#pragma warning disable 0169
		static Delegate GetSetNetServer2Port_arrayBHandler ()
		{
			if (cb_setNetServer2Port_arrayB == null)
				cb_setNetServer2Port_arrayB = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPL_V (n_SetNetServer2Port_arrayB));
			return cb_setNetServer2Port_arrayB;
		}

		static void n_SetNetServer2Port_arrayB (IntPtr jnienv, IntPtr native__this, IntPtr native_netServer2Port)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Vanstone.Trans.Api.Struct.NetSet> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			var netServer2Port = (byte[]?) JNIEnv.GetArray (native_netServer2Port, JniHandleOwnership.DoNotTransfer, typeof (byte));
			__this.SetNetServer2Port (netServer2Port);
			if (netServer2Port != null)
				JNIEnv.CopyArray (netServer2Port, native_netServer2Port);
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api.struct']/class[@name='NetSet']/method[@name='setNetServer2Port' and count(parameter)=1 and parameter[1][@type='byte[]']]"
		[Register ("setNetServer2Port", "([B)V", "GetSetNetServer2Port_arrayBHandler")]
		public virtual unsafe void SetNetServer2Port (byte[]? netServer2Port)
		{
			const string __id = "setNetServer2Port.([B)V";
			IntPtr native_netServer2Port = JNIEnv.NewArray (netServer2Port);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_netServer2Port);
				_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, __args);
			} finally {
				if (netServer2Port != null) {
					JNIEnv.CopyArray (native_netServer2Port, netServer2Port);
					JNIEnv.DeleteLocalRef (native_netServer2Port);
				}
				global::System.GC.KeepAlive (netServer2Port);
			}
		}

		static Delegate? cb_setNetServerIp_arrayB;
#pragma warning disable 0169
		static Delegate GetSetNetServerIp_arrayBHandler ()
		{
			if (cb_setNetServerIp_arrayB == null)
				cb_setNetServerIp_arrayB = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPL_V (n_SetNetServerIp_arrayB));
			return cb_setNetServerIp_arrayB;
		}

		static void n_SetNetServerIp_arrayB (IntPtr jnienv, IntPtr native__this, IntPtr native_netServerIp)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Vanstone.Trans.Api.Struct.NetSet> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			var netServerIp = (byte[]?) JNIEnv.GetArray (native_netServerIp, JniHandleOwnership.DoNotTransfer, typeof (byte));
			__this.SetNetServerIp (netServerIp);
			if (netServerIp != null)
				JNIEnv.CopyArray (netServerIp, native_netServerIp);
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api.struct']/class[@name='NetSet']/method[@name='setNetServerIp' and count(parameter)=1 and parameter[1][@type='byte[]']]"
		[Register ("setNetServerIp", "([B)V", "GetSetNetServerIp_arrayBHandler")]
		public virtual unsafe void SetNetServerIp (byte[]? netServerIp)
		{
			const string __id = "setNetServerIp.([B)V";
			IntPtr native_netServerIp = JNIEnv.NewArray (netServerIp);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_netServerIp);
				_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, __args);
			} finally {
				if (netServerIp != null) {
					JNIEnv.CopyArray (native_netServerIp, netServerIp);
					JNIEnv.DeleteLocalRef (native_netServerIp);
				}
				global::System.GC.KeepAlive (netServerIp);
			}
		}

		static Delegate? cb_setNetServerPort_arrayB;
#pragma warning disable 0169
		static Delegate GetSetNetServerPort_arrayBHandler ()
		{
			if (cb_setNetServerPort_arrayB == null)
				cb_setNetServerPort_arrayB = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPL_V (n_SetNetServerPort_arrayB));
			return cb_setNetServerPort_arrayB;
		}

		static void n_SetNetServerPort_arrayB (IntPtr jnienv, IntPtr native__this, IntPtr native_netServerPort)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Vanstone.Trans.Api.Struct.NetSet> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			var netServerPort = (byte[]?) JNIEnv.GetArray (native_netServerPort, JniHandleOwnership.DoNotTransfer, typeof (byte));
			__this.SetNetServerPort (netServerPort);
			if (netServerPort != null)
				JNIEnv.CopyArray (netServerPort, native_netServerPort);
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api.struct']/class[@name='NetSet']/method[@name='setNetServerPort' and count(parameter)=1 and parameter[1][@type='byte[]']]"
		[Register ("setNetServerPort", "([B)V", "GetSetNetServerPort_arrayBHandler")]
		public virtual unsafe void SetNetServerPort (byte[]? netServerPort)
		{
			const string __id = "setNetServerPort.([B)V";
			IntPtr native_netServerPort = JNIEnv.NewArray (netServerPort);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_netServerPort);
				_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, __args);
			} finally {
				if (netServerPort != null) {
					JNIEnv.CopyArray (native_netServerPort, netServerPort);
					JNIEnv.DeleteLocalRef (native_netServerPort);
				}
				global::System.GC.KeepAlive (netServerPort);
			}
		}

		static Delegate? cb_size;
#pragma warning disable 0169
		static Delegate GetSizeHandler ()
		{
			if (cb_size == null)
				cb_size = JNINativeWrapper.CreateDelegate (new _JniMarshal_PP_I (n_Size));
			return cb_size;
		}

		static int n_Size (IntPtr jnienv, IntPtr native__this)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Vanstone.Trans.Api.Struct.NetSet> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			return __this.Size ();
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api.struct']/class[@name='NetSet']/method[@name='size' and count(parameter)=0]"
		[Register ("size", "()I", "GetSizeHandler")]
		public virtual unsafe int Size ()
		{
			const string __id = "size.()I";
			try {
				var __rm = _members.InstanceMethods.InvokeVirtualInt32Method (__id, this, null);
				return __rm;
			} finally {
			}
		}

		static Delegate? cb_toBean_arrayB;
#pragma warning disable 0169
		static Delegate GetToBean_arrayBHandler ()
		{
			if (cb_toBean_arrayB == null)
				cb_toBean_arrayB = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPL_V (n_ToBean_arrayB));
			return cb_toBean_arrayB;
		}

		static void n_ToBean_arrayB (IntPtr jnienv, IntPtr native__this, IntPtr native_buf)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Vanstone.Trans.Api.Struct.NetSet> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			var buf = (byte[]?) JNIEnv.GetArray (native_buf, JniHandleOwnership.DoNotTransfer, typeof (byte));
			__this.ToBean (buf);
			if (buf != null)
				JNIEnv.CopyArray (buf, native_buf);
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api.struct']/class[@name='NetSet']/method[@name='toBean' and count(parameter)=1 and parameter[1][@type='byte[]']]"
		[Register ("toBean", "([B)V", "GetToBean_arrayBHandler")]
		public virtual unsafe void ToBean (byte[]? buf)
		{
			const string __id = "toBean.([B)V";
			IntPtr native_buf = JNIEnv.NewArray (buf);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_buf);
				_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, __args);
			} finally {
				if (buf != null) {
					JNIEnv.CopyArray (native_buf, buf);
					JNIEnv.DeleteLocalRef (native_buf);
				}
				global::System.GC.KeepAlive (buf);
			}
		}

		static Delegate? cb_toBytes;
#pragma warning disable 0169
		static Delegate GetToBytesHandler ()
		{
			if (cb_toBytes == null)
				cb_toBytes = JNINativeWrapper.CreateDelegate (new _JniMarshal_PP_L (n_ToBytes));
			return cb_toBytes;
		}

		static IntPtr n_ToBytes (IntPtr jnienv, IntPtr native__this)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Vanstone.Trans.Api.Struct.NetSet> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			return JNIEnv.NewArray (__this.ToBytes ());
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api.struct']/class[@name='NetSet']/method[@name='toBytes' and count(parameter)=0]"
		[Register ("toBytes", "()[B", "GetToBytesHandler")]
		public virtual unsafe byte[]? ToBytes ()
		{
			const string __id = "toBytes.()[B";
			try {
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, null);
				return (byte[]?) JNIEnv.GetArray (__rm.Handle, JniHandleOwnership.TransferLocalRef, typeof (byte));
			} finally {
			}
		}

	}
}
