//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable restore
using System;
using System.Collections.Generic;
using Android.Runtime;
using Java.Interop;

namespace Com.Vanstone.Trans.Api {

	// Metadata.xml XPath class reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='JBigEnc']"
	[global::Android.Runtime.Register ("com/vanstone/trans/api/JBigEnc", DoNotGenerateAcw=true)]
	public partial class JBigEnc : global::Java.Lang.Object {
		static readonly JniPeerMembers _members = new XAPeerMembers ("com/vanstone/trans/api/JBigEnc", typeof (JBigEnc));

		internal static IntPtr class_ref {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		public override global::Java.Interop.JniPeerMembers JniPeerMembers {
			get { return _members; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override IntPtr ThresholdClass {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override global::System.Type ThresholdType {
			get { return _members.ManagedPeerType; }
		}

		protected JBigEnc (IntPtr javaReference, JniHandleOwnership transfer) : base (javaReference, transfer)
		{
		}

		// Metadata.xml XPath constructor reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='JBigEnc']/constructor[@name='JBigEnc' and count(parameter)=0]"
		[Register (".ctor", "()V", "")]
		public unsafe JBigEnc () : base (IntPtr.Zero, JniHandleOwnership.DoNotTransfer)
		{
			const string __id = "()V";

			if (((global::Java.Lang.Object) this).Handle != IntPtr.Zero)
				return;

			try {
				var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), null);
				SetHandle (__r.Handle, JniHandleOwnership.TransferLocalRef);
				_members.InstanceMethods.FinishCreateInstance (__id, this, null);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='JBigEnc']/method[@name='JBIGEncode_Api' and count(parameter)=4 and parameter[1][@type='byte[]'] and parameter[2][@type='int'] and parameter[3][@type='byte[]'] and parameter[4][@type='byte[]']]"
		[Register ("JBIGEncode_Api", "([BI[B[B)I", "")]
		public static unsafe int JBIGEncode_Api (byte[]? srcData, int srcType, byte[]? ppOutData, byte[]? outDataLen)
		{
			const string __id = "JBIGEncode_Api.([BI[B[B)I";
			IntPtr native_srcData = JNIEnv.NewArray (srcData);
			IntPtr native_ppOutData = JNIEnv.NewArray (ppOutData);
			IntPtr native_outDataLen = JNIEnv.NewArray (outDataLen);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [4];
				__args [0] = new JniArgumentValue (native_srcData);
				__args [1] = new JniArgumentValue (srcType);
				__args [2] = new JniArgumentValue (native_ppOutData);
				__args [3] = new JniArgumentValue (native_outDataLen);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (srcData != null) {
					JNIEnv.CopyArray (native_srcData, srcData);
					JNIEnv.DeleteLocalRef (native_srcData);
				}
				if (ppOutData != null) {
					JNIEnv.CopyArray (native_ppOutData, ppOutData);
					JNIEnv.DeleteLocalRef (native_ppOutData);
				}
				if (outDataLen != null) {
					JNIEnv.CopyArray (native_outDataLen, outDataLen);
					JNIEnv.DeleteLocalRef (native_outDataLen);
				}
				global::System.GC.KeepAlive (srcData);
				global::System.GC.KeepAlive (ppOutData);
				global::System.GC.KeepAlive (outDataLen);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='JBigEnc']/method[@name='JBIGMemDecode_Api' and count(parameter)=6 and parameter[1][@type='byte[]'] and parameter[2][@type='int'] and parameter[3][@type='byte[]'] and parameter[4][@type='byte[]'] and parameter[5][@type='byte[]'] and parameter[6][@type='byte[]']]"
		[Register ("JBIGMemDecode_Api", "([BI[B[B[B[B)I", "")]
		public static unsafe int JBIGMemDecode_Api (byte[]? srcData, int srcDataLen, byte[]? pOutData, byte[]? outDataLen, byte[]? pBMWid, byte[]? pBMHeight)
		{
			const string __id = "JBIGMemDecode_Api.([BI[B[B[B[B)I";
			IntPtr native_srcData = JNIEnv.NewArray (srcData);
			IntPtr native_pOutData = JNIEnv.NewArray (pOutData);
			IntPtr native_outDataLen = JNIEnv.NewArray (outDataLen);
			IntPtr native_pBMWid = JNIEnv.NewArray (pBMWid);
			IntPtr native_pBMHeight = JNIEnv.NewArray (pBMHeight);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [6];
				__args [0] = new JniArgumentValue (native_srcData);
				__args [1] = new JniArgumentValue (srcDataLen);
				__args [2] = new JniArgumentValue (native_pOutData);
				__args [3] = new JniArgumentValue (native_outDataLen);
				__args [4] = new JniArgumentValue (native_pBMWid);
				__args [5] = new JniArgumentValue (native_pBMHeight);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (srcData != null) {
					JNIEnv.CopyArray (native_srcData, srcData);
					JNIEnv.DeleteLocalRef (native_srcData);
				}
				if (pOutData != null) {
					JNIEnv.CopyArray (native_pOutData, pOutData);
					JNIEnv.DeleteLocalRef (native_pOutData);
				}
				if (outDataLen != null) {
					JNIEnv.CopyArray (native_outDataLen, outDataLen);
					JNIEnv.DeleteLocalRef (native_outDataLen);
				}
				if (pBMWid != null) {
					JNIEnv.CopyArray (native_pBMWid, pBMWid);
					JNIEnv.DeleteLocalRef (native_pBMWid);
				}
				if (pBMHeight != null) {
					JNIEnv.CopyArray (native_pBMHeight, pBMHeight);
					JNIEnv.DeleteLocalRef (native_pBMHeight);
				}
				global::System.GC.KeepAlive (srcData);
				global::System.GC.KeepAlive (pOutData);
				global::System.GC.KeepAlive (outDataLen);
				global::System.GC.KeepAlive (pBMWid);
				global::System.GC.KeepAlive (pBMHeight);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='JBigEnc']/method[@name='ToMakeBimap_Api' and count(parameter)=2 and parameter[1][@type='byte[]'] and parameter[2][@type='byte[]']]"
		[Register ("ToMakeBimap_Api", "([B[B)I", "")]
		public static unsafe int ToMakeBimap_Api (byte[]? outData, byte[]? inData)
		{
			const string __id = "ToMakeBimap_Api.([B[B)I";
			IntPtr native_outData = JNIEnv.NewArray (outData);
			IntPtr native_inData = JNIEnv.NewArray (inData);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_outData);
				__args [1] = new JniArgumentValue (native_inData);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (outData != null) {
					JNIEnv.CopyArray (native_outData, outData);
					JNIEnv.DeleteLocalRef (native_outData);
				}
				if (inData != null) {
					JNIEnv.CopyArray (native_inData, inData);
					JNIEnv.DeleteLocalRef (native_inData);
				}
				global::System.GC.KeepAlive (outData);
				global::System.GC.KeepAlive (inData);
			}
		}

	}
}
