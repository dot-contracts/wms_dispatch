//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable restore
using System;
using System.Collections.Generic;
using Android.Runtime;
using Java.Interop;

namespace Com.Vanstone.Trans.Api {

	// Metadata.xml XPath class reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PedApi']"
	[global::Android.Runtime.Register ("com/vanstone/trans/api/PedApi", DoNotGenerateAcw=true)]
	public partial class PedApi : global::Java.Lang.Object {

		// Metadata.xml XPath field reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PedApi']/field[@name='DispStr']"
		[Register ("DispStr")]
		public static string? DispStr {
			get {
				const string __id = "DispStr.Ljava/lang/String;";

				var __v = _members.StaticFields.GetObjectValue (__id);
				return JNIEnv.GetString (__v.Handle, JniHandleOwnership.TransferLocalRef);
			}
			set {
				const string __id = "DispStr.Ljava/lang/String;";

				IntPtr native_value = JNIEnv.NewString ((string?)value);
				try {
					_members.StaticFields.SetValue (__id, new JniObjectReference (native_value));
				} finally {
					JNIEnv.DeleteLocalRef (native_value);
				}
			}
		}


		// Metadata.xml XPath field reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PedApi']/field[@name='KAPVALUE']"
		[Register ("KAPVALUE")]
		public static int Kapvalue {
			get {
				const string __id = "KAPVALUE.I";

				var __v = _members.StaticFields.GetInt32Value (__id);
				return __v;
			}
			set {
				const string __id = "KAPVALUE.I";

				try {
					_members.StaticFields.SetValue (__id, value);
				} finally {
				}
			}
		}


		// Metadata.xml XPath field reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PedApi']/field[@name='KEYTYPE_DUKPT']"
		[Register ("KEYTYPE_DUKPT")]
		public static int KeytypeDukpt {
			get {
				const string __id = "KEYTYPE_DUKPT.I";

				var __v = _members.StaticFields.GetInt32Value (__id);
				return __v;
			}
			set {
				const string __id = "KEYTYPE_DUKPT.I";

				try {
					_members.StaticFields.SetValue (__id, value);
				} finally {
				}
			}
		}


		// Metadata.xml XPath field reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PedApi']/field[@name='KEYTYPE_MASTERKEY']"
		[Register ("KEYTYPE_MASTERKEY")]
		public static int KeytypeMasterkey {
			get {
				const string __id = "KEYTYPE_MASTERKEY.I";

				var __v = _members.StaticFields.GetInt32Value (__id);
				return __v;
			}
			set {
				const string __id = "KEYTYPE_MASTERKEY.I";

				try {
					_members.StaticFields.SetValue (__id, value);
				} finally {
				}
			}
		}


		// Metadata.xml XPath field reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PedApi']/field[@name='KEYTYPE_MASTERKEY_CIPHER']"
		[Register ("KEYTYPE_MASTERKEY_CIPHER")]
		public static int KeytypeMasterkeyCipher {
			get {
				const string __id = "KEYTYPE_MASTERKEY_CIPHER.I";

				var __v = _members.StaticFields.GetInt32Value (__id);
				return __v;
			}
			set {
				const string __id = "KEYTYPE_MASTERKEY_CIPHER.I";

				try {
					_members.StaticFields.SetValue (__id, value);
				} finally {
				}
			}
		}


		// Metadata.xml XPath field reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PedApi']/field[@name='KEYTYPE_TRANSMISSIONKEY']"
		[Register ("KEYTYPE_TRANSMISSIONKEY")]
		public static int KeytypeTransmissionkey {
			get {
				const string __id = "KEYTYPE_TRANSMISSIONKEY.I";

				var __v = _members.StaticFields.GetInt32Value (__id);
				return __v;
			}
			set {
				const string __id = "KEYTYPE_TRANSMISSIONKEY.I";

				try {
					_members.StaticFields.SetValue (__id, value);
				} finally {
				}
			}
		}


		// Metadata.xml XPath field reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PedApi']/field[@name='Pan']"
		[Register ("Pan")]
		public static IList<byte>? Pan {
			get {
				const string __id = "Pan.[B";

				var __v = _members.StaticFields.GetObjectValue (__id);
				return global::Android.Runtime.JavaArray<byte>.FromJniHandle (__v.Handle, JniHandleOwnership.TransferLocalRef);
			}
			set {
				const string __id = "Pan.[B";

				IntPtr native_value = global::Android.Runtime.JavaArray<byte>.ToLocalJniHandle (value);
				try {
					_members.StaticFields.SetValue (__id, new JniObjectReference (native_value));
				} finally {
					global::Android.Runtime.JNIEnv.DeleteLocalRef (native_value);
				}
			}
		}

		// Metadata.xml XPath field reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PedApi']/field[@name='PEDKEYTYPE_MASTKEY']"
		[Register ("PEDKEYTYPE_MASTKEY")]
		public const int PedkeytypeMastkey = (int) 1;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PedApi']/field[@name='PEDKEYTYPE_WORKKET']"
		[Register ("PEDKEYTYPE_WORKKET")]
		public const int PedkeytypeWorkket = (int) 2;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PedApi']/field[@name='PEDPLACE_PRIVATE']"
		[Register ("PEDPLACE_PRIVATE")]
		public const string PedplacePrivate = (string) "PRIVATE";

		// Metadata.xml XPath field reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PedApi']/field[@name='PEDPLACE_PUBLIC']"
		[Register ("PEDPLACE_PUBLIC")]
		public const string PedplacePublic = (string) "PUBLIC";

		// Metadata.xml XPath field reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PedApi']/field[@name='PED_TAK']"
		[Register ("PED_TAK")]
		public const int PedTak = (int) 4;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PedApi']/field[@name='PED_TDK']"
		[Register ("PED_TDK")]
		public const int PedTdk = (int) 5;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PedApi']/field[@name='PED_TEK']"
		[Register ("PED_TEK")]
		public const int PedTek = (int) 6;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PedApi']/field[@name='PED_TLK']"
		[Register ("PED_TLK")]
		public const int PedTlk = (int) 1;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PedApi']/field[@name='PED_TMK']"
		[Register ("PED_TMK")]
		public const int PedTmk = (int) 2;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PedApi']/field[@name='PED_TPK']"
		[Register ("PED_TPK")]
		public const int PedTpk = (int) 3;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PedApi']/field[@name='PED_TTK']"
		[Register ("PED_TTK")]
		public const int PedTtk = (int) 9;

		// Metadata.xml XPath interface reference: path="/api/package[@name='com.vanstone.trans.api']/interface[@name='PedApi.OnPedKeyListener']"
		[Register ("com/vanstone/trans/api/PedApi$OnPedKeyListener", "", "Com.Vanstone.Trans.Api.PedApi/IOnPedKeyListenerInvoker")]
		public partial interface IOnPedKeyListener : IJavaObject, IJavaPeerable {
			// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/interface[@name='PedApi.OnPedKeyListener']/method[@name='onCancel' and count(parameter)=0]"
			[Register ("onCancel", "()V", "GetOnCancelHandler:Com.Vanstone.Trans.Api.PedApi/IOnPedKeyListenerInvoker, VanstonePosSdk")]
			void OnCancel ();

			// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/interface[@name='PedApi.OnPedKeyListener']/method[@name='onError' and count(parameter)=1 and parameter[1][@type='int']]"
			[Register ("onError", "(I)V", "GetOnError_IHandler:Com.Vanstone.Trans.Api.PedApi/IOnPedKeyListenerInvoker, VanstonePosSdk")]
			void OnError (int p0);

			// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/interface[@name='PedApi.OnPedKeyListener']/method[@name='onKeyClick' and count(parameter)=1 and parameter[1][@type='int']]"
			[Register ("onKeyClick", "(I)V", "GetOnKeyClick_IHandler:Com.Vanstone.Trans.Api.PedApi/IOnPedKeyListenerInvoker, VanstonePosSdk")]
			void OnKeyClick (int p0);

			// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/interface[@name='PedApi.OnPedKeyListener']/method[@name='onSuccess' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
			[Register ("onSuccess", "(Ljava/lang/String;)V", "GetOnSuccess_Ljava_lang_String_Handler:Com.Vanstone.Trans.Api.PedApi/IOnPedKeyListenerInvoker, VanstonePosSdk")]
			void OnSuccess (string? p0);

		}

		[global::Android.Runtime.Register ("com/vanstone/trans/api/PedApi$OnPedKeyListener", DoNotGenerateAcw=true)]
		internal partial class IOnPedKeyListenerInvoker : global::Java.Lang.Object, IOnPedKeyListener {
			static readonly JniPeerMembers _members = new XAPeerMembers ("com/vanstone/trans/api/PedApi$OnPedKeyListener", typeof (IOnPedKeyListenerInvoker));

			static IntPtr java_class_ref {
				get { return _members.JniPeerType.PeerReference.Handle; }
			}

			[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
			[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
			public override global::Java.Interop.JniPeerMembers JniPeerMembers {
				get { return _members; }
			}

			[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
			[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
			protected override IntPtr ThresholdClass {
				get { return class_ref; }
			}

			[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
			[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
			protected override global::System.Type ThresholdType {
				get { return _members.ManagedPeerType; }
			}

			IntPtr class_ref;

			public static IOnPedKeyListener? GetObject (IntPtr handle, JniHandleOwnership transfer)
			{
				return global::Java.Lang.Object.GetObject<IOnPedKeyListener> (handle, transfer);
			}

			static IntPtr Validate (IntPtr handle)
			{
				if (!JNIEnv.IsInstanceOf (handle, java_class_ref))
					throw new InvalidCastException ($"Unable to convert instance of type '{JNIEnv.GetClassNameFromInstance (handle)}' to type 'com.vanstone.trans.api.PedApi.OnPedKeyListener'.");
				return handle;
			}

			protected override void Dispose (bool disposing)
			{
				if (this.class_ref != IntPtr.Zero)
					JNIEnv.DeleteGlobalRef (this.class_ref);
				this.class_ref = IntPtr.Zero;
				base.Dispose (disposing);
			}

			public IOnPedKeyListenerInvoker (IntPtr handle, JniHandleOwnership transfer) : base (Validate (handle), transfer)
			{
				IntPtr local_ref = JNIEnv.GetObjectClass (((global::Java.Lang.Object) this).Handle);
				this.class_ref = JNIEnv.NewGlobalRef (local_ref);
				JNIEnv.DeleteLocalRef (local_ref);
			}

			static Delegate? cb_onCancel;
#pragma warning disable 0169
			static Delegate GetOnCancelHandler ()
			{
				if (cb_onCancel == null)
					cb_onCancel = JNINativeWrapper.CreateDelegate (new _JniMarshal_PP_V (n_OnCancel));
				return cb_onCancel;
			}

			static void n_OnCancel (IntPtr jnienv, IntPtr native__this)
			{
				var __this = global::Java.Lang.Object.GetObject<global::Com.Vanstone.Trans.Api.PedApi.IOnPedKeyListener> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
				__this.OnCancel ();
			}
#pragma warning restore 0169

			IntPtr id_onCancel;
			public unsafe void OnCancel ()
			{
				if (id_onCancel == IntPtr.Zero)
					id_onCancel = JNIEnv.GetMethodID (class_ref, "onCancel", "()V");
				JNIEnv.CallVoidMethod (((global::Java.Lang.Object) this).Handle, id_onCancel);
			}

			static Delegate? cb_onError_I;
#pragma warning disable 0169
			static Delegate GetOnError_IHandler ()
			{
				if (cb_onError_I == null)
					cb_onError_I = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPI_V (n_OnError_I));
				return cb_onError_I;
			}

			static void n_OnError_I (IntPtr jnienv, IntPtr native__this, int p0)
			{
				var __this = global::Java.Lang.Object.GetObject<global::Com.Vanstone.Trans.Api.PedApi.IOnPedKeyListener> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
				__this.OnError (p0);
			}
#pragma warning restore 0169

			IntPtr id_onError_I;
			public unsafe void OnError (int p0)
			{
				if (id_onError_I == IntPtr.Zero)
					id_onError_I = JNIEnv.GetMethodID (class_ref, "onError", "(I)V");
				JValue* __args = stackalloc JValue [1];
				__args [0] = new JValue (p0);
				JNIEnv.CallVoidMethod (((global::Java.Lang.Object) this).Handle, id_onError_I, __args);
			}

			static Delegate? cb_onKeyClick_I;
#pragma warning disable 0169
			static Delegate GetOnKeyClick_IHandler ()
			{
				if (cb_onKeyClick_I == null)
					cb_onKeyClick_I = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPI_V (n_OnKeyClick_I));
				return cb_onKeyClick_I;
			}

			static void n_OnKeyClick_I (IntPtr jnienv, IntPtr native__this, int p0)
			{
				var __this = global::Java.Lang.Object.GetObject<global::Com.Vanstone.Trans.Api.PedApi.IOnPedKeyListener> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
				__this.OnKeyClick (p0);
			}
#pragma warning restore 0169

			IntPtr id_onKeyClick_I;
			public unsafe void OnKeyClick (int p0)
			{
				if (id_onKeyClick_I == IntPtr.Zero)
					id_onKeyClick_I = JNIEnv.GetMethodID (class_ref, "onKeyClick", "(I)V");
				JValue* __args = stackalloc JValue [1];
				__args [0] = new JValue (p0);
				JNIEnv.CallVoidMethod (((global::Java.Lang.Object) this).Handle, id_onKeyClick_I, __args);
			}

			static Delegate? cb_onSuccess_Ljava_lang_String_;
#pragma warning disable 0169
			static Delegate GetOnSuccess_Ljava_lang_String_Handler ()
			{
				if (cb_onSuccess_Ljava_lang_String_ == null)
					cb_onSuccess_Ljava_lang_String_ = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPL_V (n_OnSuccess_Ljava_lang_String_));
				return cb_onSuccess_Ljava_lang_String_;
			}

			static void n_OnSuccess_Ljava_lang_String_ (IntPtr jnienv, IntPtr native__this, IntPtr native_p0)
			{
				var __this = global::Java.Lang.Object.GetObject<global::Com.Vanstone.Trans.Api.PedApi.IOnPedKeyListener> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
				var p0 = JNIEnv.GetString (native_p0, JniHandleOwnership.DoNotTransfer);
				__this.OnSuccess (p0);
			}
#pragma warning restore 0169

			IntPtr id_onSuccess_Ljava_lang_String_;
			public unsafe void OnSuccess (string? p0)
			{
				if (id_onSuccess_Ljava_lang_String_ == IntPtr.Zero)
					id_onSuccess_Ljava_lang_String_ = JNIEnv.GetMethodID (class_ref, "onSuccess", "(Ljava/lang/String;)V");
				IntPtr native_p0 = JNIEnv.NewString ((string?)p0);
				JValue* __args = stackalloc JValue [1];
				__args [0] = new JValue (native_p0);
				JNIEnv.CallVoidMethod (((global::Java.Lang.Object) this).Handle, id_onSuccess_Ljava_lang_String_, __args);
				JNIEnv.DeleteLocalRef (native_p0);
			}

		}

		// event args for com.vanstone.trans.api.PedApi.OnPedKeyListener.onError
		public partial class ErrorEventArgs : global::System.EventArgs {
			public ErrorEventArgs (int p0)
			{
				this.p0 = p0;
			}

			int p0;

			public int P0 {
				get { return p0; }
			}

		}

		// event args for com.vanstone.trans.api.PedApi.OnPedKeyListener.onKeyClick
		public partial class KeyClickEventArgs : global::System.EventArgs {
			public KeyClickEventArgs (int p0)
			{
				this.p0 = p0;
			}

			int p0;

			public int P0 {
				get { return p0; }
			}

		}

		// event args for com.vanstone.trans.api.PedApi.OnPedKeyListener.onSuccess
		public partial class SuccessEventArgs : global::System.EventArgs {
			public SuccessEventArgs (string? p0)
			{
				this.p0 = p0;
			}

			string? p0;

			public string? P0 {
				get { return p0; }
			}

		}

		[global::Android.Runtime.Register ("mono/com/vanstone/trans/api/PedApi_OnPedKeyListenerImplementor")]
		internal sealed partial class IOnPedKeyListenerImplementor : global::Java.Lang.Object, IOnPedKeyListener {

			object? sender;

			public unsafe IOnPedKeyListenerImplementor (object sender) : base (IntPtr.Zero, JniHandleOwnership.DoNotTransfer)
			{
				const string __id = "()V";
				if (((global::Java.Lang.Object) this).Handle != IntPtr.Zero)
					return;
				var h = JniPeerMembers.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), null);
				SetHandle (h.Handle, JniHandleOwnership.TransferLocalRef);
				JniPeerMembers.InstanceMethods.FinishCreateInstance (__id, this, null);
				this.sender = sender;
			}

			#pragma warning disable 0649
			public EventHandler? OnCancelHandler;
			#pragma warning restore 0649

			public void OnCancel ()
			{
				var __h = OnCancelHandler;
				if (__h != null)
					__h (sender, new EventArgs ());
			}

			#pragma warning disable 0649
			public EventHandler<ErrorEventArgs>? OnErrorHandler;
			#pragma warning restore 0649

			public void OnError (int p0)
			{
				var __h = OnErrorHandler;
				if (__h != null)
					__h (sender, new ErrorEventArgs (p0));
			}

			#pragma warning disable 0649
			public EventHandler<KeyClickEventArgs>? OnKeyClickHandler;
			#pragma warning restore 0649

			public void OnKeyClick (int p0)
			{
				var __h = OnKeyClickHandler;
				if (__h != null)
					__h (sender, new KeyClickEventArgs (p0));
			}

			#pragma warning disable 0649
			public EventHandler<SuccessEventArgs>? OnSuccessHandler;
			#pragma warning restore 0649

			public void OnSuccess (string? p0)
			{
				var __h = OnSuccessHandler;
				if (__h != null)
					__h (sender, new SuccessEventArgs (p0));
			}

			internal static bool __IsEmpty (IOnPedKeyListenerImplementor value)
			{
				return value.OnCancelHandler == null && value.OnErrorHandler == null && value.OnKeyClickHandler == null && value.OnSuccessHandler == null;
			}

		}

		static readonly JniPeerMembers _members = new XAPeerMembers ("com/vanstone/trans/api/PedApi", typeof (PedApi));

		internal static IntPtr class_ref {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		public override global::Java.Interop.JniPeerMembers JniPeerMembers {
			get { return _members; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override IntPtr ThresholdClass {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override global::System.Type ThresholdType {
			get { return _members.ManagedPeerType; }
		}

		protected PedApi (IntPtr javaReference, JniHandleOwnership transfer) : base (javaReference, transfer)
		{
		}

		// Metadata.xml XPath constructor reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PedApi']/constructor[@name='PedApi' and count(parameter)=0]"
		[Register (".ctor", "()V", "")]
		public unsafe PedApi () : base (IntPtr.Zero, JniHandleOwnership.DoNotTransfer)
		{
			const string __id = "()V";

			if (((global::Java.Lang.Object) this).Handle != IntPtr.Zero)
				return;

			try {
				var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), null);
				SetHandle (__r.Handle, JniHandleOwnership.TransferLocalRef);
				_members.InstanceMethods.FinishCreateInstance (__id, this, null);
			} finally {
			}
		}

		public static unsafe int MKeyMaxIndex {
			// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PedApi']/method[@name='GetMKeyMaxIndex' and count(parameter)=0]"
			[Register ("GetMKeyMaxIndex", "()I", "")]
			get {
				const string __id = "GetMKeyMaxIndex.()I";
				try {
					var __rm = _members.StaticMethods.InvokeInt32Method (__id, null);
					return __rm;
				} finally {
				}
			}
		}

		public static unsafe int WKeyMaxIndex {
			// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PedApi']/method[@name='GetWKeyMaxIndex' and count(parameter)=0]"
			[Register ("GetWKeyMaxIndex", "()I", "")]
			get {
				const string __id = "GetWKeyMaxIndex.()I";
				try {
					var __rm = _members.StaticMethods.InvokeInt32Method (__id, null);
					return __rm;
				} finally {
				}
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PedApi']/method[@name='EDPPSetDesSmHdSoft_Api' and count(parameter)=2 and parameter[1][@type='int'] and parameter[2][@type='int']]"
		[global::System.Obsolete (@"deprecated")]
		[Register ("EDPPSetDesSmHdSoft_Api", "(II)I", "")]
		public static unsafe int EDPPSetDesSmHdSoft_Api (int DesSMMode, int HdOrSoft)
		{
			const string __id = "EDPPSetDesSmHdSoft_Api.(II)I";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (DesSMMode);
				__args [1] = new JniArgumentValue (HdOrSoft);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PedApi']/method[@name='KMS_TR31_DukptWriteTIK_Api' and count(parameter)=8 and parameter[1][@type='int'] and parameter[2][@type='int'] and parameter[3][@type='int'] and parameter[4][@type='byte[]'] and parameter[5][@type='byte[]'] and parameter[6][@type='byte[]'] and parameter[7][@type='byte[]'] and parameter[8][@type='int']]"
		[Register ("KMS_TR31_DukptWriteTIK_Api", "(III[B[B[B[BI)I", "")]
		public static unsafe int KMS_TR31_DukptWriteTIK_Api (int GroupIdx, int mkindex, int SrcKeyIdx, byte[]? KBPK, byte[]? TR31Key, byte[]? IKSN, byte[]? Kcv, int iCheckMode)
		{
			const string __id = "KMS_TR31_DukptWriteTIK_Api.(III[B[B[B[BI)I";
			IntPtr native_KBPK = JNIEnv.NewArray (KBPK);
			IntPtr native_TR31Key = JNIEnv.NewArray (TR31Key);
			IntPtr native_IKSN = JNIEnv.NewArray (IKSN);
			IntPtr native_Kcv = JNIEnv.NewArray (Kcv);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [8];
				__args [0] = new JniArgumentValue (GroupIdx);
				__args [1] = new JniArgumentValue (mkindex);
				__args [2] = new JniArgumentValue (SrcKeyIdx);
				__args [3] = new JniArgumentValue (native_KBPK);
				__args [4] = new JniArgumentValue (native_TR31Key);
				__args [5] = new JniArgumentValue (native_IKSN);
				__args [6] = new JniArgumentValue (native_Kcv);
				__args [7] = new JniArgumentValue (iCheckMode);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (KBPK != null) {
					JNIEnv.CopyArray (native_KBPK, KBPK);
					JNIEnv.DeleteLocalRef (native_KBPK);
				}
				if (TR31Key != null) {
					JNIEnv.CopyArray (native_TR31Key, TR31Key);
					JNIEnv.DeleteLocalRef (native_TR31Key);
				}
				if (IKSN != null) {
					JNIEnv.CopyArray (native_IKSN, IKSN);
					JNIEnv.DeleteLocalRef (native_IKSN);
				}
				if (Kcv != null) {
					JNIEnv.CopyArray (native_Kcv, Kcv);
					JNIEnv.DeleteLocalRef (native_Kcv);
				}
				global::System.GC.KeepAlive (KBPK);
				global::System.GC.KeepAlive (TR31Key);
				global::System.GC.KeepAlive (IKSN);
				global::System.GC.KeepAlive (Kcv);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PedApi']/method[@name='KMS_TR31_MwriteKey_Api' and count(parameter)=5 and parameter[1][@type='int'] and parameter[2][@type='int'] and parameter[3][@type='byte[]'] and parameter[4][@type='byte[]'] and parameter[5][@type='byte[]']]"
		[Register ("KMS_TR31_MwriteKey_Api", "(II[B[B[B)I", "")]
		public static unsafe int KMS_TR31_MwriteKey_Api (int mkindex, int mode, byte[]? KBPK, byte[]? TR31Key, byte[]? Kcv)
		{
			const string __id = "KMS_TR31_MwriteKey_Api.(II[B[B[B)I";
			IntPtr native_KBPK = JNIEnv.NewArray (KBPK);
			IntPtr native_TR31Key = JNIEnv.NewArray (TR31Key);
			IntPtr native_Kcv = JNIEnv.NewArray (Kcv);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [5];
				__args [0] = new JniArgumentValue (mkindex);
				__args [1] = new JniArgumentValue (mode);
				__args [2] = new JniArgumentValue (native_KBPK);
				__args [3] = new JniArgumentValue (native_TR31Key);
				__args [4] = new JniArgumentValue (native_Kcv);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (KBPK != null) {
					JNIEnv.CopyArray (native_KBPK, KBPK);
					JNIEnv.DeleteLocalRef (native_KBPK);
				}
				if (TR31Key != null) {
					JNIEnv.CopyArray (native_TR31Key, TR31Key);
					JNIEnv.DeleteLocalRef (native_TR31Key);
				}
				if (Kcv != null) {
					JNIEnv.CopyArray (native_Kcv, Kcv);
					JNIEnv.DeleteLocalRef (native_Kcv);
				}
				global::System.GC.KeepAlive (KBPK);
				global::System.GC.KeepAlive (TR31Key);
				global::System.GC.KeepAlive (Kcv);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PedApi']/method[@name='PEDBigDataMac_Api' and count(parameter)=6 and parameter[1][@type='int'] and parameter[2][@type='int'] and parameter[3][@type='byte[]'] and parameter[4][@type='int'] and parameter[5][@type='byte[]'] and parameter[6][@type='int']]"
		[Register ("PEDBigDataMac_Api", "(II[BI[BI)I", "")]
		public static unsafe int PEDBigDataMac_Api (int wkindex, int mode, byte[]? data, int Len, byte[]? Out, int flag)
		{
			const string __id = "PEDBigDataMac_Api.(II[BI[BI)I";
			IntPtr native_data = JNIEnv.NewArray (data);
			IntPtr native_Out = JNIEnv.NewArray (Out);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [6];
				__args [0] = new JniArgumentValue (wkindex);
				__args [1] = new JniArgumentValue (mode);
				__args [2] = new JniArgumentValue (native_data);
				__args [3] = new JniArgumentValue (Len);
				__args [4] = new JniArgumentValue (native_Out);
				__args [5] = new JniArgumentValue (flag);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (data != null) {
					JNIEnv.CopyArray (native_data, data);
					JNIEnv.DeleteLocalRef (native_data);
				}
				if (Out != null) {
					JNIEnv.CopyArray (native_Out, Out);
					JNIEnv.DeleteLocalRef (native_Out);
				}
				global::System.GC.KeepAlive (data);
				global::System.GC.KeepAlive (Out);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PedApi']/method[@name='PEDDesCBC_Api' and count(parameter)=8 and parameter[1][@type='int'] and parameter[2][@type='int'] and parameter[3][@type='int'] and parameter[4][@type='byte[]'] and parameter[5][@type='int'] and parameter[6][@type='byte[]'] and parameter[7][@type='int'] and parameter[8][@type='byte[]']]"
		[Register ("PEDDesCBC_Api", "(III[BI[BI[B)I", "")]
		public static unsafe int PEDDesCBC_Api (int KeyIndex, int Mode, int MorWFlag, byte[]? ivIn, int ivLen, byte[]? DataIn, int DataInLen, byte[]? DataOut)
		{
			const string __id = "PEDDesCBC_Api.(III[BI[BI[B)I";
			IntPtr native_ivIn = JNIEnv.NewArray (ivIn);
			IntPtr native_DataIn = JNIEnv.NewArray (DataIn);
			IntPtr native_DataOut = JNIEnv.NewArray (DataOut);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [8];
				__args [0] = new JniArgumentValue (KeyIndex);
				__args [1] = new JniArgumentValue (Mode);
				__args [2] = new JniArgumentValue (MorWFlag);
				__args [3] = new JniArgumentValue (native_ivIn);
				__args [4] = new JniArgumentValue (ivLen);
				__args [5] = new JniArgumentValue (native_DataIn);
				__args [6] = new JniArgumentValue (DataInLen);
				__args [7] = new JniArgumentValue (native_DataOut);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (ivIn != null) {
					JNIEnv.CopyArray (native_ivIn, ivIn);
					JNIEnv.DeleteLocalRef (native_ivIn);
				}
				if (DataIn != null) {
					JNIEnv.CopyArray (native_DataIn, DataIn);
					JNIEnv.DeleteLocalRef (native_DataIn);
				}
				if (DataOut != null) {
					JNIEnv.CopyArray (native_DataOut, DataOut);
					JNIEnv.DeleteLocalRef (native_DataOut);
				}
				global::System.GC.KeepAlive (ivIn);
				global::System.GC.KeepAlive (DataIn);
				global::System.GC.KeepAlive (DataOut);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PedApi']/method[@name='PEDDes_Api' and count(parameter)=6 and parameter[1][@type='int'] and parameter[2][@type='int'] and parameter[3][@type='int'] and parameter[4][@type='byte[]'] and parameter[5][@type='int'] and parameter[6][@type='byte[]']]"
		[Register ("PEDDes_Api", "(III[BI[B)I", "")]
		public static unsafe int PEDDes_Api (int KeyIndex, int Mode, int MorWFlag, byte[]? DataIn, int DataInLen, byte[]? DataOut)
		{
			const string __id = "PEDDes_Api.(III[BI[B)I";
			IntPtr native_DataIn = JNIEnv.NewArray (DataIn);
			IntPtr native_DataOut = JNIEnv.NewArray (DataOut);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [6];
				__args [0] = new JniArgumentValue (KeyIndex);
				__args [1] = new JniArgumentValue (Mode);
				__args [2] = new JniArgumentValue (MorWFlag);
				__args [3] = new JniArgumentValue (native_DataIn);
				__args [4] = new JniArgumentValue (DataInLen);
				__args [5] = new JniArgumentValue (native_DataOut);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (DataIn != null) {
					JNIEnv.CopyArray (native_DataIn, DataIn);
					JNIEnv.DeleteLocalRef (native_DataIn);
				}
				if (DataOut != null) {
					JNIEnv.CopyArray (native_DataOut, DataOut);
					JNIEnv.DeleteLocalRef (native_DataOut);
				}
				global::System.GC.KeepAlive (DataIn);
				global::System.GC.KeepAlive (DataOut);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PedApi']/method[@name='PEDDisp_Api' and count(parameter)=4 and parameter[1][@type='int'] and parameter[2][@type='byte[]'] and parameter[3][@type='int'] and parameter[4][@type='int']]"
		[Register ("PEDDisp_Api", "(I[BII)V", "")]
		public static unsafe void PEDDisp_Api (int nLineIndex, byte[]? strText, int nLength, int nFlagSound)
		{
			const string __id = "PEDDisp_Api.(I[BII)V";
			IntPtr native_strText = JNIEnv.NewArray (strText);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [4];
				__args [0] = new JniArgumentValue (nLineIndex);
				__args [1] = new JniArgumentValue (native_strText);
				__args [2] = new JniArgumentValue (nLength);
				__args [3] = new JniArgumentValue (nFlagSound);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				if (strText != null) {
					JNIEnv.CopyArray (native_strText, strText);
					JNIEnv.DeleteLocalRef (native_strText);
				}
				global::System.GC.KeepAlive (strText);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PedApi']/method[@name='PEDDisp_Api' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
		[Register ("PEDDisp_Api", "(Ljava/lang/String;)V", "")]
		public static unsafe void PEDDisp_Api (string? strText)
		{
			const string __id = "PEDDisp_Api.(Ljava/lang/String;)V";
			IntPtr native_strText = JNIEnv.NewString ((string?)strText);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_strText);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				JNIEnv.DeleteLocalRef (native_strText);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PedApi']/method[@name='PEDGetDukptPin_Api' and count(parameter)=7 and parameter[1][@type='java.lang.String'] and parameter[2][@type='byte[]'] and parameter[3][@type='int'] and parameter[4][@type='byte[]'] and parameter[5][@type='int'] and parameter[6][@type='int'] and parameter[7][@type='com.vanstone.transex.ped.IGetDukptPinListener']]"
		[Register ("PEDGetDukptPin_Api", "(Ljava/lang/String;[BI[BIILcom/vanstone/transex/ped/IGetDukptPinListener;)I", "")]
		public static unsafe int PEDGetDukptPin_Api (string? disMsg, byte[]? dataIn, int keyIndex, byte[]? pinLimit, int mode, int timeOut, global::Com.Vanstone.Transex.Ped.IGetDukptPinListener? listenner)
		{
			const string __id = "PEDGetDukptPin_Api.(Ljava/lang/String;[BI[BIILcom/vanstone/transex/ped/IGetDukptPinListener;)I";
			IntPtr native_disMsg = JNIEnv.NewString ((string?)disMsg);
			IntPtr native_dataIn = JNIEnv.NewArray (dataIn);
			IntPtr native_pinLimit = JNIEnv.NewArray (pinLimit);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [7];
				__args [0] = new JniArgumentValue (native_disMsg);
				__args [1] = new JniArgumentValue (native_dataIn);
				__args [2] = new JniArgumentValue (keyIndex);
				__args [3] = new JniArgumentValue (native_pinLimit);
				__args [4] = new JniArgumentValue (mode);
				__args [5] = new JniArgumentValue (timeOut);
				__args [6] = new JniArgumentValue ((listenner == null) ? IntPtr.Zero : ((global::Java.Lang.Object) listenner).Handle);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				JNIEnv.DeleteLocalRef (native_disMsg);
				if (dataIn != null) {
					JNIEnv.CopyArray (native_dataIn, dataIn);
					JNIEnv.DeleteLocalRef (native_dataIn);
				}
				if (pinLimit != null) {
					JNIEnv.CopyArray (native_pinLimit, pinLimit);
					JNIEnv.DeleteLocalRef (native_pinLimit);
				}
				global::System.GC.KeepAlive (dataIn);
				global::System.GC.KeepAlive (pinLimit);
				global::System.GC.KeepAlive (listenner);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PedApi']/method[@name='PEDGetEMVOfflinePin_Api' and count(parameter)=3 and parameter[1][@type='java.lang.String'] and parameter[2][@type='byte[]'] and parameter[3][@type='int']]"
		[Register ("PEDGetEMVOfflinePin_Api", "(Ljava/lang/String;[BI)I", "")]
		public static unsafe int PEDGetEMVOfflinePin_Api (string? disMsg, byte[]? pinLimit, int timeOut)
		{
			const string __id = "PEDGetEMVOfflinePin_Api.(Ljava/lang/String;[BI)I";
			IntPtr native_disMsg = JNIEnv.NewString ((string?)disMsg);
			IntPtr native_pinLimit = JNIEnv.NewArray (pinLimit);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (native_disMsg);
				__args [1] = new JniArgumentValue (native_pinLimit);
				__args [2] = new JniArgumentValue (timeOut);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				JNIEnv.DeleteLocalRef (native_disMsg);
				if (pinLimit != null) {
					JNIEnv.CopyArray (native_pinLimit, pinLimit);
					JNIEnv.DeleteLocalRef (native_pinLimit);
				}
				global::System.GC.KeepAlive (pinLimit);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PedApi']/method[@name='PEDGetEMVOfflinePin_Api' and count(parameter)=4 and parameter[1][@type='java.lang.String'] and parameter[2][@type='byte[]'] and parameter[3][@type='int'] and parameter[4][@type='com.vanstone.transex.ped.IGetPinResultListenner']]"
		[Register ("PEDGetEMVOfflinePin_Api", "(Ljava/lang/String;[BILcom/vanstone/transex/ped/IGetPinResultListenner;)I", "")]
		public static unsafe int PEDGetEMVOfflinePin_Api (string? disMsg, byte[]? pinLimit, int timeOut, global::Com.Vanstone.Transex.Ped.IGetPinResultListenner? listenner)
		{
			const string __id = "PEDGetEMVOfflinePin_Api.(Ljava/lang/String;[BILcom/vanstone/transex/ped/IGetPinResultListenner;)I";
			IntPtr native_disMsg = JNIEnv.NewString ((string?)disMsg);
			IntPtr native_pinLimit = JNIEnv.NewArray (pinLimit);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [4];
				__args [0] = new JniArgumentValue (native_disMsg);
				__args [1] = new JniArgumentValue (native_pinLimit);
				__args [2] = new JniArgumentValue (timeOut);
				__args [3] = new JniArgumentValue ((listenner == null) ? IntPtr.Zero : ((global::Java.Lang.Object) listenner).Handle);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				JNIEnv.DeleteLocalRef (native_disMsg);
				if (pinLimit != null) {
					JNIEnv.CopyArray (native_pinLimit, pinLimit);
					JNIEnv.DeleteLocalRef (native_pinLimit);
				}
				global::System.GC.KeepAlive (pinLimit);
				global::System.GC.KeepAlive (listenner);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PedApi']/method[@name='PEDGetEMVOfflinePin_Api' and count(parameter)=4 and parameter[1][@type='java.lang.String'] and parameter[2][@type='int'] and parameter[3][@type='int'] and parameter[4][@type='int']]"
		[Register ("PEDGetEMVOfflinePin_Api", "(Ljava/lang/String;III)I", "")]
		public static unsafe int PEDGetEMVOfflinePin_Api (string? disMsg, int min, int max, int timeOut)
		{
			const string __id = "PEDGetEMVOfflinePin_Api.(Ljava/lang/String;III)I";
			IntPtr native_disMsg = JNIEnv.NewString ((string?)disMsg);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [4];
				__args [0] = new JniArgumentValue (native_disMsg);
				__args [1] = new JniArgumentValue (min);
				__args [2] = new JniArgumentValue (max);
				__args [3] = new JniArgumentValue (timeOut);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				JNIEnv.DeleteLocalRef (native_disMsg);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PedApi']/method[@name='PEDGetEMVOfflinePin_Api' and count(parameter)=5 and parameter[1][@type='java.lang.String'] and parameter[2][@type='int'] and parameter[3][@type='int'] and parameter[4][@type='int'] and parameter[5][@type='com.vanstone.transex.ped.IGetPinResultListenner']]"
		[Register ("PEDGetEMVOfflinePin_Api", "(Ljava/lang/String;IIILcom/vanstone/transex/ped/IGetPinResultListenner;)I", "")]
		public static unsafe int PEDGetEMVOfflinePin_Api (string? disMsg, int min, int max, int timeOut, global::Com.Vanstone.Transex.Ped.IGetPinResultListenner? listenner)
		{
			const string __id = "PEDGetEMVOfflinePin_Api.(Ljava/lang/String;IIILcom/vanstone/transex/ped/IGetPinResultListenner;)I";
			IntPtr native_disMsg = JNIEnv.NewString ((string?)disMsg);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [5];
				__args [0] = new JniArgumentValue (native_disMsg);
				__args [1] = new JniArgumentValue (min);
				__args [2] = new JniArgumentValue (max);
				__args [3] = new JniArgumentValue (timeOut);
				__args [4] = new JniArgumentValue ((listenner == null) ? IntPtr.Zero : ((global::Java.Lang.Object) listenner).Handle);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				JNIEnv.DeleteLocalRef (native_disMsg);
				global::System.GC.KeepAlive (listenner);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PedApi']/method[@name='PEDGetExpress_Api' and count(parameter)=4 and parameter[1][@type='java.lang.String'] and parameter[2][@type='byte[]'] and parameter[3][@type='int'] and parameter[4][@type='com.vanstone.transex.ped.IGetPinResultListenner']]"
		[Register ("PEDGetExpress_Api", "(Ljava/lang/String;[BILcom/vanstone/transex/ped/IGetPinResultListenner;)I", "")]
		public static unsafe int PEDGetExpress_Api (string? disMsg, byte[]? pinLimit, int timeOut, global::Com.Vanstone.Transex.Ped.IGetPinResultListenner? listenner)
		{
			const string __id = "PEDGetExpress_Api.(Ljava/lang/String;[BILcom/vanstone/transex/ped/IGetPinResultListenner;)I";
			IntPtr native_disMsg = JNIEnv.NewString ((string?)disMsg);
			IntPtr native_pinLimit = JNIEnv.NewArray (pinLimit);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [4];
				__args [0] = new JniArgumentValue (native_disMsg);
				__args [1] = new JniArgumentValue (native_pinLimit);
				__args [2] = new JniArgumentValue (timeOut);
				__args [3] = new JniArgumentValue ((listenner == null) ? IntPtr.Zero : ((global::Java.Lang.Object) listenner).Handle);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				JNIEnv.DeleteLocalRef (native_disMsg);
				if (pinLimit != null) {
					JNIEnv.CopyArray (native_pinLimit, pinLimit);
					JNIEnv.DeleteLocalRef (native_pinLimit);
				}
				global::System.GC.KeepAlive (pinLimit);
				global::System.GC.KeepAlive (listenner);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PedApi']/method[@name='PEDGetLastError_Api' and count(parameter)=0]"
		[Register ("PEDGetLastError_Api", "()Ljava/lang/String;", "")]
		public static unsafe string? PEDGetLastError_Api ()
		{
			const string __id = "PEDGetLastError_Api.()Ljava/lang/String;";
			try {
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, null);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PedApi']/method[@name='PEDGetPwd_Api' and count(parameter)=6 and parameter[1][@type='int'] and parameter[2][@type='byte[]'] and parameter[3][@type='java.lang.String'] and parameter[4][@type='int'] and parameter[5][@type='com.vanstone.page.widget.body.custom.IKeyBoard'] and parameter[6][@type='com.vanstone.trans.api.PedApi.OnPedKeyListener']]"
		[Register ("PEDGetPwd_Api", "(I[BLjava/lang/String;ILcom/vanstone/page/widget/body/custom/IKeyBoard;Lcom/vanstone/trans/api/PedApi$OnPedKeyListener;)V", "")]
		public static unsafe void PEDGetPwd_Api (int wkindex, byte[]? pinLimit, string? CardNo, int mode, global::Com.Vanstone.Page.Widget.Body.Custom.IKeyBoard? board, global::Com.Vanstone.Trans.Api.PedApi.IOnPedKeyListener? pedKeyListener)
		{
			const string __id = "PEDGetPwd_Api.(I[BLjava/lang/String;ILcom/vanstone/page/widget/body/custom/IKeyBoard;Lcom/vanstone/trans/api/PedApi$OnPedKeyListener;)V";
			IntPtr native_pinLimit = JNIEnv.NewArray (pinLimit);
			IntPtr native_CardNo = JNIEnv.NewString ((string?)CardNo);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [6];
				__args [0] = new JniArgumentValue (wkindex);
				__args [1] = new JniArgumentValue (native_pinLimit);
				__args [2] = new JniArgumentValue (native_CardNo);
				__args [3] = new JniArgumentValue (mode);
				__args [4] = new JniArgumentValue ((board == null) ? IntPtr.Zero : ((global::Java.Lang.Object) board).Handle);
				__args [5] = new JniArgumentValue ((pedKeyListener == null) ? IntPtr.Zero : ((global::Java.Lang.Object) pedKeyListener).Handle);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				if (pinLimit != null) {
					JNIEnv.CopyArray (native_pinLimit, pinLimit);
					JNIEnv.DeleteLocalRef (native_pinLimit);
				}
				JNIEnv.DeleteLocalRef (native_CardNo);
				global::System.GC.KeepAlive (pinLimit);
				global::System.GC.KeepAlive (board);
				global::System.GC.KeepAlive (pedKeyListener);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PedApi']/method[@name='PEDGetPwd_Api' and count(parameter)=7 and parameter[1][@type='int'] and parameter[2][@type='int'] and parameter[3][@type='int'] and parameter[4][@type='byte[]'] and parameter[5][@type='byte[]'] and parameter[6][@type='int'] and parameter[7][@type='int']]"
		[Register ("PEDGetPwd_Api", "(III[B[BII)I", "")]
		public static unsafe int PEDGetPwd_Api (int wkindex, int min, int max, byte[]? cardNo, byte[]? pin, int line, int mode)
		{
			const string __id = "PEDGetPwd_Api.(III[B[BII)I";
			IntPtr native_cardNo = JNIEnv.NewArray (cardNo);
			IntPtr native_pin = JNIEnv.NewArray (pin);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [7];
				__args [0] = new JniArgumentValue (wkindex);
				__args [1] = new JniArgumentValue (min);
				__args [2] = new JniArgumentValue (max);
				__args [3] = new JniArgumentValue (native_cardNo);
				__args [4] = new JniArgumentValue (native_pin);
				__args [5] = new JniArgumentValue (line);
				__args [6] = new JniArgumentValue (mode);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (cardNo != null) {
					JNIEnv.CopyArray (native_cardNo, cardNo);
					JNIEnv.DeleteLocalRef (native_cardNo);
				}
				if (pin != null) {
					JNIEnv.CopyArray (native_pin, pin);
					JNIEnv.DeleteLocalRef (native_pin);
				}
				global::System.GC.KeepAlive (cardNo);
				global::System.GC.KeepAlive (pin);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PedApi']/method[@name='PEDGetPwd_Api' and count(parameter)=8 and parameter[1][@type='int'] and parameter[2][@type='int'] and parameter[3][@type='int'] and parameter[4][@type='byte[]'] and parameter[5][@type='byte[]'] and parameter[6][@type='int'] and parameter[7][@type='int'] and parameter[8][@type='com.vanstone.base.interfaces.PedListener']]"
		[global::System.Obsolete (@"deprecated")]
		[Register ("PEDGetPwd_Api", "(III[B[BIILcom/vanstone/base/interfaces/PedListener;)I", "")]
		public static unsafe int PEDGetPwd_Api (int wkindex, int min, int max, byte[]? cardNo, byte[]? pin, int line, int mode, global::Com.Vanstone.Base.Interfaces.IPedListener? pedListener)
		{
			const string __id = "PEDGetPwd_Api.(III[B[BIILcom/vanstone/base/interfaces/PedListener;)I";
			IntPtr native_cardNo = JNIEnv.NewArray (cardNo);
			IntPtr native_pin = JNIEnv.NewArray (pin);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [8];
				__args [0] = new JniArgumentValue (wkindex);
				__args [1] = new JniArgumentValue (min);
				__args [2] = new JniArgumentValue (max);
				__args [3] = new JniArgumentValue (native_cardNo);
				__args [4] = new JniArgumentValue (native_pin);
				__args [5] = new JniArgumentValue (line);
				__args [6] = new JniArgumentValue (mode);
				__args [7] = new JniArgumentValue ((pedListener == null) ? IntPtr.Zero : ((global::Java.Lang.Object) pedListener).Handle);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (cardNo != null) {
					JNIEnv.CopyArray (native_cardNo, cardNo);
					JNIEnv.DeleteLocalRef (native_cardNo);
				}
				if (pin != null) {
					JNIEnv.CopyArray (native_pin, pin);
					JNIEnv.DeleteLocalRef (native_pin);
				}
				global::System.GC.KeepAlive (cardNo);
				global::System.GC.KeepAlive (pin);
				global::System.GC.KeepAlive (pedListener);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PedApi']/method[@name='PEDGetPwd_Api' and count(parameter)=7 and parameter[1][@type='java.lang.String'] and parameter[2][@type='byte[]'] and parameter[3][@type='byte[]'] and parameter[4][@type='int'] and parameter[5][@type='int'] and parameter[6][@type='int'] and parameter[7][@type='com.vanstone.transex.ped.IGetPinResultListenner']]"
		[Register ("PEDGetPwd_Api", "(Ljava/lang/String;[B[BIIILcom/vanstone/transex/ped/IGetPinResultListenner;)I", "")]
		public static unsafe int PEDGetPwd_Api (string? disMsg, byte[]? panBlock, byte[]? pinLimit, int keyIndex, int timeOut, int mode, global::Com.Vanstone.Transex.Ped.IGetPinResultListenner? listenner)
		{
			const string __id = "PEDGetPwd_Api.(Ljava/lang/String;[B[BIIILcom/vanstone/transex/ped/IGetPinResultListenner;)I";
			IntPtr native_disMsg = JNIEnv.NewString ((string?)disMsg);
			IntPtr native_panBlock = JNIEnv.NewArray (panBlock);
			IntPtr native_pinLimit = JNIEnv.NewArray (pinLimit);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [7];
				__args [0] = new JniArgumentValue (native_disMsg);
				__args [1] = new JniArgumentValue (native_panBlock);
				__args [2] = new JniArgumentValue (native_pinLimit);
				__args [3] = new JniArgumentValue (keyIndex);
				__args [4] = new JniArgumentValue (timeOut);
				__args [5] = new JniArgumentValue (mode);
				__args [6] = new JniArgumentValue ((listenner == null) ? IntPtr.Zero : ((global::Java.Lang.Object) listenner).Handle);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				JNIEnv.DeleteLocalRef (native_disMsg);
				if (panBlock != null) {
					JNIEnv.CopyArray (native_panBlock, panBlock);
					JNIEnv.DeleteLocalRef (native_panBlock);
				}
				if (pinLimit != null) {
					JNIEnv.CopyArray (native_pinLimit, pinLimit);
					JNIEnv.DeleteLocalRef (native_pinLimit);
				}
				global::System.GC.KeepAlive (panBlock);
				global::System.GC.KeepAlive (pinLimit);
				global::System.GC.KeepAlive (listenner);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PedApi']/method[@name='PEDGetPwdzh_Api' and count(parameter)=6 and parameter[1][@type='int'] and parameter[2][@type='java.lang.String'] and parameter[3][@type='int'] and parameter[4][@type='byte[]'] and parameter[5][@type='int'] and parameter[6][@type='byte[]']]"
		[Register ("PEDGetPwdzh_Api", "(ILjava/lang/String;I[BI[B)I", "")]
		public static unsafe int PEDGetPwdzh_Api (int wkindex, string? CardNo, int mode, byte[]? pincode, int pincodelen, byte[]? pinOut)
		{
			const string __id = "PEDGetPwdzh_Api.(ILjava/lang/String;I[BI[B)I";
			IntPtr native_CardNo = JNIEnv.NewString ((string?)CardNo);
			IntPtr native_pincode = JNIEnv.NewArray (pincode);
			IntPtr native_pinOut = JNIEnv.NewArray (pinOut);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [6];
				__args [0] = new JniArgumentValue (wkindex);
				__args [1] = new JniArgumentValue (native_CardNo);
				__args [2] = new JniArgumentValue (mode);
				__args [3] = new JniArgumentValue (native_pincode);
				__args [4] = new JniArgumentValue (pincodelen);
				__args [5] = new JniArgumentValue (native_pinOut);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				JNIEnv.DeleteLocalRef (native_CardNo);
				if (pincode != null) {
					JNIEnv.CopyArray (native_pincode, pincode);
					JNIEnv.DeleteLocalRef (native_pincode);
				}
				if (pinOut != null) {
					JNIEnv.CopyArray (native_pinOut, pinOut);
					JNIEnv.DeleteLocalRef (native_pinOut);
				}
				global::System.GC.KeepAlive (pincode);
				global::System.GC.KeepAlive (pinOut);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PedApi']/method[@name='PEDHaveCallBack_Api' and count(parameter)=0]"
		[global::System.Obsolete (@"deprecated")]
		[Register ("PEDHaveCallBack_Api", "()V", "")]
		public static unsafe void PEDHaveCallBack_Api ()
		{
			const string __id = "PEDHaveCallBack_Api.()V";
			try {
				_members.StaticMethods.InvokeVoidMethod (__id, null);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PedApi']/method[@name='PEDMac_Api' and count(parameter)=6 and parameter[1][@type='int'] and parameter[2][@type='int'] and parameter[3][@type='byte[]'] and parameter[4][@type='int'] and parameter[5][@type='byte[]'] and parameter[6][@type='int']]"
		[Register ("PEDMac_Api", "(II[BI[BI)I", "")]
		public static unsafe int PEDMac_Api (int wkindex, int mode, byte[]? data, int Len, byte[]? Out, int flag)
		{
			const string __id = "PEDMac_Api.(II[BI[BI)I";
			IntPtr native_data = JNIEnv.NewArray (data);
			IntPtr native_Out = JNIEnv.NewArray (Out);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [6];
				__args [0] = new JniArgumentValue (wkindex);
				__args [1] = new JniArgumentValue (mode);
				__args [2] = new JniArgumentValue (native_data);
				__args [3] = new JniArgumentValue (Len);
				__args [4] = new JniArgumentValue (native_Out);
				__args [5] = new JniArgumentValue (flag);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (data != null) {
					JNIEnv.CopyArray (native_data, data);
					JNIEnv.DeleteLocalRef (native_data);
				}
				if (Out != null) {
					JNIEnv.CopyArray (native_Out, Out);
					JNIEnv.DeleteLocalRef (native_Out);
				}
				global::System.GC.KeepAlive (data);
				global::System.GC.KeepAlive (Out);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PedApi']/method[@name='PEDReadPinPadSn_Api' and count(parameter)=1 and parameter[1][@type='byte[]']]"
		[Register ("PEDReadPinPadSn_Api", "([B)I", "")]
		public static unsafe int PEDReadPinPadSn_Api (byte[]? Sn)
		{
			const string __id = "PEDReadPinPadSn_Api.([B)I";
			IntPtr native_Sn = JNIEnv.NewArray (Sn);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_Sn);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (Sn != null) {
					JNIEnv.CopyArray (native_Sn, Sn);
					JNIEnv.DeleteLocalRef (native_Sn);
				}
				global::System.GC.KeepAlive (Sn);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PedApi']/method[@name='PEDSavePinPadSn_Api' and count(parameter)=1 and parameter[1][@type='byte[]']]"
		[Register ("PEDSavePinPadSn_Api", "([B)I", "")]
		public static unsafe int PEDSavePinPadSn_Api (byte[]? Sn)
		{
			const string __id = "PEDSavePinPadSn_Api.([B)I";
			IntPtr native_Sn = JNIEnv.NewArray (Sn);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_Sn);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (Sn != null) {
					JNIEnv.CopyArray (native_Sn, Sn);
					JNIEnv.DeleteLocalRef (native_Sn);
				}
				global::System.GC.KeepAlive (Sn);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PedApi']/method[@name='PEDSetContent_Api' and count(parameter)=1 and parameter[1][@type='android.content.Context']]"
		[global::System.Obsolete (@"deprecated")]
		[Register ("PEDSetContent_Api", "(Landroid/content/Context;)V", "")]
		public static unsafe void PEDSetContent_Api (global::Android.Content.Context? act)
		{
			const string __id = "PEDSetContent_Api.(Landroid/content/Context;)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue ((act == null) ? IntPtr.Zero : ((global::Java.Lang.Object) act).Handle);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				global::System.GC.KeepAlive (act);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PedApi']/method[@name='PEDSetDispAmt_Api' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
		[Register ("PEDSetDispAmt_Api", "(Ljava/lang/String;)V", "")]
		public static unsafe void PEDSetDispAmt_Api (string? disAmt)
		{
			const string __id = "PEDSetDispAmt_Api.(Ljava/lang/String;)V";
			IntPtr native_disAmt = JNIEnv.NewString ((string?)disAmt);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_disAmt);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				JNIEnv.DeleteLocalRef (native_disAmt);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PedApi']/method[@name='PEDSetHdSoft_Api' and count(parameter)=1 and parameter[1][@type='int']]"
		[Register ("PEDSetHdSoft_Api", "(I)I", "")]
		public static unsafe int PEDSetHdSoft_Api (int HdOrSoft)
		{
			const string __id = "PEDSetHdSoft_Api.(I)I";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (HdOrSoft);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PedApi']/method[@name='PEDSetKeyType_Api' and count(parameter)=1 and parameter[1][@type='int']]"
		[Register ("PEDSetKeyType_Api", "(I)V", "")]
		public static unsafe void PEDSetKeyType_Api (int keyType)
		{
			const string __id = "PEDSetKeyType_Api.(I)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (keyType);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PedApi']/method[@name='PEDSetPinBoardStyle_Api' and count(parameter)=1 and parameter[1][@type='int']]"
		[Register ("PEDSetPinBoardStyle_Api", "(I)V", "")]
		public static unsafe void PEDSetPinBoardStyle_Api (int PinBoardType)
		{
			const string __id = "PEDSetPinBoardStyle_Api.(I)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (PinBoardType);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PedApi']/method[@name='PEDSnMacOnly_Api' and count(parameter)=4 and parameter[1][@type='byte[]'] and parameter[2][@type='int'] and parameter[3][@type='byte[]'] and parameter[4][@type='int']]"
		[Register ("PEDSnMacOnly_Api", "([BI[BI)I", "")]
		public static unsafe int PEDSnMacOnly_Api (byte[]? data, int dataLen, byte[]? @out, int mode)
		{
			const string __id = "PEDSnMacOnly_Api.([BI[BI)I";
			IntPtr native_data = JNIEnv.NewArray (data);
			IntPtr native__out = JNIEnv.NewArray (@out);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [4];
				__args [0] = new JniArgumentValue (native_data);
				__args [1] = new JniArgumentValue (dataLen);
				__args [2] = new JniArgumentValue (native__out);
				__args [3] = new JniArgumentValue (mode);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (data != null) {
					JNIEnv.CopyArray (native_data, data);
					JNIEnv.DeleteLocalRef (native_data);
				}
				if (@out != null) {
					JNIEnv.CopyArray (native__out, @out);
					JNIEnv.DeleteLocalRef (native__out);
				}
				global::System.GC.KeepAlive (data);
				global::System.GC.KeepAlive (@out);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PedApi']/method[@name='PEDStopPin_Api' and count(parameter)=0]"
		[Register ("PEDStopPin_Api", "()V", "")]
		public static unsafe void PEDStopPin_Api ()
		{
			const string __id = "PEDStopPin_Api.()V";
			try {
				_members.StaticMethods.InvokeVoidMethod (__id, null);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PedApi']/method[@name='PEDWrite21Key_Api' and count(parameter)=2 and parameter[1][@type='int'] and parameter[2][@type='byte[]']]"
		[Register ("PEDWrite21Key_Api", "(I[B)I", "")]
		public static unsafe int PEDWrite21Key_Api (int mode, byte[]? data)
		{
			const string __id = "PEDWrite21Key_Api.(I[B)I";
			IntPtr native_data = JNIEnv.NewArray (data);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (mode);
				__args [1] = new JniArgumentValue (native_data);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (data != null) {
					JNIEnv.CopyArray (native_data, data);
					JNIEnv.DeleteLocalRef (native_data);
				}
				global::System.GC.KeepAlive (data);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PedApi']/method[@name='PEDWriteIcBcKey_Api' and count(parameter)=5 and parameter[1][@type='byte[]'] and parameter[2][@type='int'] and parameter[3][@type='int'] and parameter[4][@type='int'] and parameter[5][@type='int']]"
		[Register ("PEDWriteIcBcKey_Api", "([BIIII)I", "")]
		public static unsafe int PEDWriteIcBcKey_Api (byte[]? Inbuf, int wkindex, int mkindex, int keyType, int akeyindex)
		{
			const string __id = "PEDWriteIcBcKey_Api.([BIIII)I";
			IntPtr native_Inbuf = JNIEnv.NewArray (Inbuf);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [5];
				__args [0] = new JniArgumentValue (native_Inbuf);
				__args [1] = new JniArgumentValue (wkindex);
				__args [2] = new JniArgumentValue (mkindex);
				__args [3] = new JniArgumentValue (keyType);
				__args [4] = new JniArgumentValue (akeyindex);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (Inbuf != null) {
					JNIEnv.CopyArray (native_Inbuf, Inbuf);
					JNIEnv.DeleteLocalRef (native_Inbuf);
				}
				global::System.GC.KeepAlive (Inbuf);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PedApi']/method[@name='PEDWriteIcBcKey_Api' and count(parameter)=7 and parameter[1][@type='byte[]'] and parameter[2][@type='int'] and parameter[3][@type='int'] and parameter[4][@type='int'] and parameter[5][@type='int'] and parameter[6][@type='int'] and parameter[7][@type='byte[]']]"
		[Register ("PEDWriteIcBcKey_Api", "([BIIIII[B)I", "")]
		public static unsafe int PEDWriteIcBcKey_Api (byte[]? inbuf, int AKeyIndes, int MasteKeyIndes, int MacKeyIndes, int PinKeyIndes, int Flag28, byte[]? BitMap)
		{
			const string __id = "PEDWriteIcBcKey_Api.([BIIIII[B)I";
			IntPtr native_inbuf = JNIEnv.NewArray (inbuf);
			IntPtr native_BitMap = JNIEnv.NewArray (BitMap);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [7];
				__args [0] = new JniArgumentValue (native_inbuf);
				__args [1] = new JniArgumentValue (AKeyIndes);
				__args [2] = new JniArgumentValue (MasteKeyIndes);
				__args [3] = new JniArgumentValue (MacKeyIndes);
				__args [4] = new JniArgumentValue (PinKeyIndes);
				__args [5] = new JniArgumentValue (Flag28);
				__args [6] = new JniArgumentValue (native_BitMap);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (inbuf != null) {
					JNIEnv.CopyArray (native_inbuf, inbuf);
					JNIEnv.DeleteLocalRef (native_inbuf);
				}
				if (BitMap != null) {
					JNIEnv.CopyArray (native_BitMap, BitMap);
					JNIEnv.DeleteLocalRef (native_BitMap);
				}
				global::System.GC.KeepAlive (inbuf);
				global::System.GC.KeepAlive (BitMap);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PedApi']/method[@name='PEDWriteKey_Api' and count(parameter)=6 and parameter[1][@type='int'] and parameter[2][@type='int'] and parameter[3][@type='byte[]'] and parameter[4][@type='int'] and parameter[5][@type='int'] and parameter[6][@type='byte[]']]"
		[Register ("PEDWriteKey_Api", "(II[BII[B)I", "")]
		public static unsafe int PEDWriteKey_Api (int SKeyIndex, int DKeyIndex, byte[]? DKey, int DKeyType, int mode, byte[]? KVRData)
		{
			const string __id = "PEDWriteKey_Api.(II[BII[B)I";
			IntPtr native_DKey = JNIEnv.NewArray (DKey);
			IntPtr native_KVRData = JNIEnv.NewArray (KVRData);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [6];
				__args [0] = new JniArgumentValue (SKeyIndex);
				__args [1] = new JniArgumentValue (DKeyIndex);
				__args [2] = new JniArgumentValue (native_DKey);
				__args [3] = new JniArgumentValue (DKeyType);
				__args [4] = new JniArgumentValue (mode);
				__args [5] = new JniArgumentValue (native_KVRData);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (DKey != null) {
					JNIEnv.CopyArray (native_DKey, DKey);
					JNIEnv.DeleteLocalRef (native_DKey);
				}
				if (KVRData != null) {
					JNIEnv.CopyArray (native_KVRData, KVRData);
					JNIEnv.DeleteLocalRef (native_KVRData);
				}
				global::System.GC.KeepAlive (DKey);
				global::System.GC.KeepAlive (KVRData);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PedApi']/method[@name='PEDWriteMKey_Api' and count(parameter)=3 and parameter[1][@type='int'] and parameter[2][@type='int'] and parameter[3][@type='byte[]']]"
		[Register ("PEDWriteMKey_Api", "(II[B)I", "")]
		public static unsafe int PEDWriteMKey_Api (int mkindex, int mode, byte[]? data)
		{
			const string __id = "PEDWriteMKey_Api.(II[B)I";
			IntPtr native_data = JNIEnv.NewArray (data);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (mkindex);
				__args [1] = new JniArgumentValue (mode);
				__args [2] = new JniArgumentValue (native_data);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (data != null) {
					JNIEnv.CopyArray (native_data, data);
					JNIEnv.DeleteLocalRef (native_data);
				}
				global::System.GC.KeepAlive (data);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PedApi']/method[@name='PEDWriteWKey_Api' and count(parameter)=4 and parameter[1][@type='int'] and parameter[2][@type='int'] and parameter[3][@type='int'] and parameter[4][@type='byte[]']]"
		[Register ("PEDWriteWKey_Api", "(III[B)I", "")]
		public static unsafe int PEDWriteWKey_Api (int MkeyIndex, int WkeyIndex, int mode, byte[]? data)
		{
			const string __id = "PEDWriteWKey_Api.(III[B)I";
			IntPtr native_data = JNIEnv.NewArray (data);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [4];
				__args [0] = new JniArgumentValue (MkeyIndex);
				__args [1] = new JniArgumentValue (WkeyIndex);
				__args [2] = new JniArgumentValue (mode);
				__args [3] = new JniArgumentValue (native_data);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (data != null) {
					JNIEnv.CopyArray (native_data, data);
					JNIEnv.DeleteLocalRef (native_data);
				}
				global::System.GC.KeepAlive (data);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PedApi']/method[@name='PedCalcDESDukpt_Api' and count(parameter)=7 and parameter[1][@type='byte'] and parameter[2][@type='byte'] and parameter[3][@type='byte[]'] and parameter[4][@type='byte[]'] and parameter[5][@type='byte'] and parameter[6][@type='byte[]'] and parameter[7][@type='byte[]']]"
		[Register ("PedCalcDESDukpt_Api", "(BB[B[BB[B[B)I", "")]
		public static unsafe int PedCalcDESDukpt_Api (sbyte GroupIdx, sbyte KeyVarType, byte[]? KpucIV, byte[]? DataIn, sbyte Mode, byte[]? DataOut, byte[]? KsnOut)
		{
			const string __id = "PedCalcDESDukpt_Api.(BB[B[BB[B[B)I";
			IntPtr native_KpucIV = JNIEnv.NewArray (KpucIV);
			IntPtr native_DataIn = JNIEnv.NewArray (DataIn);
			IntPtr native_DataOut = JNIEnv.NewArray (DataOut);
			IntPtr native_KsnOut = JNIEnv.NewArray (KsnOut);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [7];
				__args [0] = new JniArgumentValue (GroupIdx);
				__args [1] = new JniArgumentValue (KeyVarType);
				__args [2] = new JniArgumentValue (native_KpucIV);
				__args [3] = new JniArgumentValue (native_DataIn);
				__args [4] = new JniArgumentValue (Mode);
				__args [5] = new JniArgumentValue (native_DataOut);
				__args [6] = new JniArgumentValue (native_KsnOut);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (KpucIV != null) {
					JNIEnv.CopyArray (native_KpucIV, KpucIV);
					JNIEnv.DeleteLocalRef (native_KpucIV);
				}
				if (DataIn != null) {
					JNIEnv.CopyArray (native_DataIn, DataIn);
					JNIEnv.DeleteLocalRef (native_DataIn);
				}
				if (DataOut != null) {
					JNIEnv.CopyArray (native_DataOut, DataOut);
					JNIEnv.DeleteLocalRef (native_DataOut);
				}
				if (KsnOut != null) {
					JNIEnv.CopyArray (native_KsnOut, KsnOut);
					JNIEnv.DeleteLocalRef (native_KsnOut);
				}
				global::System.GC.KeepAlive (KpucIV);
				global::System.GC.KeepAlive (DataIn);
				global::System.GC.KeepAlive (DataOut);
				global::System.GC.KeepAlive (KsnOut);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PedApi']/method[@name='PedDukptIncreaseKsn_Api' and count(parameter)=1 and parameter[1][@type='byte']]"
		[Register ("PedDukptIncreaseKsn_Api", "(B)I", "")]
		public static unsafe int PedDukptIncreaseKsn_Api (sbyte GroupIdx)
		{
			const string __id = "PedDukptIncreaseKsn_Api.(B)I";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (GroupIdx);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PedApi']/method[@name='PedDukptWriteTIK_Api' and count(parameter)=7 and parameter[1][@type='byte'] and parameter[2][@type='byte'] and parameter[3][@type='byte'] and parameter[4][@type='byte[]'] and parameter[5][@type='byte[]'] and parameter[6][@type='byte'] and parameter[7][@type='byte[]']]"
		[Register ("PedDukptWriteTIK_Api", "(BBB[B[BB[B)I", "")]
		public static unsafe int PedDukptWriteTIK_Api (sbyte GroupIdx, sbyte SrcKeyIdx, sbyte KeyLen, byte[]? KeyValueIn, byte[]? KsnIn, sbyte iCheckMode, byte[]? aucCheckBuf)
		{
			const string __id = "PedDukptWriteTIK_Api.(BBB[B[BB[B)I";
			IntPtr native_KeyValueIn = JNIEnv.NewArray (KeyValueIn);
			IntPtr native_KsnIn = JNIEnv.NewArray (KsnIn);
			IntPtr native_aucCheckBuf = JNIEnv.NewArray (aucCheckBuf);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [7];
				__args [0] = new JniArgumentValue (GroupIdx);
				__args [1] = new JniArgumentValue (SrcKeyIdx);
				__args [2] = new JniArgumentValue (KeyLen);
				__args [3] = new JniArgumentValue (native_KeyValueIn);
				__args [4] = new JniArgumentValue (native_KsnIn);
				__args [5] = new JniArgumentValue (iCheckMode);
				__args [6] = new JniArgumentValue (native_aucCheckBuf);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (KeyValueIn != null) {
					JNIEnv.CopyArray (native_KeyValueIn, KeyValueIn);
					JNIEnv.DeleteLocalRef (native_KeyValueIn);
				}
				if (KsnIn != null) {
					JNIEnv.CopyArray (native_KsnIn, KsnIn);
					JNIEnv.DeleteLocalRef (native_KsnIn);
				}
				if (aucCheckBuf != null) {
					JNIEnv.CopyArray (native_aucCheckBuf, aucCheckBuf);
					JNIEnv.DeleteLocalRef (native_aucCheckBuf);
				}
				global::System.GC.KeepAlive (KeyValueIn);
				global::System.GC.KeepAlive (KsnIn);
				global::System.GC.KeepAlive (aucCheckBuf);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PedApi']/method[@name='PedErase' and count(parameter)=0]"
		[global::System.Obsolete (@"deprecated")]
		[Register ("PedErase", "()Z", "")]
		public static unsafe bool PedErase ()
		{
			const string __id = "PedErase.()Z";
			try {
				var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, null);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PedApi']/method[@name='PedErase' and count(parameter)=2 and parameter[1][@type='int'] and parameter[2][@type='int']]"
		[global::System.Obsolete (@"deprecated")]
		[Register ("PedErase", "(II)Z", "")]
		public static unsafe bool PedErase (int KeyType, int index)
		{
			const string __id = "PedErase.(II)Z";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (KeyType);
				__args [1] = new JniArgumentValue (index);
				var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, __args);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PedApi']/method[@name='PedErase_Api' and count(parameter)=0]"
		[Register ("PedErase_Api", "()Z", "")]
		public static unsafe bool PedErase_Api ()
		{
			const string __id = "PedErase_Api.()Z";
			try {
				var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, null);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PedApi']/method[@name='PedErase_Api' and count(parameter)=2 and parameter[1][@type='int'] and parameter[2][@type='int']]"
		[Register ("PedErase_Api", "(II)Z", "")]
		public static unsafe bool PedErase_Api (int KeyType, int index)
		{
			const string __id = "PedErase_Api.(II)Z";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (KeyType);
				__args [1] = new JniArgumentValue (index);
				var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, __args);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PedApi']/method[@name='PedGetDukptKSN_Api' and count(parameter)=2 and parameter[1][@type='byte'] and parameter[2][@type='byte[]']]"
		[Register ("PedGetDukptKSN_Api", "(B[B)I", "")]
		public static unsafe int PedGetDukptKSN_Api (sbyte GroupIdx, byte[]? KsnOut)
		{
			const string __id = "PedGetDukptKSN_Api.(B[B)I";
			IntPtr native_KsnOut = JNIEnv.NewArray (KsnOut);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (GroupIdx);
				__args [1] = new JniArgumentValue (native_KsnOut);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (KsnOut != null) {
					JNIEnv.CopyArray (native_KsnOut, KsnOut);
					JNIEnv.DeleteLocalRef (native_KsnOut);
				}
				global::System.GC.KeepAlive (KsnOut);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PedApi']/method[@name='PedGetMacDukpt_Api' and count(parameter)=7 and parameter[1][@type='byte'] and parameter[2][@type='byte'] and parameter[3][@type='byte[]'] and parameter[4][@type='int'] and parameter[5][@type='byte[]'] and parameter[6][@type='byte[]'] and parameter[7][@type='byte']]"
		[Register ("PedGetMacDukpt_Api", "(BB[BI[B[BB)I", "")]
		public static unsafe int PedGetMacDukpt_Api (sbyte GroupIdx, sbyte Increase, byte[]? DataIn, int DataInLen, byte[]? MacOut, byte[]? KsnOut, sbyte Mode)
		{
			const string __id = "PedGetMacDukpt_Api.(BB[BI[B[BB)I";
			IntPtr native_DataIn = JNIEnv.NewArray (DataIn);
			IntPtr native_MacOut = JNIEnv.NewArray (MacOut);
			IntPtr native_KsnOut = JNIEnv.NewArray (KsnOut);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [7];
				__args [0] = new JniArgumentValue (GroupIdx);
				__args [1] = new JniArgumentValue (Increase);
				__args [2] = new JniArgumentValue (native_DataIn);
				__args [3] = new JniArgumentValue (DataInLen);
				__args [4] = new JniArgumentValue (native_MacOut);
				__args [5] = new JniArgumentValue (native_KsnOut);
				__args [6] = new JniArgumentValue (Mode);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (DataIn != null) {
					JNIEnv.CopyArray (native_DataIn, DataIn);
					JNIEnv.DeleteLocalRef (native_DataIn);
				}
				if (MacOut != null) {
					JNIEnv.CopyArray (native_MacOut, MacOut);
					JNIEnv.DeleteLocalRef (native_MacOut);
				}
				if (KsnOut != null) {
					JNIEnv.CopyArray (native_KsnOut, KsnOut);
					JNIEnv.DeleteLocalRef (native_KsnOut);
				}
				global::System.GC.KeepAlive (DataIn);
				global::System.GC.KeepAlive (MacOut);
				global::System.GC.KeepAlive (KsnOut);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PedApi']/method[@name='PedSelectPlace_Api' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
		[Register ("PedSelectPlace_Api", "(Ljava/lang/String;)I", "")]
		public static unsafe int PedSelectPlace_Api (string? Place)
		{
			const string __id = "PedSelectPlace_Api.(Ljava/lang/String;)I";
			IntPtr native_Place = JNIEnv.NewString ((string?)Place);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_Place);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				JNIEnv.DeleteLocalRef (native_Place);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PedApi']/method[@name='PedSubmit' and count(parameter)=1 and parameter[1][@type='com.vanstone.page.widget.body.custom.IKeyBoard']]"
		[Register ("PedSubmit", "(Lcom/vanstone/page/widget/body/custom/IKeyBoard;)V", "")]
		public static unsafe void PedSubmit (global::Com.Vanstone.Page.Widget.Body.Custom.IKeyBoard? board)
		{
			const string __id = "PedSubmit.(Lcom/vanstone/page/widget/body/custom/IKeyBoard;)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue ((board == null) ? IntPtr.Zero : ((global::Java.Lang.Object) board).Handle);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				global::System.GC.KeepAlive (board);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PedApi']/method[@name='SetMkeyIndex_Api' and count(parameter)=1 and parameter[1][@type='int']]"
		[global::System.Obsolete (@"deprecated")]
		[Register ("SetMkeyIndex_Api", "(I)V", "")]
		public static unsafe void SetMkeyIndex_Api (int MkeyIndex)
		{
			const string __id = "SetMkeyIndex_Api.(I)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (MkeyIndex);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PedApi']/method[@name='TR31_WriteKey_Api' and count(parameter)=4 and parameter[1][@type='int'] and parameter[2][@type='byte[]'] and parameter[3][@type='byte[]'] and parameter[4][@type='byte[]']]"
		[Register ("TR31_WriteKey_Api", "(I[B[B[B)I", "")]
		public static unsafe int TR31_WriteKey_Api (int mkindex, byte[]? KBPK, byte[]? TR31data, byte[]? head)
		{
			const string __id = "TR31_WriteKey_Api.(I[B[B[B)I";
			IntPtr native_KBPK = JNIEnv.NewArray (KBPK);
			IntPtr native_TR31data = JNIEnv.NewArray (TR31data);
			IntPtr native_head = JNIEnv.NewArray (head);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [4];
				__args [0] = new JniArgumentValue (mkindex);
				__args [1] = new JniArgumentValue (native_KBPK);
				__args [2] = new JniArgumentValue (native_TR31data);
				__args [3] = new JniArgumentValue (native_head);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (KBPK != null) {
					JNIEnv.CopyArray (native_KBPK, KBPK);
					JNIEnv.DeleteLocalRef (native_KBPK);
				}
				if (TR31data != null) {
					JNIEnv.CopyArray (native_TR31data, TR31data);
					JNIEnv.DeleteLocalRef (native_TR31data);
				}
				if (head != null) {
					JNIEnv.CopyArray (native_head, head);
					JNIEnv.DeleteLocalRef (native_head);
				}
				global::System.GC.KeepAlive (KBPK);
				global::System.GC.KeepAlive (TR31data);
				global::System.GC.KeepAlive (head);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PedApi']/method[@name='WirteMkeyFY_Api' and count(parameter)=7 and parameter[1][@type='byte[]'] and parameter[2][@type='int'] and parameter[3][@type='byte[]'] and parameter[4][@type='int'] and parameter[5][@type='byte[]'] and parameter[6][@type='int'] and parameter[7][@type='int']]"
		[Register ("WirteMkeyFY_Api", "([BI[BI[BII)I", "")]
		public static unsafe int WirteMkeyFY_Api (byte[]? p0, int p1, byte[]? p2, int p3, byte[]? p4, int p5, int p6)
		{
			const string __id = "WirteMkeyFY_Api.([BI[BI[BII)I";
			IntPtr native_p0 = JNIEnv.NewArray (p0);
			IntPtr native_p2 = JNIEnv.NewArray (p2);
			IntPtr native_p4 = JNIEnv.NewArray (p4);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [7];
				__args [0] = new JniArgumentValue (native_p0);
				__args [1] = new JniArgumentValue (p1);
				__args [2] = new JniArgumentValue (native_p2);
				__args [3] = new JniArgumentValue (p3);
				__args [4] = new JniArgumentValue (native_p4);
				__args [5] = new JniArgumentValue (p5);
				__args [6] = new JniArgumentValue (p6);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (p0 != null) {
					JNIEnv.CopyArray (native_p0, p0);
					JNIEnv.DeleteLocalRef (native_p0);
				}
				if (p2 != null) {
					JNIEnv.CopyArray (native_p2, p2);
					JNIEnv.DeleteLocalRef (native_p2);
				}
				if (p4 != null) {
					JNIEnv.CopyArray (native_p4, p4);
					JNIEnv.DeleteLocalRef (native_p4);
				}
				global::System.GC.KeepAlive (p0);
				global::System.GC.KeepAlive (p2);
				global::System.GC.KeepAlive (p4);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PedApi']/method[@name='calAes_Api' and count(parameter)=7 and parameter[1][@type='int'] and parameter[2][@type='int'] and parameter[3][@type='byte[]'] and parameter[4][@type='int'] and parameter[5][@type='byte[]'] and parameter[6][@type='int'] and parameter[7][@type='byte[]']]"
		[Register ("calAes_Api", "(II[BI[BI[B)I", "")]
		public static unsafe int CalAes_Api (int KeyIndex, int Mode, byte[]? ivIn, int ivLen, byte[]? DataIn, int DataInLen, byte[]? DataOut)
		{
			const string __id = "calAes_Api.(II[BI[BI[B)I";
			IntPtr native_ivIn = JNIEnv.NewArray (ivIn);
			IntPtr native_DataIn = JNIEnv.NewArray (DataIn);
			IntPtr native_DataOut = JNIEnv.NewArray (DataOut);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [7];
				__args [0] = new JniArgumentValue (KeyIndex);
				__args [1] = new JniArgumentValue (Mode);
				__args [2] = new JniArgumentValue (native_ivIn);
				__args [3] = new JniArgumentValue (ivLen);
				__args [4] = new JniArgumentValue (native_DataIn);
				__args [5] = new JniArgumentValue (DataInLen);
				__args [6] = new JniArgumentValue (native_DataOut);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (ivIn != null) {
					JNIEnv.CopyArray (native_ivIn, ivIn);
					JNIEnv.DeleteLocalRef (native_ivIn);
				}
				if (DataIn != null) {
					JNIEnv.CopyArray (native_DataIn, DataIn);
					JNIEnv.DeleteLocalRef (native_DataIn);
				}
				if (DataOut != null) {
					JNIEnv.CopyArray (native_DataOut, DataOut);
					JNIEnv.DeleteLocalRef (native_DataOut);
				}
				global::System.GC.KeepAlive (ivIn);
				global::System.GC.KeepAlive (DataIn);
				global::System.GC.KeepAlive (DataOut);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PedApi']/method[@name='calcAesDukpt' and count(parameter)=8 and parameter[1][@type='byte'] and parameter[2][@type='byte'] and parameter[3][@type='byte[]'] and parameter[4][@type='int'] and parameter[5][@type='byte[]'] and parameter[6][@type='byte'] and parameter[7][@type='byte[]'] and parameter[8][@type='byte[]']]"
		[Register ("calcAesDukpt", "(BB[BI[BB[B[B)I", "")]
		public static unsafe int CalcAesDukpt (sbyte groupIdx, sbyte keyVarType, byte[]? pucIV, int dataInLen, byte[]? dataIn, sbyte mode, byte[]? ksnOut, byte[]? dataOut)
		{
			const string __id = "calcAesDukpt.(BB[BI[BB[B[B)I";
			IntPtr native_pucIV = JNIEnv.NewArray (pucIV);
			IntPtr native_dataIn = JNIEnv.NewArray (dataIn);
			IntPtr native_ksnOut = JNIEnv.NewArray (ksnOut);
			IntPtr native_dataOut = JNIEnv.NewArray (dataOut);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [8];
				__args [0] = new JniArgumentValue (groupIdx);
				__args [1] = new JniArgumentValue (keyVarType);
				__args [2] = new JniArgumentValue (native_pucIV);
				__args [3] = new JniArgumentValue (dataInLen);
				__args [4] = new JniArgumentValue (native_dataIn);
				__args [5] = new JniArgumentValue (mode);
				__args [6] = new JniArgumentValue (native_ksnOut);
				__args [7] = new JniArgumentValue (native_dataOut);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (pucIV != null) {
					JNIEnv.CopyArray (native_pucIV, pucIV);
					JNIEnv.DeleteLocalRef (native_pucIV);
				}
				if (dataIn != null) {
					JNIEnv.CopyArray (native_dataIn, dataIn);
					JNIEnv.DeleteLocalRef (native_dataIn);
				}
				if (ksnOut != null) {
					JNIEnv.CopyArray (native_ksnOut, ksnOut);
					JNIEnv.DeleteLocalRef (native_ksnOut);
				}
				if (dataOut != null) {
					JNIEnv.CopyArray (native_dataOut, dataOut);
					JNIEnv.DeleteLocalRef (native_dataOut);
				}
				global::System.GC.KeepAlive (pucIV);
				global::System.GC.KeepAlive (dataIn);
				global::System.GC.KeepAlive (ksnOut);
				global::System.GC.KeepAlive (dataOut);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PedApi']/method[@name='calcRSAEx_Api' and count(parameter)=5 and parameter[1][@type='int'] and parameter[2][@type='int'] and parameter[3][@type='byte[]'] and parameter[4][@type='byte[]'] and parameter[5][@type='byte[]']]"
		[Register ("calcRSAEx_Api", "(II[B[B[B)I", "")]
		public static unsafe int CalcRSAEx_Api (int RSAKeyIndex, int pucDataInLen, byte[]? pucDataIn, byte[]? pucDataOut, byte[]? pucKeyInfoOut)
		{
			const string __id = "calcRSAEx_Api.(II[B[B[B)I";
			IntPtr native_pucDataIn = JNIEnv.NewArray (pucDataIn);
			IntPtr native_pucDataOut = JNIEnv.NewArray (pucDataOut);
			IntPtr native_pucKeyInfoOut = JNIEnv.NewArray (pucKeyInfoOut);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [5];
				__args [0] = new JniArgumentValue (RSAKeyIndex);
				__args [1] = new JniArgumentValue (pucDataInLen);
				__args [2] = new JniArgumentValue (native_pucDataIn);
				__args [3] = new JniArgumentValue (native_pucDataOut);
				__args [4] = new JniArgumentValue (native_pucKeyInfoOut);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (pucDataIn != null) {
					JNIEnv.CopyArray (native_pucDataIn, pucDataIn);
					JNIEnv.DeleteLocalRef (native_pucDataIn);
				}
				if (pucDataOut != null) {
					JNIEnv.CopyArray (native_pucDataOut, pucDataOut);
					JNIEnv.DeleteLocalRef (native_pucDataOut);
				}
				if (pucKeyInfoOut != null) {
					JNIEnv.CopyArray (native_pucKeyInfoOut, pucKeyInfoOut);
					JNIEnv.DeleteLocalRef (native_pucKeyInfoOut);
				}
				global::System.GC.KeepAlive (pucDataIn);
				global::System.GC.KeepAlive (pucDataOut);
				global::System.GC.KeepAlive (pucKeyInfoOut);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PedApi']/method[@name='calcRSAPri_Api' and count(parameter)=5 and parameter[1][@type='int'] and parameter[2][@type='int'] and parameter[3][@type='int'] and parameter[4][@type='byte[]'] and parameter[5][@type='byte[]']]"
		[Register ("calcRSAPri_Api", "(III[B[B)I", "")]
		public static unsafe int CalcRSAPri_Api (int mode, int privateKeyIndex, int pucDataInLen, byte[]? pucDataIn, byte[]? pucDataOut)
		{
			const string __id = "calcRSAPri_Api.(III[B[B)I";
			IntPtr native_pucDataIn = JNIEnv.NewArray (pucDataIn);
			IntPtr native_pucDataOut = JNIEnv.NewArray (pucDataOut);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [5];
				__args [0] = new JniArgumentValue (mode);
				__args [1] = new JniArgumentValue (privateKeyIndex);
				__args [2] = new JniArgumentValue (pucDataInLen);
				__args [3] = new JniArgumentValue (native_pucDataIn);
				__args [4] = new JniArgumentValue (native_pucDataOut);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (pucDataIn != null) {
					JNIEnv.CopyArray (native_pucDataIn, pucDataIn);
					JNIEnv.DeleteLocalRef (native_pucDataIn);
				}
				if (pucDataOut != null) {
					JNIEnv.CopyArray (native_pucDataOut, pucDataOut);
					JNIEnv.DeleteLocalRef (native_pucDataOut);
				}
				global::System.GC.KeepAlive (pucDataIn);
				global::System.GC.KeepAlive (pucDataOut);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PedApi']/method[@name='calcRSAPub_Api' and count(parameter)=5 and parameter[1][@type='int'] and parameter[2][@type='int'] and parameter[3][@type='int'] and parameter[4][@type='byte[]'] and parameter[5][@type='byte[]']]"
		[Register ("calcRSAPub_Api", "(III[B[B)I", "")]
		public static unsafe int CalcRSAPub_Api (int mode, int publicKeyIndex, int pucDataInLen, byte[]? pucDataIn, byte[]? pucDataOut)
		{
			const string __id = "calcRSAPub_Api.(III[B[B)I";
			IntPtr native_pucDataIn = JNIEnv.NewArray (pucDataIn);
			IntPtr native_pucDataOut = JNIEnv.NewArray (pucDataOut);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [5];
				__args [0] = new JniArgumentValue (mode);
				__args [1] = new JniArgumentValue (publicKeyIndex);
				__args [2] = new JniArgumentValue (pucDataInLen);
				__args [3] = new JniArgumentValue (native_pucDataIn);
				__args [4] = new JniArgumentValue (native_pucDataOut);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (pucDataIn != null) {
					JNIEnv.CopyArray (native_pucDataIn, pucDataIn);
					JNIEnv.DeleteLocalRef (native_pucDataIn);
				}
				if (pucDataOut != null) {
					JNIEnv.CopyArray (native_pucDataOut, pucDataOut);
					JNIEnv.DeleteLocalRef (native_pucDataOut);
				}
				global::System.GC.KeepAlive (pucDataIn);
				global::System.GC.KeepAlive (pucDataOut);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PedApi']/method[@name='calcRSA_Api' and count(parameter)=4 and parameter[1][@type='byte'] and parameter[2][@type='byte[]'] and parameter[3][@type='byte[]'] and parameter[4][@type='byte[]']]"
		[global::System.Obsolete (@"deprecated")]
		[Register ("calcRSA_Api", "(B[B[B[B)I", "")]
		public static unsafe int CalcRSA_Api (sbyte RSAKeyIndex, byte[]? pucDataIn, byte[]? pucDataOut, byte[]? pucKeyInfoOut)
		{
			const string __id = "calcRSA_Api.(B[B[B[B)I";
			IntPtr native_pucDataIn = JNIEnv.NewArray (pucDataIn);
			IntPtr native_pucDataOut = JNIEnv.NewArray (pucDataOut);
			IntPtr native_pucKeyInfoOut = JNIEnv.NewArray (pucKeyInfoOut);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [4];
				__args [0] = new JniArgumentValue (RSAKeyIndex);
				__args [1] = new JniArgumentValue (native_pucDataIn);
				__args [2] = new JniArgumentValue (native_pucDataOut);
				__args [3] = new JniArgumentValue (native_pucKeyInfoOut);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (pucDataIn != null) {
					JNIEnv.CopyArray (native_pucDataIn, pucDataIn);
					JNIEnv.DeleteLocalRef (native_pucDataIn);
				}
				if (pucDataOut != null) {
					JNIEnv.CopyArray (native_pucDataOut, pucDataOut);
					JNIEnv.DeleteLocalRef (native_pucDataOut);
				}
				if (pucKeyInfoOut != null) {
					JNIEnv.CopyArray (native_pucKeyInfoOut, pucKeyInfoOut);
					JNIEnv.DeleteLocalRef (native_pucKeyInfoOut);
				}
				global::System.GC.KeepAlive (pucDataIn);
				global::System.GC.KeepAlive (pucDataOut);
				global::System.GC.KeepAlive (pucKeyInfoOut);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PedApi']/method[@name='getAesDukptKsn' and count(parameter)=2 and parameter[1][@type='byte'] and parameter[2][@type='byte[]']]"
		[Register ("getAesDukptKsn", "(B[B)I", "")]
		public static unsafe int GetAesDukptKsn (sbyte groupIdx, byte[]? ksnOut)
		{
			const string __id = "getAesDukptKsn.(B[B)I";
			IntPtr native_ksnOut = JNIEnv.NewArray (ksnOut);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (groupIdx);
				__args [1] = new JniArgumentValue (native_ksnOut);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (ksnOut != null) {
					JNIEnv.CopyArray (native_ksnOut, ksnOut);
					JNIEnv.DeleteLocalRef (native_ksnOut);
				}
				global::System.GC.KeepAlive (ksnOut);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PedApi']/method[@name='getFyTransKey_Api' and count(parameter)=1 and parameter[1][@type='byte[]']]"
		[global::System.Obsolete (@"deprecated")]
		[Register ("getFyTransKey_Api", "([B)I", "")]
		public static unsafe int GetFyTransKey_Api (byte[]? @out)
		{
			const string __id = "getFyTransKey_Api.([B)I";
			IntPtr native__out = JNIEnv.NewArray (@out);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native__out);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (@out != null) {
					JNIEnv.CopyArray (native__out, @out);
					JNIEnv.DeleteLocalRef (native__out);
				}
				global::System.GC.KeepAlive (@out);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PedApi']/method[@name='getMacAesDukpt' and count(parameter)=6 and parameter[1][@type='byte'] and parameter[2][@type='int'] and parameter[3][@type='byte'] and parameter[4][@type='byte[]'] and parameter[5][@type='byte[]'] and parameter[6][@type='byte[]']]"
		[Register ("getMacAesDukpt", "(BIB[B[B[B)I", "")]
		public static unsafe int GetMacAesDukpt (sbyte groupIdx, int dataInLen, sbyte mode, byte[]? dataIn, byte[]? ksnOut, byte[]? macOut)
		{
			const string __id = "getMacAesDukpt.(BIB[B[B[B)I";
			IntPtr native_dataIn = JNIEnv.NewArray (dataIn);
			IntPtr native_ksnOut = JNIEnv.NewArray (ksnOut);
			IntPtr native_macOut = JNIEnv.NewArray (macOut);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [6];
				__args [0] = new JniArgumentValue (groupIdx);
				__args [1] = new JniArgumentValue (dataInLen);
				__args [2] = new JniArgumentValue (mode);
				__args [3] = new JniArgumentValue (native_dataIn);
				__args [4] = new JniArgumentValue (native_ksnOut);
				__args [5] = new JniArgumentValue (native_macOut);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (dataIn != null) {
					JNIEnv.CopyArray (native_dataIn, dataIn);
					JNIEnv.DeleteLocalRef (native_dataIn);
				}
				if (ksnOut != null) {
					JNIEnv.CopyArray (native_ksnOut, ksnOut);
					JNIEnv.DeleteLocalRef (native_ksnOut);
				}
				if (macOut != null) {
					JNIEnv.CopyArray (native_macOut, macOut);
					JNIEnv.DeleteLocalRef (native_macOut);
				}
				global::System.GC.KeepAlive (dataIn);
				global::System.GC.KeepAlive (ksnOut);
				global::System.GC.KeepAlive (macOut);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PedApi']/method[@name='getPinAESDukptEx' and count(parameter)=7 and parameter[1][@type='byte'] and parameter[2][@type='byte'] and parameter[3][@type='byte'] and parameter[4][@type='byte[]'] and parameter[5][@type='byte[]'] and parameter[6][@type='byte[]'] and parameter[7][@type='byte[]']]"
		[Register ("getPinAESDukptEx", "(BBB[B[B[B[B)I", "")]
		public static unsafe int GetPinAESDukptEx (sbyte groupIdx, sbyte mode, sbyte pinLen, byte[]? plainPin, byte[]? dataIn, byte[]? ksnOut, byte[]? pinBlock)
		{
			const string __id = "getPinAESDukptEx.(BBB[B[B[B[B)I";
			IntPtr native_plainPin = JNIEnv.NewArray (plainPin);
			IntPtr native_dataIn = JNIEnv.NewArray (dataIn);
			IntPtr native_ksnOut = JNIEnv.NewArray (ksnOut);
			IntPtr native_pinBlock = JNIEnv.NewArray (pinBlock);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [7];
				__args [0] = new JniArgumentValue (groupIdx);
				__args [1] = new JniArgumentValue (mode);
				__args [2] = new JniArgumentValue (pinLen);
				__args [3] = new JniArgumentValue (native_plainPin);
				__args [4] = new JniArgumentValue (native_dataIn);
				__args [5] = new JniArgumentValue (native_ksnOut);
				__args [6] = new JniArgumentValue (native_pinBlock);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (plainPin != null) {
					JNIEnv.CopyArray (native_plainPin, plainPin);
					JNIEnv.DeleteLocalRef (native_plainPin);
				}
				if (dataIn != null) {
					JNIEnv.CopyArray (native_dataIn, dataIn);
					JNIEnv.DeleteLocalRef (native_dataIn);
				}
				if (ksnOut != null) {
					JNIEnv.CopyArray (native_ksnOut, ksnOut);
					JNIEnv.DeleteLocalRef (native_ksnOut);
				}
				if (pinBlock != null) {
					JNIEnv.CopyArray (native_pinBlock, pinBlock);
					JNIEnv.DeleteLocalRef (native_pinBlock);
				}
				global::System.GC.KeepAlive (plainPin);
				global::System.GC.KeepAlive (dataIn);
				global::System.GC.KeepAlive (ksnOut);
				global::System.GC.KeepAlive (pinBlock);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PedApi']/method[@name='getPinDukptEx_Api' and count(parameter)=6 and parameter[1][@type='byte'] and parameter[2][@type='byte'] and parameter[3][@type='java.lang.String'] and parameter[4][@type='java.lang.String'] and parameter[5][@type='byte[]'] and parameter[6][@type='byte[]']]"
		[Register ("getPinDukptEx_Api", "(BBLjava/lang/String;Ljava/lang/String;[B[B)I", "")]
		public static unsafe int GetPinDukptEx_Api (sbyte GroupIdx, sbyte mode, string? pin, string? data, byte[]? pinBlockOut, byte[]? ksnOut)
		{
			const string __id = "getPinDukptEx_Api.(BBLjava/lang/String;Ljava/lang/String;[B[B)I";
			IntPtr native_pin = JNIEnv.NewString ((string?)pin);
			IntPtr native_data = JNIEnv.NewString ((string?)data);
			IntPtr native_pinBlockOut = JNIEnv.NewArray (pinBlockOut);
			IntPtr native_ksnOut = JNIEnv.NewArray (ksnOut);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [6];
				__args [0] = new JniArgumentValue (GroupIdx);
				__args [1] = new JniArgumentValue (mode);
				__args [2] = new JniArgumentValue (native_pin);
				__args [3] = new JniArgumentValue (native_data);
				__args [4] = new JniArgumentValue (native_pinBlockOut);
				__args [5] = new JniArgumentValue (native_ksnOut);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				JNIEnv.DeleteLocalRef (native_pin);
				JNIEnv.DeleteLocalRef (native_data);
				if (pinBlockOut != null) {
					JNIEnv.CopyArray (native_pinBlockOut, pinBlockOut);
					JNIEnv.DeleteLocalRef (native_pinBlockOut);
				}
				if (ksnOut != null) {
					JNIEnv.CopyArray (native_ksnOut, ksnOut);
					JNIEnv.DeleteLocalRef (native_ksnOut);
				}
				global::System.GC.KeepAlive (pinBlockOut);
				global::System.GC.KeepAlive (ksnOut);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PedApi']/method[@name='getRSAKeyPair_Api' and count(parameter)=4 and parameter[1][@type='int'] and parameter[2][@type='int'] and parameter[3][@type='int'] and parameter[4][@type='byte[]']]"
		[Register ("getRSAKeyPair_Api", "(III[B)I", "")]
		public static unsafe int GetRSAKeyPair_Api (int publicKeyIndex, int privateKeyIndex, int keyModulusLen, byte[]? publicModulusData)
		{
			const string __id = "getRSAKeyPair_Api.(III[B)I";
			IntPtr native_publicModulusData = JNIEnv.NewArray (publicModulusData);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [4];
				__args [0] = new JniArgumentValue (publicKeyIndex);
				__args [1] = new JniArgumentValue (privateKeyIndex);
				__args [2] = new JniArgumentValue (keyModulusLen);
				__args [3] = new JniArgumentValue (native_publicModulusData);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (publicModulusData != null) {
					JNIEnv.CopyArray (native_publicModulusData, publicModulusData);
					JNIEnv.DeleteLocalRef (native_publicModulusData);
				}
				global::System.GC.KeepAlive (publicModulusData);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PedApi']/method[@name='getgHdOrSoft' and count(parameter)=0]"
		[Register ("getgHdOrSoft", "()I", "")]
		public static unsafe int GetgHdOrSoft ()
		{
			const string __id = "getgHdOrSoft.()I";
			try {
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, null);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PedApi']/method[@name='isKeyExist' and count(parameter)=2 and parameter[1][@type='int'] and parameter[2][@type='int']]"
		[global::System.Obsolete (@"deprecated")]
		[Register ("isKeyExist", "(II)Z", "")]
		public static unsafe bool IsKeyExist (int keyType, int keyIndex)
		{
			const string __id = "isKeyExist.(II)Z";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (keyType);
				__args [1] = new JniArgumentValue (keyIndex);
				var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, __args);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PedApi']/method[@name='isKeyExist_Api' and count(parameter)=2 and parameter[1][@type='int'] and parameter[2][@type='int']]"
		[Register ("isKeyExist_Api", "(II)Z", "")]
		public static unsafe bool IsKeyExist_Api (int keyType, int keyIndex)
		{
			const string __id = "isKeyExist_Api.(II)Z";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (keyType);
				__args [1] = new JniArgumentValue (keyIndex);
				var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, __args);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PedApi']/method[@name='setAmountColor' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
		[Register ("setAmountColor", "(Ljava/lang/String;)V", "")]
		public static unsafe void SetAmountColor (string? amountColor)
		{
			const string __id = "setAmountColor.(Ljava/lang/String;)V";
			IntPtr native_amountColor = JNIEnv.NewString ((string?)amountColor);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_amountColor);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				JNIEnv.DeleteLocalRef (native_amountColor);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PedApi']/method[@name='setAmountFont' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
		[Register ("setAmountFont", "(Ljava/lang/String;)V", "")]
		public static unsafe void SetAmountFont (string? amountFont)
		{
			const string __id = "setAmountFont.(Ljava/lang/String;)V";
			IntPtr native_amountFont = JNIEnv.NewString ((string?)amountFont);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_amountFont);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				JNIEnv.DeleteLocalRef (native_amountFont);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PedApi']/method[@name='setAmountSize' and count(parameter)=1 and parameter[1][@type='float']]"
		[Register ("setAmountSize", "(F)V", "")]
		public static unsafe void SetAmountSize (float amountSize)
		{
			const string __id = "setAmountSize.(F)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (amountSize);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PedApi']/method[@name='setBottomBtnText' and count(parameter)=1 and parameter[1][@type='java.lang.String[]']]"
		[Register ("setBottomBtnText", "([Ljava/lang/String;)V", "")]
		public static unsafe void SetBottomBtnText (string[]? array)
		{
			const string __id = "setBottomBtnText.([Ljava/lang/String;)V";
			IntPtr native_array = JNIEnv.NewArray (array);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_array);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				if (array != null) {
					JNIEnv.CopyArray (native_array, array);
					JNIEnv.DeleteLocalRef (native_array);
				}
				global::System.GC.KeepAlive (array);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PedApi']/method[@name='setBottomFont' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
		[Register ("setBottomFont", "(Ljava/lang/String;)V", "")]
		public static unsafe void SetBottomFont (string? bottomFont)
		{
			const string __id = "setBottomFont.(Ljava/lang/String;)V";
			IntPtr native_bottomFont = JNIEnv.NewString ((string?)bottomFont);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_bottomFont);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				JNIEnv.DeleteLocalRef (native_bottomFont);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PedApi']/method[@name='setBottomTextColor' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
		[Register ("setBottomTextColor", "(Ljava/lang/String;)V", "")]
		public static unsafe void SetBottomTextColor (string? bottomTextColor)
		{
			const string __id = "setBottomTextColor.(Ljava/lang/String;)V";
			IntPtr native_bottomTextColor = JNIEnv.NewString ((string?)bottomTextColor);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_bottomTextColor);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				JNIEnv.DeleteLocalRef (native_bottomTextColor);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PedApi']/method[@name='setBottomTextSize' and count(parameter)=1 and parameter[1][@type='float']]"
		[Register ("setBottomTextSize", "(F)V", "")]
		public static unsafe void SetBottomTextSize (float bottomTextSize)
		{
			const string __id = "setBottomTextSize.(F)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (bottomTextSize);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PedApi']/method[@name='setCardNo' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
		[global::System.Obsolete (@"deprecated")]
		[Register ("setCardNo", "(Ljava/lang/String;)V", "")]
		public static unsafe void SetCardNo (string? cardNo)
		{
			const string __id = "setCardNo.(Ljava/lang/String;)V";
			IntPtr native_cardNo = JNIEnv.NewString ((string?)cardNo);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_cardNo);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				JNIEnv.DeleteLocalRef (native_cardNo);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PedApi']/method[@name='setCardNo_Api' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
		[Register ("setCardNo_Api", "(Ljava/lang/String;)V", "")]
		public static unsafe void SetCardNo_Api (string? cardNo)
		{
			const string __id = "setCardNo_Api.(Ljava/lang/String;)V";
			IntPtr native_cardNo = JNIEnv.NewString ((string?)cardNo);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_cardNo);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				JNIEnv.DeleteLocalRef (native_cardNo);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PedApi']/method[@name='setNumColor' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
		[Register ("setNumColor", "(Ljava/lang/String;)V", "")]
		public static unsafe void SetNumColor (string? numColor)
		{
			const string __id = "setNumColor.(Ljava/lang/String;)V";
			IntPtr native_numColor = JNIEnv.NewString ((string?)numColor);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_numColor);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				JNIEnv.DeleteLocalRef (native_numColor);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PedApi']/method[@name='setNumFont' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
		[Register ("setNumFont", "(Ljava/lang/String;)V", "")]
		public static unsafe void SetNumFont (string? numFont)
		{
			const string __id = "setNumFont.(Ljava/lang/String;)V";
			IntPtr native_numFont = JNIEnv.NewString ((string?)numFont);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_numFont);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				JNIEnv.DeleteLocalRef (native_numFont);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PedApi']/method[@name='setNumSize' and count(parameter)=1 and parameter[1][@type='float']]"
		[Register ("setNumSize", "(F)V", "")]
		public static unsafe void SetNumSize (float numSize)
		{
			const string __id = "setNumSize.(F)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (numSize);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PedApi']/method[@name='setPinBoardFixed' and count(parameter)=1 and parameter[1][@type='boolean']]"
		[Register ("setPinBoardFixed", "(Z)V", "")]
		public static unsafe void SetPinBoardFixed (bool @fixed)
		{
			const string __id = "setPinBoardFixed.(Z)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (@fixed);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PedApi']/method[@name='setPinBoardKey_Api' and count(parameter)=1 and parameter[1][@type='android.os.Bundle']]"
		[Register ("setPinBoardKey_Api", "(Landroid/os/Bundle;)V", "")]
		public static unsafe void SetPinBoardKey_Api (global::Android.OS.Bundle? bundle)
		{
			const string __id = "setPinBoardKey_Api.(Landroid/os/Bundle;)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue ((bundle == null) ? IntPtr.Zero : ((global::Java.Lang.Object) bundle).Handle);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				global::System.GC.KeepAlive (bundle);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PedApi']/method[@name='setPinBoardMsg' and count(parameter)=1 and parameter[1][@type='android.os.Bundle']]"
		[Register ("setPinBoardMsg", "(Landroid/os/Bundle;)V", "")]
		public static unsafe void SetPinBoardMsg (global::Android.OS.Bundle? bundle)
		{
			const string __id = "setPinBoardMsg.(Landroid/os/Bundle;)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue ((bundle == null) ? IntPtr.Zero : ((global::Java.Lang.Object) bundle).Handle);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				global::System.GC.KeepAlive (bundle);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PedApi']/method[@name='setPinBoardSetting' and count(parameter)=1 and parameter[1][@type='android.os.Bundle']]"
		[Register ("setPinBoardSetting", "(Landroid/os/Bundle;)V", "")]
		public static unsafe void SetPinBoardSetting (global::Android.OS.Bundle? bundle)
		{
			const string __id = "setPinBoardSetting.(Landroid/os/Bundle;)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue ((bundle == null) ? IntPtr.Zero : ((global::Java.Lang.Object) bundle).Handle);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				global::System.GC.KeepAlive (bundle);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PedApi']/method[@name='setStatusbarColor' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
		[Register ("setStatusbarColor", "(Ljava/lang/String;)V", "")]
		public static unsafe void SetStatusbarColor (string? statusbarColor)
		{
			const string __id = "setStatusbarColor.(Ljava/lang/String;)V";
			IntPtr native_statusbarColor = JNIEnv.NewString ((string?)statusbarColor);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_statusbarColor);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				JNIEnv.DeleteLocalRef (native_statusbarColor);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PedApi']/method[@name='setStatusbarHide' and count(parameter)=1 and parameter[1][@type='boolean']]"
		[Register ("setStatusbarHide", "(Z)V", "")]
		public static unsafe void SetStatusbarHide (bool isHide)
		{
			const string __id = "setStatusbarHide.(Z)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (isHide);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PedApi']/method[@name='setTextColor' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
		[Register ("setTextColor", "(Ljava/lang/String;)V", "")]
		public static unsafe void SetTextColor (string? textColor)
		{
			const string __id = "setTextColor.(Ljava/lang/String;)V";
			IntPtr native_textColor = JNIEnv.NewString ((string?)textColor);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_textColor);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				JNIEnv.DeleteLocalRef (native_textColor);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PedApi']/method[@name='setTextFont' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
		[Register ("setTextFont", "(Ljava/lang/String;)V", "")]
		public static unsafe void SetTextFont (string? textFont)
		{
			const string __id = "setTextFont.(Ljava/lang/String;)V";
			IntPtr native_textFont = JNIEnv.NewString ((string?)textFont);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_textFont);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				JNIEnv.DeleteLocalRef (native_textFont);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PedApi']/method[@name='setTextSize' and count(parameter)=1 and parameter[1][@type='float']]"
		[Register ("setTextSize", "(F)V", "")]
		public static unsafe void SetTextSize (float textSize)
		{
			const string __id = "setTextSize.(F)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (textSize);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PedApi']/method[@name='setTitleBackGroundColor' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
		[global::System.Obsolete (@"deprecated")]
		[Register ("setTitleBackGroundColor", "(Ljava/lang/String;)V", "")]
		public static unsafe void SetTitleBackGroundColor (string? titleBackGroundColor)
		{
			const string __id = "setTitleBackGroundColor.(Ljava/lang/String;)V";
			IntPtr native_titleBackGroundColor = JNIEnv.NewString ((string?)titleBackGroundColor);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_titleBackGroundColor);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				JNIEnv.DeleteLocalRef (native_titleBackGroundColor);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PedApi']/method[@name='writeAesKey' and count(parameter)=9 and parameter[1][@type='byte'] and parameter[2][@type='int'] and parameter[3][@type='byte'] and parameter[4][@type='int'] and parameter[5][@type='byte'] and parameter[6][@type='byte[]'] and parameter[7][@type='byte'] and parameter[8][@type='byte'] and parameter[9][@type='byte[]']]"
		[Register ("writeAesKey", "(BIBIB[BBB[B)I", "")]
		public static unsafe int WriteAesKey (sbyte ucSrcKeyType, int ucSrcKeyIdx, sbyte ucDstKeyType, int ucDstKeyIdx, sbyte iDstKeyLen, byte[]? aucDstKeyValue, sbyte ucMode, sbyte iCheckMode, byte[]? aucCheckBuf)
		{
			const string __id = "writeAesKey.(BIBIB[BBB[B)I";
			IntPtr native_aucDstKeyValue = JNIEnv.NewArray (aucDstKeyValue);
			IntPtr native_aucCheckBuf = JNIEnv.NewArray (aucCheckBuf);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [9];
				__args [0] = new JniArgumentValue (ucSrcKeyType);
				__args [1] = new JniArgumentValue (ucSrcKeyIdx);
				__args [2] = new JniArgumentValue (ucDstKeyType);
				__args [3] = new JniArgumentValue (ucDstKeyIdx);
				__args [4] = new JniArgumentValue (iDstKeyLen);
				__args [5] = new JniArgumentValue (native_aucDstKeyValue);
				__args [6] = new JniArgumentValue (ucMode);
				__args [7] = new JniArgumentValue (iCheckMode);
				__args [8] = new JniArgumentValue (native_aucCheckBuf);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (aucDstKeyValue != null) {
					JNIEnv.CopyArray (native_aucDstKeyValue, aucDstKeyValue);
					JNIEnv.DeleteLocalRef (native_aucDstKeyValue);
				}
				if (aucCheckBuf != null) {
					JNIEnv.CopyArray (native_aucCheckBuf, aucCheckBuf);
					JNIEnv.DeleteLocalRef (native_aucCheckBuf);
				}
				global::System.GC.KeepAlive (aucDstKeyValue);
				global::System.GC.KeepAlive (aucCheckBuf);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PedApi']/method[@name='writeAesTik' and count(parameter)=8 and parameter[1][@type='byte'] and parameter[2][@type='byte'] and parameter[3][@type='byte'] and parameter[4][@type='byte[]'] and parameter[5][@type='byte[]'] and parameter[6][@type='byte'] and parameter[7][@type='byte'] and parameter[8][@type='byte[]']]"
		[Register ("writeAesTik", "(BBB[B[BBB[B)I", "")]
		public static unsafe int WriteAesTik (sbyte groupIdx, sbyte srcKeyIdx, sbyte keyLen, byte[]? keyValueIn, byte[]? ksnIn, sbyte ucMode, sbyte iCheckMode, byte[]? aucCheckBuf)
		{
			const string __id = "writeAesTik.(BBB[B[BBB[B)I";
			IntPtr native_keyValueIn = JNIEnv.NewArray (keyValueIn);
			IntPtr native_ksnIn = JNIEnv.NewArray (ksnIn);
			IntPtr native_aucCheckBuf = JNIEnv.NewArray (aucCheckBuf);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [8];
				__args [0] = new JniArgumentValue (groupIdx);
				__args [1] = new JniArgumentValue (srcKeyIdx);
				__args [2] = new JniArgumentValue (keyLen);
				__args [3] = new JniArgumentValue (native_keyValueIn);
				__args [4] = new JniArgumentValue (native_ksnIn);
				__args [5] = new JniArgumentValue (ucMode);
				__args [6] = new JniArgumentValue (iCheckMode);
				__args [7] = new JniArgumentValue (native_aucCheckBuf);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (keyValueIn != null) {
					JNIEnv.CopyArray (native_keyValueIn, keyValueIn);
					JNIEnv.DeleteLocalRef (native_keyValueIn);
				}
				if (ksnIn != null) {
					JNIEnv.CopyArray (native_ksnIn, ksnIn);
					JNIEnv.DeleteLocalRef (native_ksnIn);
				}
				if (aucCheckBuf != null) {
					JNIEnv.CopyArray (native_aucCheckBuf, aucCheckBuf);
					JNIEnv.DeleteLocalRef (native_aucCheckBuf);
				}
				global::System.GC.KeepAlive (keyValueIn);
				global::System.GC.KeepAlive (ksnIn);
				global::System.GC.KeepAlive (aucCheckBuf);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PedApi']/method[@name='writeDerivedKey' and count(parameter)=4 and parameter[1][@type='int'] and parameter[2][@type='int'] and parameter[3][@type='byte[]'] and parameter[4][@type='int']]"
		[Register ("writeDerivedKey", "(II[BI)I", "")]
		public static unsafe int WriteDerivedKey (int workKeyIndex, int randomKeyIndex, byte[]? randomData, int randomDataLen)
		{
			const string __id = "writeDerivedKey.(II[BI)I";
			IntPtr native_randomData = JNIEnv.NewArray (randomData);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [4];
				__args [0] = new JniArgumentValue (workKeyIndex);
				__args [1] = new JniArgumentValue (randomKeyIndex);
				__args [2] = new JniArgumentValue (native_randomData);
				__args [3] = new JniArgumentValue (randomDataLen);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (randomData != null) {
					JNIEnv.CopyArray (native_randomData, randomData);
					JNIEnv.DeleteLocalRef (native_randomData);
				}
				global::System.GC.KeepAlive (randomData);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PedApi']/method[@name='writeRSAKeyEx_Api' and count(parameter)=6 and parameter[1][@type='int'] and parameter[2][@type='int'] and parameter[3][@type='byte[]'] and parameter[4][@type='int'] and parameter[5][@type='byte[]'] and parameter[6][@type='byte[]']]"
		[Register ("writeRSAKeyEx_Api", "(II[BI[B[B)I", "")]
		public static unsafe int WriteRSAKeyEx_Api (int RSAKeyIndex, int iModulusLen, byte[]? aucModulus, int iExponentLen, byte[]? aucExponent, byte[]? aucKeyInfo)
		{
			const string __id = "writeRSAKeyEx_Api.(II[BI[B[B)I";
			IntPtr native_aucModulus = JNIEnv.NewArray (aucModulus);
			IntPtr native_aucExponent = JNIEnv.NewArray (aucExponent);
			IntPtr native_aucKeyInfo = JNIEnv.NewArray (aucKeyInfo);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [6];
				__args [0] = new JniArgumentValue (RSAKeyIndex);
				__args [1] = new JniArgumentValue (iModulusLen);
				__args [2] = new JniArgumentValue (native_aucModulus);
				__args [3] = new JniArgumentValue (iExponentLen);
				__args [4] = new JniArgumentValue (native_aucExponent);
				__args [5] = new JniArgumentValue (native_aucKeyInfo);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (aucModulus != null) {
					JNIEnv.CopyArray (native_aucModulus, aucModulus);
					JNIEnv.DeleteLocalRef (native_aucModulus);
				}
				if (aucExponent != null) {
					JNIEnv.CopyArray (native_aucExponent, aucExponent);
					JNIEnv.DeleteLocalRef (native_aucExponent);
				}
				if (aucKeyInfo != null) {
					JNIEnv.CopyArray (native_aucKeyInfo, aucKeyInfo);
					JNIEnv.DeleteLocalRef (native_aucKeyInfo);
				}
				global::System.GC.KeepAlive (aucModulus);
				global::System.GC.KeepAlive (aucExponent);
				global::System.GC.KeepAlive (aucKeyInfo);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PedApi']/method[@name='writeRSAKey_Api' and count(parameter)=2 and parameter[1][@type='byte'] and parameter[2][@type='byte[]']]"
		[global::System.Obsolete (@"deprecated")]
		[Register ("writeRSAKey_Api", "(B[B)I", "")]
		public static unsafe int WriteRSAKey_Api (sbyte RSAKeyIndex, byte[]? pstRsakeyIn)
		{
			const string __id = "writeRSAKey_Api.(B[B)I";
			IntPtr native_pstRsakeyIn = JNIEnv.NewArray (pstRsakeyIn);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (RSAKeyIndex);
				__args [1] = new JniArgumentValue (native_pstRsakeyIn);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (pstRsakeyIn != null) {
					JNIEnv.CopyArray (native_pstRsakeyIn, pstRsakeyIn);
					JNIEnv.DeleteLocalRef (native_pstRsakeyIn);
				}
				global::System.GC.KeepAlive (pstRsakeyIn);
			}
		}

	}
}
