//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable restore
using System;
using System.Collections.Generic;
using Android.Runtime;
using Java.Interop;

namespace Com.Vanstone.Utils {

	// Metadata.xml XPath class reference: path="/api/package[@name='com.vanstone.utils']/class[@name='StringUtils']"
	[global::Android.Runtime.Register ("com/vanstone/utils/StringUtils", DoNotGenerateAcw=true)]
	public partial class StringUtils : global::Java.Lang.Object {
		static readonly JniPeerMembers _members = new XAPeerMembers ("com/vanstone/utils/StringUtils", typeof (StringUtils));

		internal static IntPtr class_ref {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		public override global::Java.Interop.JniPeerMembers JniPeerMembers {
			get { return _members; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override IntPtr ThresholdClass {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override global::System.Type ThresholdType {
			get { return _members.ManagedPeerType; }
		}

		protected StringUtils (IntPtr javaReference, JniHandleOwnership transfer) : base (javaReference, transfer)
		{
		}

		// Metadata.xml XPath constructor reference: path="/api/package[@name='com.vanstone.utils']/class[@name='StringUtils']/constructor[@name='StringUtils' and count(parameter)=0]"
		[Register (".ctor", "()V", "")]
		public unsafe StringUtils () : base (IntPtr.Zero, JniHandleOwnership.DoNotTransfer)
		{
			const string __id = "()V";

			if (((global::Java.Lang.Object) this).Handle != IntPtr.Zero)
				return;

			try {
				var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), null);
				SetHandle (__r.Handle, JniHandleOwnership.TransferLocalRef);
				_members.InstanceMethods.FinishCreateInstance (__id, this, null);
			} finally {
			}
		}

		public static unsafe string? Null {
			// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='StringUtils']/method[@name='getNull' and count(parameter)=0]"
			[Register ("getNull", "()Ljava/lang/String;", "")]
			get {
				const string __id = "getNull.()Ljava/lang/String;";
				try {
					var __rm = _members.StaticMethods.InvokeObjectMethod (__id, null);
					return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
				} finally {
				}
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='StringUtils']/method[@name='FillStr' and count(parameter)=3 and parameter[1][@type='int'] and parameter[2][@type='char'] and parameter[3][@type='int']]"
		[Register ("FillStr", "(ICI)Ljava/lang/String;", "")]
		public static unsafe string? FillStr (int desc, char ch, int len)
		{
			const string __id = "FillStr.(ICI)Ljava/lang/String;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (desc);
				__args [1] = new JniArgumentValue (ch);
				__args [2] = new JniArgumentValue (len);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='StringUtils']/method[@name='FillStr' and count(parameter)=4 and parameter[1][@type='int'] and parameter[2][@type='char'] and parameter[3][@type='int'] and parameter[4][@type='int']]"
		[Register ("FillStr", "(ICII)Ljava/lang/String;", "")]
		public static unsafe string? FillStr (int desc, char ch, int len, int direction)
		{
			const string __id = "FillStr.(ICII)Ljava/lang/String;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [4];
				__args [0] = new JniArgumentValue (desc);
				__args [1] = new JniArgumentValue (ch);
				__args [2] = new JniArgumentValue (len);
				__args [3] = new JniArgumentValue (direction);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='StringUtils']/method[@name='FillStr' and count(parameter)=3 and parameter[1][@type='java.lang.String'] and parameter[2][@type='char'] and parameter[3][@type='int']]"
		[Register ("FillStr", "(Ljava/lang/String;CI)Ljava/lang/String;", "")]
		public static unsafe string? FillStr (string? desc, char ch, int len)
		{
			const string __id = "FillStr.(Ljava/lang/String;CI)Ljava/lang/String;";
			IntPtr native_desc = JNIEnv.NewString ((string?)desc);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (native_desc);
				__args [1] = new JniArgumentValue (ch);
				__args [2] = new JniArgumentValue (len);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				JNIEnv.DeleteLocalRef (native_desc);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='StringUtils']/method[@name='FillStr' and count(parameter)=4 and parameter[1][@type='java.lang.String'] and parameter[2][@type='char'] and parameter[3][@type='int'] and parameter[4][@type='int']]"
		[Register ("FillStr", "(Ljava/lang/String;CII)Ljava/lang/String;", "")]
		public static unsafe string? FillStr (string? desc, char ch, int len, int direction)
		{
			const string __id = "FillStr.(Ljava/lang/String;CII)Ljava/lang/String;";
			IntPtr native_desc = JNIEnv.NewString ((string?)desc);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [4];
				__args [0] = new JniArgumentValue (native_desc);
				__args [1] = new JniArgumentValue (ch);
				__args [2] = new JniArgumentValue (len);
				__args [3] = new JniArgumentValue (direction);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				JNIEnv.DeleteLocalRef (native_desc);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='StringUtils']/method[@name='FillStr' and count(parameter)=5 and parameter[1][@type='java.lang.String'] and parameter[2][@type='char'] and parameter[3][@type='int'] and parameter[4][@type='int'] and parameter[5][@type='int']]"
		[Register ("FillStr", "(Ljava/lang/String;CIII)Ljava/lang/String;", "")]
		public static unsafe string? FillStr (string? desc, char ch, int len, int direction, int mode)
		{
			const string __id = "FillStr.(Ljava/lang/String;CIII)Ljava/lang/String;";
			IntPtr native_desc = JNIEnv.NewString ((string?)desc);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [5];
				__args [0] = new JniArgumentValue (native_desc);
				__args [1] = new JniArgumentValue (ch);
				__args [2] = new JniArgumentValue (len);
				__args [3] = new JniArgumentValue (direction);
				__args [4] = new JniArgumentValue (mode);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				JNIEnv.DeleteLocalRef (native_desc);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='StringUtils']/method[@name='containsSeparator' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
		[Register ("containsSeparator", "(Ljava/lang/String;)Z", "")]
		public static unsafe bool ContainsSeparator (string? path)
		{
			const string __id = "containsSeparator.(Ljava/lang/String;)Z";
			IntPtr native_path = JNIEnv.NewString ((string?)path);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_path);
				var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, __args);
				return __rm;
			} finally {
				JNIEnv.DeleteLocalRef (native_path);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='StringUtils']/method[@name='getCanonicalPath' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
		[Register ("getCanonicalPath", "(Ljava/lang/String;)Ljava/lang/String;", "")]
		public static unsafe string? GetCanonicalPath (string? folderPath)
		{
			const string __id = "getCanonicalPath.(Ljava/lang/String;)Ljava/lang/String;";
			IntPtr native_folderPath = JNIEnv.NewString ((string?)folderPath);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_folderPath);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				JNIEnv.DeleteLocalRef (native_folderPath);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='StringUtils']/method[@name='getFirstLine' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
		[Register ("getFirstLine", "(Ljava/lang/String;)Ljava/lang/String;", "")]
		public static unsafe string? GetFirstLine (string? @string)
		{
			const string __id = "getFirstLine.(Ljava/lang/String;)Ljava/lang/String;";
			IntPtr native__string = JNIEnv.NewString ((string?)@string);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native__string);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				JNIEnv.DeleteLocalRef (native__string);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='StringUtils']/method[@name='getFirstLine' and count(parameter)=2 and parameter[1][@type='java.lang.String'] and parameter[2][@type='int']]"
		[Register ("getFirstLine", "(Ljava/lang/String;I)Ljava/lang/String;", "")]
		public static unsafe string? GetFirstLine (string? @string, int maxlength)
		{
			const string __id = "getFirstLine.(Ljava/lang/String;I)Ljava/lang/String;";
			IntPtr native__string = JNIEnv.NewString ((string?)@string);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native__string);
				__args [1] = new JniArgumentValue (maxlength);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				JNIEnv.DeleteLocalRef (native__string);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='StringUtils']/method[@name='getNumber' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
		[Register ("getNumber", "(Ljava/lang/String;)Ljava/lang/String;", "")]
		public static unsafe string? GetNumber (string? data)
		{
			const string __id = "getNumber.(Ljava/lang/String;)Ljava/lang/String;";
			IntPtr native_data = JNIEnv.NewString ((string?)data);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_data);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				JNIEnv.DeleteLocalRef (native_data);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='StringUtils']/method[@name='hexDump' and count(parameter)=1 and parameter[1][@type='byte']]"
		[Register ("hexDump", "(B)Ljava/lang/String;", "")]
		public static unsafe string? HexDump (sbyte b)
		{
			const string __id = "hexDump.(B)Ljava/lang/String;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (b);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='StringUtils']/method[@name='hexDump' and count(parameter)=1 and parameter[1][@type='byte[]']]"
		[Register ("hexDump", "([B)Ljava/lang/String;", "")]
		public static unsafe string? HexDump (byte[]? bytes)
		{
			const string __id = "hexDump.([B)Ljava/lang/String;";
			IntPtr native_bytes = JNIEnv.NewArray (bytes);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_bytes);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				if (bytes != null) {
					JNIEnv.CopyArray (native_bytes, bytes);
					JNIEnv.DeleteLocalRef (native_bytes);
				}
				global::System.GC.KeepAlive (bytes);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='StringUtils']/method[@name='hexDump' and count(parameter)=3 and parameter[1][@type='byte[]'] and parameter[2][@type='int'] and parameter[3][@type='int']]"
		[Register ("hexDump", "([BII)Ljava/lang/String;", "")]
		public static unsafe string? HexDump (byte[]? bytes, int offset, int len)
		{
			const string __id = "hexDump.([BII)Ljava/lang/String;";
			IntPtr native_bytes = JNIEnv.NewArray (bytes);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (native_bytes);
				__args [1] = new JniArgumentValue (offset);
				__args [2] = new JniArgumentValue (len);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				if (bytes != null) {
					JNIEnv.CopyArray (native_bytes, bytes);
					JNIEnv.DeleteLocalRef (native_bytes);
				}
				global::System.GC.KeepAlive (bytes);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='StringUtils']/method[@name='isChineseChar' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
		[Register ("isChineseChar", "(Ljava/lang/String;)Z", "")]
		public static unsafe bool IsChineseChar (string? str)
		{
			const string __id = "isChineseChar.(Ljava/lang/String;)Z";
			IntPtr native_str = JNIEnv.NewString ((string?)str);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_str);
				var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, __args);
				return __rm;
			} finally {
				JNIEnv.DeleteLocalRef (native_str);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='StringUtils']/method[@name='isNum' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
		[Register ("isNum", "(Ljava/lang/String;)I", "")]
		public static unsafe int IsNum (string? str)
		{
			const string __id = "isNum.(Ljava/lang/String;)I";
			IntPtr native_str = JNIEnv.NewString ((string?)str);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_str);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				JNIEnv.DeleteLocalRef (native_str);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='StringUtils']/method[@name='replace' and count(parameter)=3 and parameter[1][@type='java.lang.String'] and parameter[2][@type='java.lang.String'] and parameter[3][@type='java.lang.String']]"
		[Register ("replace", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;", "")]
		public static unsafe string? Replace (string? data, string? target, string? replacement)
		{
			const string __id = "replace.(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;";
			IntPtr native_data = JNIEnv.NewString ((string?)data);
			IntPtr native_target = JNIEnv.NewString ((string?)target);
			IntPtr native_replacement = JNIEnv.NewString ((string?)replacement);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (native_data);
				__args [1] = new JniArgumentValue (native_target);
				__args [2] = new JniArgumentValue (native_replacement);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				JNIEnv.DeleteLocalRef (native_data);
				JNIEnv.DeleteLocalRef (native_target);
				JNIEnv.DeleteLocalRef (native_replacement);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='StringUtils']/method[@name='trim' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
		[Register ("trim", "(Ljava/lang/String;)Ljava/lang/String;", "")]
		public static unsafe string? Trim (string? str)
		{
			const string __id = "trim.(Ljava/lang/String;)Ljava/lang/String;";
			IntPtr native_str = JNIEnv.NewString ((string?)str);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_str);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				JNIEnv.DeleteLocalRef (native_str);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='StringUtils']/method[@name='trim' and count(parameter)=2 and parameter[1][@type='java.lang.String'] and parameter[2][@type='char']]"
		[Register ("trim", "(Ljava/lang/String;C)Ljava/lang/String;", "")]
		public static unsafe string? Trim (string? str, char ch)
		{
			const string __id = "trim.(Ljava/lang/String;C)Ljava/lang/String;";
			IntPtr native_str = JNIEnv.NewString ((string?)str);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_str);
				__args [1] = new JniArgumentValue (ch);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				JNIEnv.DeleteLocalRef (native_str);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='StringUtils']/method[@name='trimLeft' and count(parameter)=2 and parameter[1][@type='java.lang.String'] and parameter[2][@type='char']]"
		[Register ("trimLeft", "(Ljava/lang/String;C)Ljava/lang/String;", "")]
		public static unsafe string? TrimLeft (string? str, char ch)
		{
			const string __id = "trimLeft.(Ljava/lang/String;C)Ljava/lang/String;";
			IntPtr native_str = JNIEnv.NewString ((string?)str);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_str);
				__args [1] = new JniArgumentValue (ch);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				JNIEnv.DeleteLocalRef (native_str);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='StringUtils']/method[@name='trimRight' and count(parameter)=2 and parameter[1][@type='java.lang.String'] and parameter[2][@type='char']]"
		[Register ("trimRight", "(Ljava/lang/String;C)Ljava/lang/String;", "")]
		public static unsafe string? TrimRight (string? str, char ch)
		{
			const string __id = "trimRight.(Ljava/lang/String;C)Ljava/lang/String;";
			IntPtr native_str = JNIEnv.NewString ((string?)str);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_str);
				__args [1] = new JniArgumentValue (ch);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				JNIEnv.DeleteLocalRef (native_str);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='StringUtils']/method[@name='trimToEmpty' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
		[Register ("trimToEmpty", "(Ljava/lang/String;)Ljava/lang/String;", "")]
		public static unsafe string? TrimToEmpty (string? @string)
		{
			const string __id = "trimToEmpty.(Ljava/lang/String;)Ljava/lang/String;";
			IntPtr native__string = JNIEnv.NewString ((string?)@string);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native__string);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				JNIEnv.DeleteLocalRef (native__string);
			}
		}

	}
}
