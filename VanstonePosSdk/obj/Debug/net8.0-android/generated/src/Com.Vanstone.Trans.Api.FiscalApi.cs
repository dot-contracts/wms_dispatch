//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable restore
using System;
using System.Collections.Generic;
using Android.Runtime;
using Java.Interop;

namespace Com.Vanstone.Trans.Api {

	// Metadata.xml XPath class reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='FiscalApi']"
	[global::Android.Runtime.Register ("com/vanstone/trans/api/FiscalApi", DoNotGenerateAcw=true)]
	public partial class FiscalApi : global::Java.Lang.Object {
		static readonly JniPeerMembers _members = new XAPeerMembers ("com/vanstone/trans/api/FiscalApi", typeof (FiscalApi));

		internal static IntPtr class_ref {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		public override global::Java.Interop.JniPeerMembers JniPeerMembers {
			get { return _members; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override IntPtr ThresholdClass {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override global::System.Type ThresholdType {
			get { return _members.ManagedPeerType; }
		}

		protected FiscalApi (IntPtr javaReference, JniHandleOwnership transfer) : base (javaReference, transfer)
		{
		}

		// Metadata.xml XPath constructor reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='FiscalApi']/constructor[@name='FiscalApi' and count(parameter)=0]"
		[Register (".ctor", "()V", "")]
		public unsafe FiscalApi () : base (IntPtr.Zero, JniHandleOwnership.DoNotTransfer)
		{
			const string __id = "()V";

			if (((global::Java.Lang.Object) this).Handle != IntPtr.Zero)
				return;

			try {
				var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), null);
				SetHandle (__r.Handle, JniHandleOwnership.TransferLocalRef);
				_members.InstanceMethods.FinishCreateInstance (__id, this, null);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='FiscalApi']/method[@name='FiscalAuth_Api' and count(parameter)=0]"
		[Register ("FiscalAuth_Api", "()I", "")]
		public static unsafe int FiscalAuth_Api ()
		{
			const string __id = "FiscalAuth_Api.()I";
			try {
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, null);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='FiscalApi']/method[@name='FiscalBindServer_Api' and count(parameter)=0]"
		[Register ("FiscalBindServer_Api", "()I", "")]
		public static unsafe int FiscalBindServer_Api ()
		{
			const string __id = "FiscalBindServer_Api.()I";
			try {
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, null);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='FiscalApi']/method[@name='FiscalCloseDatabase_Api' and count(parameter)=0]"
		[Register ("FiscalCloseDatabase_Api", "()I", "")]
		public static unsafe int FiscalCloseDatabase_Api ()
		{
			const string __id = "FiscalCloseDatabase_Api.()I";
			try {
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, null);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='FiscalApi']/method[@name='FiscalDBRecordCheck_Api' and count(parameter)=0]"
		[Register ("FiscalDBRecordCheck_Api", "()I", "")]
		public static unsafe int FiscalDBRecordCheck_Api ()
		{
			const string __id = "FiscalDBRecordCheck_Api.()I";
			try {
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, null);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='FiscalApi']/method[@name='FiscalDBRecordClose_Api' and count(parameter)=0]"
		[Register ("FiscalDBRecordClose_Api", "()I", "")]
		public static unsafe int FiscalDBRecordClose_Api ()
		{
			const string __id = "FiscalDBRecordClose_Api.()I";
			try {
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, null);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='FiscalApi']/method[@name='FiscalDBRecordOpen_Api' and count(parameter)=0]"
		[Register ("FiscalDBRecordOpen_Api", "()I", "")]
		public static unsafe int FiscalDBRecordOpen_Api ()
		{
			const string __id = "FiscalDBRecordOpen_Api.()I";
			try {
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, null);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='FiscalApi']/method[@name='FiscalDBRecordRead_Api' and count(parameter)=4 and parameter[1][@type='int'] and parameter[2][@type='int[]'] and parameter[3][@type='byte[]'] and parameter[4][@type='int[]']]"
		[Register ("FiscalDBRecordRead_Api", "(I[I[B[I)I", "")]
		public static unsafe int FiscalDBRecordRead_Api (int index, int[]? lenOfPkey, byte[]? buf, int[]? lenOfBuf)
		{
			const string __id = "FiscalDBRecordRead_Api.(I[I[B[I)I";
			IntPtr native_lenOfPkey = JNIEnv.NewArray (lenOfPkey);
			IntPtr native_buf = JNIEnv.NewArray (buf);
			IntPtr native_lenOfBuf = JNIEnv.NewArray (lenOfBuf);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [4];
				__args [0] = new JniArgumentValue (index);
				__args [1] = new JniArgumentValue (native_lenOfPkey);
				__args [2] = new JniArgumentValue (native_buf);
				__args [3] = new JniArgumentValue (native_lenOfBuf);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (lenOfPkey != null) {
					JNIEnv.CopyArray (native_lenOfPkey, lenOfPkey);
					JNIEnv.DeleteLocalRef (native_lenOfPkey);
				}
				if (buf != null) {
					JNIEnv.CopyArray (native_buf, buf);
					JNIEnv.DeleteLocalRef (native_buf);
				}
				if (lenOfBuf != null) {
					JNIEnv.CopyArray (native_lenOfBuf, lenOfBuf);
					JNIEnv.DeleteLocalRef (native_lenOfBuf);
				}
				global::System.GC.KeepAlive (lenOfPkey);
				global::System.GC.KeepAlive (buf);
				global::System.GC.KeepAlive (lenOfBuf);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='FiscalApi']/method[@name='FiscalGetFreeDiskSpace_Api' and count(parameter)=0]"
		[Register ("FiscalGetFreeDiskSpace_Api", "()J", "")]
		public static unsafe long FiscalGetFreeDiskSpace_Api ()
		{
			const string __id = "FiscalGetFreeDiskSpace_Api.()J";
			try {
				var __rm = _members.StaticMethods.InvokeInt64Method (__id, null);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='FiscalApi']/method[@name='FiscalGetHdVersion_Api' and count(parameter)=1 and parameter[1][@type='byte[]']]"
		[Register ("FiscalGetHdVersion_Api", "([B)I", "")]
		public static unsafe int FiscalGetHdVersion_Api (byte[]? data)
		{
			const string __id = "FiscalGetHdVersion_Api.([B)I";
			IntPtr native_data = JNIEnv.NewArray (data);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_data);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (data != null) {
					JNIEnv.CopyArray (native_data, data);
					JNIEnv.DeleteLocalRef (native_data);
				}
				global::System.GC.KeepAlive (data);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='FiscalApi']/method[@name='FiscalGetIdkey_Api' and count(parameter)=2 and parameter[1][@type='long'] and parameter[2][@type='int']]"
		[Register ("FiscalGetIdkey_Api", "(JI)I", "")]
		public static unsafe int FiscalGetIdkey_Api (long datetime, int index)
		{
			const string __id = "FiscalGetIdkey_Api.(JI)I";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (datetime);
				__args [1] = new JniArgumentValue (index);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='FiscalApi']/method[@name='FiscalGetIds_Api' and count(parameter)=4 and parameter[1][@type='int'] and parameter[2][@type='int'] and parameter[3][@type='int'] and parameter[4][@type='byte[]']]"
		[Register ("FiscalGetIds_Api", "(III[B)I", "")]
		public static unsafe int FiscalGetIds_Api (int startid, int endid, int count, byte[]? data)
		{
			const string __id = "FiscalGetIds_Api.(III[B)I";
			IntPtr native_data = JNIEnv.NewArray (data);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [4];
				__args [0] = new JniArgumentValue (startid);
				__args [1] = new JniArgumentValue (endid);
				__args [2] = new JniArgumentValue (count);
				__args [3] = new JniArgumentValue (native_data);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (data != null) {
					JNIEnv.CopyArray (native_data, data);
					JNIEnv.DeleteLocalRef (native_data);
				}
				global::System.GC.KeepAlive (data);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='FiscalApi']/method[@name='FiscalGetSoftVersion_Api' and count(parameter)=1 and parameter[1][@type='byte[]']]"
		[Register ("FiscalGetSoftVersion_Api", "([B)I", "")]
		public static unsafe int FiscalGetSoftVersion_Api (byte[]? data)
		{
			const string __id = "FiscalGetSoftVersion_Api.([B)I";
			IntPtr native_data = JNIEnv.NewArray (data);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_data);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (data != null) {
					JNIEnv.CopyArray (native_data, data);
					JNIEnv.DeleteLocalRef (native_data);
				}
				global::System.GC.KeepAlive (data);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='FiscalApi']/method[@name='FiscalGetSysSN_Api' and count(parameter)=1 and parameter[1][@type='byte[]']]"
		[Register ("FiscalGetSysSN_Api", "([B)I", "")]
		public static unsafe int FiscalGetSysSN_Api (byte[]? sn)
		{
			const string __id = "FiscalGetSysSN_Api.([B)I";
			IntPtr native_sn = JNIEnv.NewArray (sn);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_sn);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (sn != null) {
					JNIEnv.CopyArray (native_sn, sn);
					JNIEnv.DeleteLocalRef (native_sn);
				}
				global::System.GC.KeepAlive (sn);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='FiscalApi']/method[@name='FiscalGetTotalRow_Api' and count(parameter)=0]"
		[Register ("FiscalGetTotalRow_Api", "()I", "")]
		public static unsafe int FiscalGetTotalRow_Api ()
		{
			const string __id = "FiscalGetTotalRow_Api.()I";
			try {
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, null);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='FiscalApi']/method[@name='FiscalOpenDatabase_Api' and count(parameter)=0]"
		[Register ("FiscalOpenDatabase_Api", "()I", "")]
		public static unsafe int FiscalOpenDatabase_Api ()
		{
			const string __id = "FiscalOpenDatabase_Api.()I";
			try {
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, null);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='FiscalApi']/method[@name='FiscalPowerOff_Api' and count(parameter)=0]"
		[Register ("FiscalPowerOff_Api", "()I", "")]
		public static unsafe int FiscalPowerOff_Api ()
		{
			const string __id = "FiscalPowerOff_Api.()I";
			try {
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, null);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='FiscalApi']/method[@name='FiscalPowerOn_Api' and count(parameter)=0]"
		[Register ("FiscalPowerOn_Api", "()I", "")]
		public static unsafe int FiscalPowerOn_Api ()
		{
			const string __id = "FiscalPowerOn_Api.()I";
			try {
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, null);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='FiscalApi']/method[@name='FiscalReadDataById_Api' and count(parameter)=2 and parameter[1][@type='int'] and parameter[2][@type='byte[]']]"
		[Register ("FiscalReadDataById_Api", "(I[B)I", "")]
		public static unsafe int FiscalReadDataById_Api (int index, byte[]? data)
		{
			const string __id = "FiscalReadDataById_Api.(I[B)I";
			IntPtr native_data = JNIEnv.NewArray (data);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (index);
				__args [1] = new JniArgumentValue (native_data);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (data != null) {
					JNIEnv.CopyArray (native_data, data);
					JNIEnv.DeleteLocalRef (native_data);
				}
				global::System.GC.KeepAlive (data);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='FiscalApi']/method[@name='FiscalReadWormFlashData_Api' and count(parameter)=3 and parameter[1][@type='long'] and parameter[2][@type='long'] and parameter[3][@type='java.lang.String']]"
		[Register ("FiscalReadWormFlashData_Api", "(JJLjava/lang/String;)Z", "")]
		public static unsafe bool FiscalReadWormFlashData_Api (long startdate, long enddate, string? filename)
		{
			const string __id = "FiscalReadWormFlashData_Api.(JJLjava/lang/String;)Z";
			IntPtr native_filename = JNIEnv.NewString ((string?)filename);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (startdate);
				__args [1] = new JniArgumentValue (enddate);
				__args [2] = new JniArgumentValue (native_filename);
				var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, __args);
				return __rm;
			} finally {
				JNIEnv.DeleteLocalRef (native_filename);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='FiscalApi']/method[@name='FiscalUpdateServer_Api' and count(parameter)=2 and parameter[1][@type='byte[]'] and parameter[2][@type='int']]"
		[Register ("FiscalUpdateServer_Api", "([BI)I", "")]
		public static unsafe int FiscalUpdateServer_Api (byte[]? filename, int filenamelength)
		{
			const string __id = "FiscalUpdateServer_Api.([BI)I";
			IntPtr native_filename = JNIEnv.NewArray (filename);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_filename);
				__args [1] = new JniArgumentValue (filenamelength);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (filename != null) {
					JNIEnv.CopyArray (native_filename, filename);
					JNIEnv.DeleteLocalRef (native_filename);
				}
				global::System.GC.KeepAlive (filename);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='FiscalApi']/method[@name='FiscalWriteDataById_Api' and count(parameter)=3 and parameter[1][@type='int'] and parameter[2][@type='byte[]'] and parameter[3][@type='long']]"
		[Register ("FiscalWriteDataById_Api", "(I[BJ)I", "")]
		public static unsafe int FiscalWriteDataById_Api (int index, byte[]? data, long datalength)
		{
			const string __id = "FiscalWriteDataById_Api.(I[BJ)I";
			IntPtr native_data = JNIEnv.NewArray (data);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (index);
				__args [1] = new JniArgumentValue (native_data);
				__args [2] = new JniArgumentValue (datalength);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (data != null) {
					JNIEnv.CopyArray (native_data, data);
					JNIEnv.DeleteLocalRef (native_data);
				}
				global::System.GC.KeepAlive (data);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='FiscalApi']/method[@name='FiscalWriteWormFlashData_Api' and count(parameter)=3 and parameter[1][@type='long'] and parameter[2][@type='byte[]'] and parameter[3][@type='long']]"
		[Register ("FiscalWriteWormFlashData_Api", "(J[BJ)J", "")]
		public static unsafe long FiscalWriteWormFlashData_Api (long datetime, byte[]? data, long datalength)
		{
			const string __id = "FiscalWriteWormFlashData_Api.(J[BJ)J";
			IntPtr native_data = JNIEnv.NewArray (data);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (datetime);
				__args [1] = new JniArgumentValue (native_data);
				__args [2] = new JniArgumentValue (datalength);
				var __rm = _members.StaticMethods.InvokeInt64Method (__id, __args);
				return __rm;
			} finally {
				if (data != null) {
					JNIEnv.CopyArray (native_data, data);
					JNIEnv.DeleteLocalRef (native_data);
				}
				global::System.GC.KeepAlive (data);
			}
		}

	}
}
