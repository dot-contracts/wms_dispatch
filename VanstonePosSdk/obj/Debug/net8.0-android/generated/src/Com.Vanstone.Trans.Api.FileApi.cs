//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable restore
using System;
using System.Collections.Generic;
using Android.Runtime;
using Java.Interop;

namespace Com.Vanstone.Trans.Api {

	// Metadata.xml XPath class reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='FileApi']"
	[global::Android.Runtime.Register ("com/vanstone/trans/api/FileApi", DoNotGenerateAcw=true)]
	public partial class FileApi : global::Java.Lang.Object {
		// Metadata.xml XPath field reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='FileApi']/field[@name='appShareFileName']"
		[Register ("appShareFileName")]
		public const string AppShareFileName = (string) "/mnt/sdcard/share/appShare.bin";


		// Metadata.xml XPath field reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='FileApi']/field[@name='mcontext']"
		[Register ("mcontext")]
		public static global::Android.Content.Context? Mcontext {
			get {
				const string __id = "mcontext.Landroid/content/Context;";

				var __v = _members.StaticFields.GetObjectValue (__id);
				return global::Java.Lang.Object.GetObject<global::Android.Content.Context> (__v.Handle, JniHandleOwnership.TransferLocalRef);
			}
			set {
				const string __id = "mcontext.Landroid/content/Context;";

				IntPtr native_value = global::Android.Runtime.JNIEnv.ToLocalJniHandle (value);
				try {
					_members.StaticFields.SetValue (__id, new JniObjectReference (native_value));
				} finally {
					global::Android.Runtime.JNIEnv.DeleteLocalRef (native_value);
				}
			}
		}

		static readonly JniPeerMembers _members = new XAPeerMembers ("com/vanstone/trans/api/FileApi", typeof (FileApi));

		internal static IntPtr class_ref {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		public override global::Java.Interop.JniPeerMembers JniPeerMembers {
			get { return _members; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override IntPtr ThresholdClass {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override global::System.Type ThresholdType {
			get { return _members.ManagedPeerType; }
		}

		protected FileApi (IntPtr javaReference, JniHandleOwnership transfer) : base (javaReference, transfer)
		{
		}

		// Metadata.xml XPath constructor reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='FileApi']/constructor[@name='FileApi' and count(parameter)=1 and parameter[1][@type='android.content.Context']]"
		[Register (".ctor", "(Landroid/content/Context;)V", "")]
		public unsafe FileApi (global::Android.Content.Context? mContext) : base (IntPtr.Zero, JniHandleOwnership.DoNotTransfer)
		{
			const string __id = "(Landroid/content/Context;)V";

			if (((global::Java.Lang.Object) this).Handle != IntPtr.Zero)
				return;

			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue ((mContext == null) ? IntPtr.Zero : ((global::Java.Lang.Object) mContext).Handle);
				var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), __args);
				SetHandle (__r.Handle, JniHandleOwnership.TransferLocalRef);
				_members.InstanceMethods.FinishCreateInstance (__id, this, __args);
			} finally {
				global::System.GC.KeepAlive (mContext);
			}
		}

		public static unsafe string? AppDataPath {
			// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='FileApi']/method[@name='getAppDataPath' and count(parameter)=0]"
			[Register ("getAppDataPath", "()Ljava/lang/String;", "")]
			get {
				const string __id = "getAppDataPath.()Ljava/lang/String;";
				try {
					var __rm = _members.StaticMethods.InvokeObjectMethod (__id, null);
					return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
				} finally {
				}
			}
		}

		public static unsafe string? AppDataPaths {
			// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='FileApi']/method[@name='getAppDataPaths' and count(parameter)=0]"
			[Register ("getAppDataPaths", "()Ljava/lang/String;", "")]
			get {
				const string __id = "getAppDataPaths.()Ljava/lang/String;";
				try {
					var __rm = _members.StaticMethods.InvokeObjectMethod (__id, null);
					return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
				} finally {
				}
			}
		}

		public static unsafe string? AppPath {
			// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='FileApi']/method[@name='getAppPath' and count(parameter)=0]"
			[Register ("getAppPath", "()Ljava/lang/String;", "")]
			get {
				const string __id = "getAppPath.()Ljava/lang/String;";
				try {
					var __rm = _members.StaticMethods.InvokeObjectMethod (__id, null);
					return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
				} finally {
				}
			}
		}

		public static unsafe string? FileNameEncoding {
			// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='FileApi']/method[@name='getFileNameEncoding' and count(parameter)=0]"
			[Register ("getFileNameEncoding", "()Ljava/lang/String;", "")]
			get {
				const string __id = "getFileNameEncoding.()Ljava/lang/String;";
				try {
					var __rm = _members.StaticMethods.InvokeObjectMethod (__id, null);
					return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
				} finally {
				}
			}
			// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='FileApi']/method[@name='setFileNameEncoding' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
			[Register ("setFileNameEncoding", "(Ljava/lang/String;)V", "")]
			set {
				const string __id = "setFileNameEncoding.(Ljava/lang/String;)V";
				IntPtr native_value = JNIEnv.NewString ((string?)value);
				try {
					JniArgumentValue* __args = stackalloc JniArgumentValue [1];
					__args [0] = new JniArgumentValue (native_value);
					_members.StaticMethods.InvokeVoidMethod (__id, __args);
				} finally {
					JNIEnv.DeleteLocalRef (native_value);
				}
			}
		}

		public static unsafe string? PublicPath {
			// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='FileApi']/method[@name='getPublicPath' and count(parameter)=0]"
			[Register ("getPublicPath", "()Ljava/lang/String;", "")]
			get {
				const string __id = "getPublicPath.()Ljava/lang/String;";
				try {
					var __rm = _members.StaticMethods.InvokeObjectMethod (__id, null);
					return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
				} finally {
				}
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='FileApi']/method[@name='ChangePrivateProfileSectionName_Api' and count(parameter)=3 and parameter[1][@type='java.lang.String'] and parameter[2][@type='java.lang.String'] and parameter[3][@type='java.lang.String']]"
		[Register ("ChangePrivateProfileSectionName_Api", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)I", "")]
		public static unsafe int ChangePrivateProfileSectionName_Api (string? lpOldAppName, string? lpNewAppName, string? lpFileName)
		{
			const string __id = "ChangePrivateProfileSectionName_Api.(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)I";
			IntPtr native_lpOldAppName = JNIEnv.NewString ((string?)lpOldAppName);
			IntPtr native_lpNewAppName = JNIEnv.NewString ((string?)lpNewAppName);
			IntPtr native_lpFileName = JNIEnv.NewString ((string?)lpFileName);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (native_lpOldAppName);
				__args [1] = new JniArgumentValue (native_lpNewAppName);
				__args [2] = new JniArgumentValue (native_lpFileName);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				JNIEnv.DeleteLocalRef (native_lpOldAppName);
				JNIEnv.DeleteLocalRef (native_lpNewAppName);
				JNIEnv.DeleteLocalRef (native_lpFileName);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='FileApi']/method[@name='CreateAppFolder' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
		[Register ("CreateAppFolder", "(Ljava/lang/String;)V", "")]
		public static unsafe void CreateAppFolder (string? FileName)
		{
			const string __id = "CreateAppFolder.(Ljava/lang/String;)V";
			IntPtr native_FileName = JNIEnv.NewString ((string?)FileName);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_FileName);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				JNIEnv.DeleteLocalRef (native_FileName);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='FileApi']/method[@name='DelFile_Api' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
		[Register ("DelFile_Api", "(Ljava/lang/String;)I", "")]
		public static unsafe int DelFile_Api (string? FileName)
		{
			const string __id = "DelFile_Api.(Ljava/lang/String;)I";
			IntPtr native_FileName = JNIEnv.NewString ((string?)FileName);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_FileName);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				JNIEnv.DeleteLocalRef (native_FileName);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='FileApi']/method[@name='DeleteDebug_Api' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
		[Register ("DeleteDebug_Api", "(Ljava/lang/String;)I", "")]
		public static unsafe int DeleteDebug_Api (string? fileName)
		{
			const string __id = "DeleteDebug_Api.(Ljava/lang/String;)I";
			IntPtr native_fileName = JNIEnv.NewString ((string?)fileName);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_fileName);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				JNIEnv.DeleteLocalRef (native_fileName);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='FileApi']/method[@name='FileCRC32' and count(parameter)=3 and parameter[1][@type='java.lang.String'] and parameter[2][@type='int'] and parameter[3][@type='byte[]']]"
		[Register ("FileCRC32", "(Ljava/lang/String;I[B)I", "")]
		public static unsafe int FileCRC32 (string? FileName, int len, byte[]? lCRC)
		{
			const string __id = "FileCRC32.(Ljava/lang/String;I[B)I";
			IntPtr native_FileName = JNIEnv.NewString ((string?)FileName);
			IntPtr native_lCRC = JNIEnv.NewArray (lCRC);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (native_FileName);
				__args [1] = new JniArgumentValue (len);
				__args [2] = new JniArgumentValue (native_lCRC);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				JNIEnv.DeleteLocalRef (native_FileName);
				if (lCRC != null) {
					JNIEnv.CopyArray (native_lCRC, lCRC);
					JNIEnv.DeleteLocalRef (native_lCRC);
				}
				global::System.GC.KeepAlive (lCRC);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='FileApi']/method[@name='GetFileSize_Api' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
		[Register ("GetFileSize_Api", "(Ljava/lang/String;)I", "")]
		public static unsafe int GetFileSize_Api (string? FileName)
		{
			const string __id = "GetFileSize_Api.(Ljava/lang/String;)I";
			IntPtr native_FileName = JNIEnv.NewString ((string?)FileName);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_FileName);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				JNIEnv.DeleteLocalRef (native_FileName);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='FileApi']/method[@name='GetPrivateProfileSection_Api' and count(parameter)=3 and parameter[1][@type='java.lang.String'] and parameter[2][@type='byte[]'] and parameter[3][@type='java.lang.String']]"
		[Register ("GetPrivateProfileSection_Api", "(Ljava/lang/String;[BLjava/lang/String;)I", "")]
		public static unsafe int GetPrivateProfileSection_Api (string? lpAppName, byte[]? lpReturnedString, string? lpFileName)
		{
			const string __id = "GetPrivateProfileSection_Api.(Ljava/lang/String;[BLjava/lang/String;)I";
			IntPtr native_lpAppName = JNIEnv.NewString ((string?)lpAppName);
			IntPtr native_lpReturnedString = JNIEnv.NewArray (lpReturnedString);
			IntPtr native_lpFileName = JNIEnv.NewString ((string?)lpFileName);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (native_lpAppName);
				__args [1] = new JniArgumentValue (native_lpReturnedString);
				__args [2] = new JniArgumentValue (native_lpFileName);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				JNIEnv.DeleteLocalRef (native_lpAppName);
				if (lpReturnedString != null) {
					JNIEnv.CopyArray (native_lpReturnedString, lpReturnedString);
					JNIEnv.DeleteLocalRef (native_lpReturnedString);
				}
				JNIEnv.DeleteLocalRef (native_lpFileName);
				global::System.GC.KeepAlive (lpReturnedString);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='FileApi']/method[@name='GetPrivateProfileString_Api' and count(parameter)=5 and parameter[1][@type='java.lang.String'] and parameter[2][@type='java.lang.String'] and parameter[3][@type='java.lang.String'] and parameter[4][@type='byte[]'] and parameter[5][@type='java.lang.String']]"
		[Register ("GetPrivateProfileString_Api", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;[BLjava/lang/String;)I", "")]
		public static unsafe int GetPrivateProfileString_Api (string? lpAppName, string? lpKeyName, string? lpDefault, byte[]? lpReturnedString, string? lpFileName)
		{
			const string __id = "GetPrivateProfileString_Api.(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;[BLjava/lang/String;)I";
			IntPtr native_lpAppName = JNIEnv.NewString ((string?)lpAppName);
			IntPtr native_lpKeyName = JNIEnv.NewString ((string?)lpKeyName);
			IntPtr native_lpDefault = JNIEnv.NewString ((string?)lpDefault);
			IntPtr native_lpReturnedString = JNIEnv.NewArray (lpReturnedString);
			IntPtr native_lpFileName = JNIEnv.NewString ((string?)lpFileName);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [5];
				__args [0] = new JniArgumentValue (native_lpAppName);
				__args [1] = new JniArgumentValue (native_lpKeyName);
				__args [2] = new JniArgumentValue (native_lpDefault);
				__args [3] = new JniArgumentValue (native_lpReturnedString);
				__args [4] = new JniArgumentValue (native_lpFileName);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				JNIEnv.DeleteLocalRef (native_lpAppName);
				JNIEnv.DeleteLocalRef (native_lpKeyName);
				JNIEnv.DeleteLocalRef (native_lpDefault);
				if (lpReturnedString != null) {
					JNIEnv.CopyArray (native_lpReturnedString, lpReturnedString);
					JNIEnv.DeleteLocalRef (native_lpReturnedString);
				}
				JNIEnv.DeleteLocalRef (native_lpFileName);
				global::System.GC.KeepAlive (lpReturnedString);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='FileApi']/method[@name='ReNameFile_Api' and count(parameter)=2 and parameter[1][@type='java.lang.String'] and parameter[2][@type='java.lang.String']]"
		[Register ("ReNameFile_Api", "(Ljava/lang/String;Ljava/lang/String;)I", "")]
		public static unsafe int ReNameFile_Api (string? OldfName, string? NewFileName)
		{
			const string __id = "ReNameFile_Api.(Ljava/lang/String;Ljava/lang/String;)I";
			IntPtr native_OldfName = JNIEnv.NewString ((string?)OldfName);
			IntPtr native_NewFileName = JNIEnv.NewString ((string?)NewFileName);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_OldfName);
				__args [1] = new JniArgumentValue (native_NewFileName);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				JNIEnv.DeleteLocalRef (native_OldfName);
				JNIEnv.DeleteLocalRef (native_NewFileName);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='FileApi']/method[@name='ReadAppShare_Api' and count(parameter)=3 and parameter[1][@type='int'] and parameter[2][@type='byte[]'] and parameter[3][@type='int']]"
		[Register ("ReadAppShare_Api", "(I[BI)I", "")]
		public static unsafe int ReadAppShare_Api (int Addr, byte[]? OutData, int RLen)
		{
			const string __id = "ReadAppShare_Api.(I[BI)I";
			IntPtr native_OutData = JNIEnv.NewArray (OutData);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (Addr);
				__args [1] = new JniArgumentValue (native_OutData);
				__args [2] = new JniArgumentValue (RLen);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (OutData != null) {
					JNIEnv.CopyArray (native_OutData, OutData);
					JNIEnv.DeleteLocalRef (native_OutData);
				}
				global::System.GC.KeepAlive (OutData);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='FileApi']/method[@name='ReadFileLine' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
		[Register ("ReadFileLine", "(Ljava/lang/String;)Ljava/util/List;", "")]
		public static unsafe global::System.Collections.IList? ReadFileLine (string? fileName)
		{
			const string __id = "ReadFileLine.(Ljava/lang/String;)Ljava/util/List;";
			IntPtr native_fileName = JNIEnv.NewString ((string?)fileName);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_fileName);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return global::Android.Runtime.JavaList.FromJniHandle (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				JNIEnv.DeleteLocalRef (native_fileName);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='FileApi']/method[@name='ReadFile_Api' and count(parameter)=4 and parameter[1][@type='java.lang.String'] and parameter[2][@type='byte[]'] and parameter[3][@type='int'] and parameter[4][@type='byte[]']]"
		[Register ("ReadFile_Api", "(Ljava/lang/String;[BI[B)I", "")]
		public static unsafe int ReadFile_Api (string? FileName, byte[]? Buf, int Start, byte[]? Length)
		{
			const string __id = "ReadFile_Api.(Ljava/lang/String;[BI[B)I";
			IntPtr native_FileName = JNIEnv.NewString ((string?)FileName);
			IntPtr native_Buf = JNIEnv.NewArray (Buf);
			IntPtr native_Length = JNIEnv.NewArray (Length);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [4];
				__args [0] = new JniArgumentValue (native_FileName);
				__args [1] = new JniArgumentValue (native_Buf);
				__args [2] = new JniArgumentValue (Start);
				__args [3] = new JniArgumentValue (native_Length);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				JNIEnv.DeleteLocalRef (native_FileName);
				if (Buf != null) {
					JNIEnv.CopyArray (native_Buf, Buf);
					JNIEnv.DeleteLocalRef (native_Buf);
				}
				if (Length != null) {
					JNIEnv.CopyArray (native_Length, Length);
					JNIEnv.DeleteLocalRef (native_Length);
				}
				global::System.GC.KeepAlive (Buf);
				global::System.GC.KeepAlive (Length);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='FileApi']/method[@name='SaveWholeFile_Api' and count(parameter)=3 and parameter[1][@type='java.lang.String'] and parameter[2][@type='byte[]'] and parameter[3][@type='int']]"
		[Register ("SaveWholeFile_Api", "(Ljava/lang/String;[BI)I", "")]
		public static unsafe int SaveWholeFile_Api (string? FileName, byte[]? Buf, int Len)
		{
			const string __id = "SaveWholeFile_Api.(Ljava/lang/String;[BI)I";
			IntPtr native_FileName = JNIEnv.NewString ((string?)FileName);
			IntPtr native_Buf = JNIEnv.NewArray (Buf);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (native_FileName);
				__args [1] = new JniArgumentValue (native_Buf);
				__args [2] = new JniArgumentValue (Len);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				JNIEnv.DeleteLocalRef (native_FileName);
				if (Buf != null) {
					JNIEnv.CopyArray (native_Buf, Buf);
					JNIEnv.DeleteLocalRef (native_Buf);
				}
				global::System.GC.KeepAlive (Buf);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='FileApi']/method[@name='WriteAppShare_Api' and count(parameter)=3 and parameter[1][@type='int'] and parameter[2][@type='byte[]'] and parameter[3][@type='int']]"
		[Register ("WriteAppShare_Api", "(I[BI)I", "")]
		public static unsafe int WriteAppShare_Api (int Addr, byte[]? InData, int WLen)
		{
			const string __id = "WriteAppShare_Api.(I[BI)I";
			IntPtr native_InData = JNIEnv.NewArray (InData);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (Addr);
				__args [1] = new JniArgumentValue (native_InData);
				__args [2] = new JniArgumentValue (WLen);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (InData != null) {
					JNIEnv.CopyArray (native_InData, InData);
					JNIEnv.DeleteLocalRef (native_InData);
				}
				global::System.GC.KeepAlive (InData);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='FileApi']/method[@name='WriteFile_Api' and count(parameter)=4 and parameter[1][@type='java.lang.String'] and parameter[2][@type='byte[]'] and parameter[3][@type='int'] and parameter[4][@type='int']]"
		[Register ("WriteFile_Api", "(Ljava/lang/String;[BII)I", "")]
		public static unsafe int WriteFile_Api (string? FileName, byte[]? Buf, int Start, int Length)
		{
			const string __id = "WriteFile_Api.(Ljava/lang/String;[BII)I";
			IntPtr native_FileName = JNIEnv.NewString ((string?)FileName);
			IntPtr native_Buf = JNIEnv.NewArray (Buf);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [4];
				__args [0] = new JniArgumentValue (native_FileName);
				__args [1] = new JniArgumentValue (native_Buf);
				__args [2] = new JniArgumentValue (Start);
				__args [3] = new JniArgumentValue (Length);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				JNIEnv.DeleteLocalRef (native_FileName);
				if (Buf != null) {
					JNIEnv.CopyArray (native_Buf, Buf);
					JNIEnv.DeleteLocalRef (native_Buf);
				}
				global::System.GC.KeepAlive (Buf);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='FileApi']/method[@name='WritePrivateProfileString_Api' and count(parameter)=4 and parameter[1][@type='java.lang.String'] and parameter[2][@type='java.lang.String'] and parameter[3][@type='java.lang.String'] and parameter[4][@type='java.lang.String']]"
		[Register ("WritePrivateProfileString_Api", "(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)I", "")]
		public static unsafe int WritePrivateProfileString_Api (string? lpAppName, string? lpKeyName, string? lpString, string? lpFileName)
		{
			const string __id = "WritePrivateProfileString_Api.(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)I";
			IntPtr native_lpAppName = JNIEnv.NewString ((string?)lpAppName);
			IntPtr native_lpKeyName = JNIEnv.NewString ((string?)lpKeyName);
			IntPtr native_lpString = JNIEnv.NewString ((string?)lpString);
			IntPtr native_lpFileName = JNIEnv.NewString ((string?)lpFileName);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [4];
				__args [0] = new JniArgumentValue (native_lpAppName);
				__args [1] = new JniArgumentValue (native_lpKeyName);
				__args [2] = new JniArgumentValue (native_lpString);
				__args [3] = new JniArgumentValue (native_lpFileName);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				JNIEnv.DeleteLocalRef (native_lpAppName);
				JNIEnv.DeleteLocalRef (native_lpKeyName);
				JNIEnv.DeleteLocalRef (native_lpString);
				JNIEnv.DeleteLocalRef (native_lpFileName);
			}
		}

	}
}
