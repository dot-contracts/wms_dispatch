//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable restore
using System;
using System.Collections.Generic;
using Android.Runtime;
using Java.Interop;

namespace Com.Vanstone.Trans.Api {

	// Metadata.xml XPath class reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='Rs232Api']"
	[global::Android.Runtime.Register ("com/vanstone/trans/api/Rs232Api", DoNotGenerateAcw=true)]
	public partial class Rs232Api : global::Java.Lang.Object {
		static readonly JniPeerMembers _members = new XAPeerMembers ("com/vanstone/trans/api/Rs232Api", typeof (Rs232Api));

		internal static IntPtr class_ref {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		public override global::Java.Interop.JniPeerMembers JniPeerMembers {
			get { return _members; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override IntPtr ThresholdClass {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override global::System.Type ThresholdType {
			get { return _members.ManagedPeerType; }
		}

		protected Rs232Api (IntPtr javaReference, JniHandleOwnership transfer) : base (javaReference, transfer)
		{
		}

		// Metadata.xml XPath constructor reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='Rs232Api']/constructor[@name='Rs232Api' and count(parameter)=0]"
		[Register (".ctor", "()V", "")]
		public unsafe Rs232Api () : base (IntPtr.Zero, JniHandleOwnership.DoNotTransfer)
		{
			const string __id = "()V";

			if (((global::Java.Lang.Object) this).Handle != IntPtr.Zero)
				return;

			try {
				var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), null);
				SetHandle (__r.Handle, JniHandleOwnership.TransferLocalRef);
				_members.InstanceMethods.FinishCreateInstance (__id, this, null);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='Rs232Api']/method[@name='PortClose_Api' and count(parameter)=1 and parameter[1][@type='int']]"
		[Register ("PortClose_Api", "(I)I", "")]
		public static unsafe int PortClose_Api (int comport)
		{
			const string __id = "PortClose_Api.(I)I";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (comport);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='Rs232Api']/method[@name='PortIsEmpty' and count(parameter)=1 and parameter[1][@type='int']]"
		[global::System.Obsolete (@"deprecated")]
		[Register ("PortIsEmpty", "(I)I", "")]
		public static unsafe int PortIsEmpty (int comport)
		{
			const string __id = "PortIsEmpty.(I)I";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (comport);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='Rs232Api']/method[@name='PortIsEmpty' and count(parameter)=2 and parameter[1][@type='int'] and parameter[2][@type='boolean']]"
		[global::System.Obsolete (@"deprecated")]
		[Register ("PortIsEmpty", "(IZ)I", "")]
		public static unsafe int PortIsEmpty (int comport, bool input)
		{
			const string __id = "PortIsEmpty.(IZ)I";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (comport);
				__args [1] = new JniArgumentValue (input);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='Rs232Api']/method[@name='PortIsEmpty_Api' and count(parameter)=2 and parameter[1][@type='int'] and parameter[2][@type='boolean']]"
		[Register ("PortIsEmpty_Api", "(IZ)I", "")]
		public static unsafe int PortIsEmpty_Api (int comport, bool input)
		{
			const string __id = "PortIsEmpty_Api.(IZ)I";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (comport);
				__args [1] = new JniArgumentValue (input);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='Rs232Api']/method[@name='PortOpen_Api' and count(parameter)=1 and parameter[1][@type='int']]"
		[Register ("PortOpen_Api", "(I)I", "")]
		public static unsafe int PortOpen_Api (int comport)
		{
			const string __id = "PortOpen_Api.(I)I";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (comport);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='Rs232Api']/method[@name='PortRecv_Api' and count(parameter)=4 and parameter[1][@type='int'] and parameter[2][@type='byte[]'] and parameter[3][@type='int'] and parameter[4][@type='int']]"
		[Register ("PortRecv_Api", "(I[BII)I", "")]
		public static unsafe int PortRecv_Api (int comport, byte[]? buf, int len, int ms)
		{
			const string __id = "PortRecv_Api.(I[BII)I";
			IntPtr native_buf = JNIEnv.NewArray (buf);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [4];
				__args [0] = new JniArgumentValue (comport);
				__args [1] = new JniArgumentValue (native_buf);
				__args [2] = new JniArgumentValue (len);
				__args [3] = new JniArgumentValue (ms);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (buf != null) {
					JNIEnv.CopyArray (native_buf, buf);
					JNIEnv.DeleteLocalRef (native_buf);
				}
				global::System.GC.KeepAlive (buf);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='Rs232Api']/method[@name='PortReset_Api' and count(parameter)=1 and parameter[1][@type='int']]"
		[Register ("PortReset_Api", "(I)I", "")]
		public static unsafe int PortReset_Api (int comport)
		{
			const string __id = "PortReset_Api.(I)I";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (comport);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='Rs232Api']/method[@name='PortSends_Api' and count(parameter)=3 and parameter[1][@type='int'] and parameter[2][@type='byte[]'] and parameter[3][@type='int']]"
		[Register ("PortSends_Api", "(I[BI)I", "")]
		public static unsafe int PortSends_Api (int comport, byte[]? buf, int len)
		{
			const string __id = "PortSends_Api.(I[BI)I";
			IntPtr native_buf = JNIEnv.NewArray (buf);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (comport);
				__args [1] = new JniArgumentValue (native_buf);
				__args [2] = new JniArgumentValue (len);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (buf != null) {
					JNIEnv.CopyArray (native_buf, buf);
					JNIEnv.DeleteLocalRef (native_buf);
				}
				global::System.GC.KeepAlive (buf);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='Rs232Api']/method[@name='PortSetBaud_Api' and count(parameter)=5 and parameter[1][@type='int'] and parameter[2][@type='int'] and parameter[3][@type='int'] and parameter[4][@type='int'] and parameter[5][@type='int']]"
		[Register ("PortSetBaud_Api", "(IIIII)I", "")]
		public static unsafe int PortSetBaud_Api (int comport, int baud, int databits, int parity, int stopbits)
		{
			const string __id = "PortSetBaud_Api.(IIIII)I";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [5];
				__args [0] = new JniArgumentValue (comport);
				__args [1] = new JniArgumentValue (baud);
				__args [2] = new JniArgumentValue (databits);
				__args [3] = new JniArgumentValue (parity);
				__args [4] = new JniArgumentValue (stopbits);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
			}
		}

	}
}
