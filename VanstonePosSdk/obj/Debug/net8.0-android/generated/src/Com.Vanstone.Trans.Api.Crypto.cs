//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable restore
using System;
using System.Collections.Generic;
using Android.Runtime;
using Java.Interop;

namespace Com.Vanstone.Trans.Api {

	// Metadata.xml XPath class reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='Crypto']"
	[global::Android.Runtime.Register ("com/vanstone/trans/api/Crypto", DoNotGenerateAcw=true)]
	public partial class Crypto : global::Java.Lang.Object {
		static readonly JniPeerMembers _members = new XAPeerMembers ("com/vanstone/trans/api/Crypto", typeof (Crypto));

		internal static IntPtr class_ref {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		public override global::Java.Interop.JniPeerMembers JniPeerMembers {
			get { return _members; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override IntPtr ThresholdClass {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override global::System.Type ThresholdType {
			get { return _members.ManagedPeerType; }
		}

		protected Crypto (IntPtr javaReference, JniHandleOwnership transfer) : base (javaReference, transfer)
		{
		}

		// Metadata.xml XPath constructor reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='Crypto']/constructor[@name='Crypto' and count(parameter)=0]"
		[Register (".ctor", "()V", "")]
		public unsafe Crypto () : base (IntPtr.Zero, JniHandleOwnership.DoNotTransfer)
		{
			const string __id = "()V";

			if (((global::Java.Lang.Object) this).Handle != IntPtr.Zero)
				return;

			try {
				var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), null);
				SetHandle (__r.Handle, JniHandleOwnership.TransferLocalRef);
				_members.InstanceMethods.FinishCreateInstance (__id, this, null);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='Crypto']/method[@name='Des3Calc_Api' and count(parameter)=4 and parameter[1][@type='byte[]'] and parameter[2][@type='byte[]'] and parameter[3][@type='byte[]'] and parameter[4][@type='int']]"
		[Register ("Des3Calc_Api", "([B[B[BI)V", "")]
		public static unsafe void Des3Calc_Api (byte[]? source, byte[]? dest, byte[]? inkey, int flag)
		{
			const string __id = "Des3Calc_Api.([B[B[BI)V";
			IntPtr native_source = JNIEnv.NewArray (source);
			IntPtr native_dest = JNIEnv.NewArray (dest);
			IntPtr native_inkey = JNIEnv.NewArray (inkey);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [4];
				__args [0] = new JniArgumentValue (native_source);
				__args [1] = new JniArgumentValue (native_dest);
				__args [2] = new JniArgumentValue (native_inkey);
				__args [3] = new JniArgumentValue (flag);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				if (source != null) {
					JNIEnv.CopyArray (native_source, source);
					JNIEnv.DeleteLocalRef (native_source);
				}
				if (dest != null) {
					JNIEnv.CopyArray (native_dest, dest);
					JNIEnv.DeleteLocalRef (native_dest);
				}
				if (inkey != null) {
					JNIEnv.CopyArray (native_inkey, inkey);
					JNIEnv.DeleteLocalRef (native_inkey);
				}
				global::System.GC.KeepAlive (source);
				global::System.GC.KeepAlive (dest);
				global::System.GC.KeepAlive (inkey);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='Crypto']/method[@name='DesCalc_Api' and count(parameter)=4 and parameter[1][@type='byte[]'] and parameter[2][@type='byte[]'] and parameter[3][@type='byte[]'] and parameter[4][@type='int']]"
		[Register ("DesCalc_Api", "([B[B[BI)V", "")]
		public static unsafe void DesCalc_Api (byte[]? source, byte[]? dest, byte[]? inkey, int flag)
		{
			const string __id = "DesCalc_Api.([B[B[BI)V";
			IntPtr native_source = JNIEnv.NewArray (source);
			IntPtr native_dest = JNIEnv.NewArray (dest);
			IntPtr native_inkey = JNIEnv.NewArray (inkey);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [4];
				__args [0] = new JniArgumentValue (native_source);
				__args [1] = new JniArgumentValue (native_dest);
				__args [2] = new JniArgumentValue (native_inkey);
				__args [3] = new JniArgumentValue (flag);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				if (source != null) {
					JNIEnv.CopyArray (native_source, source);
					JNIEnv.DeleteLocalRef (native_source);
				}
				if (dest != null) {
					JNIEnv.CopyArray (native_dest, dest);
					JNIEnv.DeleteLocalRef (native_dest);
				}
				if (inkey != null) {
					JNIEnv.CopyArray (native_inkey, inkey);
					JNIEnv.DeleteLocalRef (native_inkey);
				}
				global::System.GC.KeepAlive (source);
				global::System.GC.KeepAlive (dest);
				global::System.GC.KeepAlive (inkey);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='Crypto']/method[@name='SslGenCSR_Api' and count(parameter)=6 and parameter[1][@type='java.lang.String'] and parameter[2][@type='int'] and parameter[3][@type='long'] and parameter[4][@type='int'] and parameter[5][@type='byte[]'] and parameter[6][@type='byte[]']]"
		[Register ("SslGenCSR_Api", "(Ljava/lang/String;IJI[B[B)I", "")]
		public static unsafe int SslGenCSR_Api (string? subject, int rsaBit, long rsaE, int version, byte[]? p10Out, byte[]? p10LenInOut_int)
		{
			const string __id = "SslGenCSR_Api.(Ljava/lang/String;IJI[B[B)I";
			IntPtr native_subject = JNIEnv.NewString ((string?)subject);
			IntPtr native_p10Out = JNIEnv.NewArray (p10Out);
			IntPtr native_p10LenInOut_int = JNIEnv.NewArray (p10LenInOut_int);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [6];
				__args [0] = new JniArgumentValue (native_subject);
				__args [1] = new JniArgumentValue (rsaBit);
				__args [2] = new JniArgumentValue (rsaE);
				__args [3] = new JniArgumentValue (version);
				__args [4] = new JniArgumentValue (native_p10Out);
				__args [5] = new JniArgumentValue (native_p10LenInOut_int);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				JNIEnv.DeleteLocalRef (native_subject);
				if (p10Out != null) {
					JNIEnv.CopyArray (native_p10Out, p10Out);
					JNIEnv.DeleteLocalRef (native_p10Out);
				}
				if (p10LenInOut_int != null) {
					JNIEnv.CopyArray (native_p10LenInOut_int, p10LenInOut_int);
					JNIEnv.DeleteLocalRef (native_p10LenInOut_int);
				}
				global::System.GC.KeepAlive (p10Out);
				global::System.GC.KeepAlive (p10LenInOut_int);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='Crypto']/method[@name='SslParsePKCS7_Api' and count(parameter)=2 and parameter[1][@type='byte[]'] and parameter[2][@type='int']]"
		[Register ("SslParsePKCS7_Api", "([BI)I", "")]
		public static unsafe int SslParsePKCS7_Api (byte[]? inP7Data, int inLen)
		{
			const string __id = "SslParsePKCS7_Api.([BI)I";
			IntPtr native_inP7Data = JNIEnv.NewArray (inP7Data);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_inP7Data);
				__args [1] = new JniArgumentValue (inLen);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (inP7Data != null) {
					JNIEnv.CopyArray (native_inP7Data, inP7Data);
					JNIEnv.DeleteLocalRef (native_inP7Data);
				}
				global::System.GC.KeepAlive (inP7Data);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='Crypto']/method[@name='SslSaveCertS_Api' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
		[Register ("SslSaveCertS_Api", "(Ljava/lang/String;)I", "")]
		public static unsafe int SslSaveCertS_Api (string? snNum)
		{
			const string __id = "SslSaveCertS_Api.(Ljava/lang/String;)I";
			IntPtr native_snNum = JNIEnv.NewString ((string?)snNum);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_snNum);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				JNIEnv.DeleteLocalRef (native_snNum);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='Crypto']/method[@name='SslSignPKCS7_Api' and count(parameter)=5 and parameter[1][@type='java.lang.String'] and parameter[2][@type='byte[]'] and parameter[3][@type='int'] and parameter[4][@type='byte[]'] and parameter[5][@type='byte[]']]"
		[Register ("SslSignPKCS7_Api", "(Ljava/lang/String;[BI[B[B)I", "")]
		public static unsafe int SslSignPKCS7_Api (string? snnum, byte[]? indata, int inlen, byte[]? outdata, byte[]? outlen_int)
		{
			const string __id = "SslSignPKCS7_Api.(Ljava/lang/String;[BI[B[B)I";
			IntPtr native_snnum = JNIEnv.NewString ((string?)snnum);
			IntPtr native_indata = JNIEnv.NewArray (indata);
			IntPtr native_outdata = JNIEnv.NewArray (outdata);
			IntPtr native_outlen_int = JNIEnv.NewArray (outlen_int);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [5];
				__args [0] = new JniArgumentValue (native_snnum);
				__args [1] = new JniArgumentValue (native_indata);
				__args [2] = new JniArgumentValue (inlen);
				__args [3] = new JniArgumentValue (native_outdata);
				__args [4] = new JniArgumentValue (native_outlen_int);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				JNIEnv.DeleteLocalRef (native_snnum);
				if (indata != null) {
					JNIEnv.CopyArray (native_indata, indata);
					JNIEnv.DeleteLocalRef (native_indata);
				}
				if (outdata != null) {
					JNIEnv.CopyArray (native_outdata, outdata);
					JNIEnv.DeleteLocalRef (native_outdata);
				}
				if (outlen_int != null) {
					JNIEnv.CopyArray (native_outlen_int, outlen_int);
					JNIEnv.DeleteLocalRef (native_outlen_int);
				}
				global::System.GC.KeepAlive (indata);
				global::System.GC.KeepAlive (outdata);
				global::System.GC.KeepAlive (outlen_int);
			}
		}

	}
}
