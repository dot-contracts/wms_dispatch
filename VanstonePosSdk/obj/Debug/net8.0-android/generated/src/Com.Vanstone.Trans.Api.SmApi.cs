//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable restore
using System;
using System.Collections.Generic;
using Android.Runtime;
using Java.Interop;

namespace Com.Vanstone.Trans.Api {

	// Metadata.xml XPath class reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='SmApi']"
	[global::Android.Runtime.Register ("com/vanstone/trans/api/SmApi", DoNotGenerateAcw=true)]
	public partial class SmApi : global::Java.Lang.Object {
		static readonly JniPeerMembers _members = new XAPeerMembers ("com/vanstone/trans/api/SmApi", typeof (SmApi));

		internal static IntPtr class_ref {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		public override global::Java.Interop.JniPeerMembers JniPeerMembers {
			get { return _members; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override IntPtr ThresholdClass {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override global::System.Type ThresholdType {
			get { return _members.ManagedPeerType; }
		}

		protected SmApi (IntPtr javaReference, JniHandleOwnership transfer) : base (javaReference, transfer)
		{
		}

		// Metadata.xml XPath constructor reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='SmApi']/constructor[@name='SmApi' and count(parameter)=0]"
		[Register (".ctor", "()V", "")]
		public unsafe SmApi () : base (IntPtr.Zero, JniHandleOwnership.DoNotTransfer)
		{
			const string __id = "()V";

			if (((global::Java.Lang.Object) this).Handle != IntPtr.Zero)
				return;

			try {
				var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), null);
				SetHandle (__r.Handle, JniHandleOwnership.TransferLocalRef);
				_members.InstanceMethods.FinishCreateInstance (__id, this, null);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='SmApi']/method[@name='SM2Init_Api' and count(parameter)=1 and parameter[1][@type='int']]"
		[Register ("SM2Init_Api", "(I)I", "")]
		public static unsafe int SM2Init_Api (int curveType)
		{
			const string __id = "SM2Init_Api.(I)I";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (curveType);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='SmApi']/method[@name='SM2Verify_Api' and count(parameter)=6 and parameter[1][@type='byte[]'] and parameter[2][@type='int'] and parameter[3][@type='byte[]'] and parameter[4][@type='byte[]'] and parameter[5][@type='byte[]'] and parameter[6][@type='int']]"
		[Register ("SM2Verify_Api", "([BI[B[B[BI)I", "")]
		public static unsafe int SM2Verify_Api (byte[]? userid, int useridLen, byte[]? publicKey, byte[]? signData, byte[]? msg, int msgLen)
		{
			const string __id = "SM2Verify_Api.([BI[B[B[BI)I";
			IntPtr native_userid = JNIEnv.NewArray (userid);
			IntPtr native_publicKey = JNIEnv.NewArray (publicKey);
			IntPtr native_signData = JNIEnv.NewArray (signData);
			IntPtr native_msg = JNIEnv.NewArray (msg);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [6];
				__args [0] = new JniArgumentValue (native_userid);
				__args [1] = new JniArgumentValue (useridLen);
				__args [2] = new JniArgumentValue (native_publicKey);
				__args [3] = new JniArgumentValue (native_signData);
				__args [4] = new JniArgumentValue (native_msg);
				__args [5] = new JniArgumentValue (msgLen);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (userid != null) {
					JNIEnv.CopyArray (native_userid, userid);
					JNIEnv.DeleteLocalRef (native_userid);
				}
				if (publicKey != null) {
					JNIEnv.CopyArray (native_publicKey, publicKey);
					JNIEnv.DeleteLocalRef (native_publicKey);
				}
				if (signData != null) {
					JNIEnv.CopyArray (native_signData, signData);
					JNIEnv.DeleteLocalRef (native_signData);
				}
				if (msg != null) {
					JNIEnv.CopyArray (native_msg, msg);
					JNIEnv.DeleteLocalRef (native_msg);
				}
				global::System.GC.KeepAlive (userid);
				global::System.GC.KeepAlive (publicKey);
				global::System.GC.KeepAlive (signData);
				global::System.GC.KeepAlive (msg);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='SmApi']/method[@name='SM3Hash_Api' and count(parameter)=3 and parameter[1][@type='byte[]'] and parameter[2][@type='int'] and parameter[3][@type='byte[]']]"
		[Register ("SM3Hash_Api", "([BI[B)I", "")]
		public static unsafe int SM3Hash_Api (byte[]? data, int n, byte[]? h)
		{
			const string __id = "SM3Hash_Api.([BI[B)I";
			IntPtr native_data = JNIEnv.NewArray (data);
			IntPtr native_h = JNIEnv.NewArray (h);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (native_data);
				__args [1] = new JniArgumentValue (n);
				__args [2] = new JniArgumentValue (native_h);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (data != null) {
					JNIEnv.CopyArray (native_data, data);
					JNIEnv.DeleteLocalRef (native_data);
				}
				if (h != null) {
					JNIEnv.CopyArray (native_h, h);
					JNIEnv.DeleteLocalRef (native_h);
				}
				global::System.GC.KeepAlive (data);
				global::System.GC.KeepAlive (h);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='SmApi']/method[@name='SMSetSlot_Api' and count(parameter)=1 and parameter[1][@type='int']]"
		[Register ("SMSetSlot_Api", "(I)I", "")]
		public static unsafe int SMSetSlot_Api (int slot)
		{
			const string __id = "SMSetSlot_Api.(I)I";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (slot);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='SmApi']/method[@name='Sm1_Api' and count(parameter)=5 and parameter[1][@type='byte[]'] and parameter[2][@type='int'] and parameter[3][@type='byte[]'] and parameter[4][@type='byte[]'] and parameter[5][@type='int']]"
		[Register ("Sm1_Api", "([BI[B[BI)I", "")]
		public static unsafe int Sm1_Api (byte[]? Input, int InputLen, byte[]? Output, byte[]? Smkey, int Mode)
		{
			const string __id = "Sm1_Api.([BI[B[BI)I";
			IntPtr native_Input = JNIEnv.NewArray (Input);
			IntPtr native_Output = JNIEnv.NewArray (Output);
			IntPtr native_Smkey = JNIEnv.NewArray (Smkey);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [5];
				__args [0] = new JniArgumentValue (native_Input);
				__args [1] = new JniArgumentValue (InputLen);
				__args [2] = new JniArgumentValue (native_Output);
				__args [3] = new JniArgumentValue (native_Smkey);
				__args [4] = new JniArgumentValue (Mode);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (Input != null) {
					JNIEnv.CopyArray (native_Input, Input);
					JNIEnv.DeleteLocalRef (native_Input);
				}
				if (Output != null) {
					JNIEnv.CopyArray (native_Output, Output);
					JNIEnv.DeleteLocalRef (native_Output);
				}
				if (Smkey != null) {
					JNIEnv.CopyArray (native_Smkey, Smkey);
					JNIEnv.DeleteLocalRef (native_Smkey);
				}
				global::System.GC.KeepAlive (Input);
				global::System.GC.KeepAlive (Output);
				global::System.GC.KeepAlive (Smkey);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='SmApi']/method[@name='Sm2ExportPK_Api' and count(parameter)=2 and parameter[1][@type='int'] and parameter[2][@type='byte[]']]"
		[Register ("Sm2ExportPK_Api", "(I[B)I", "")]
		public static unsafe int Sm2ExportPK_Api (int Type, byte[]? Output)
		{
			const string __id = "Sm2ExportPK_Api.(I[B)I";
			IntPtr native_Output = JNIEnv.NewArray (Output);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (Type);
				__args [1] = new JniArgumentValue (native_Output);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (Output != null) {
					JNIEnv.CopyArray (native_Output, Output);
					JNIEnv.DeleteLocalRef (native_Output);
				}
				global::System.GC.KeepAlive (Output);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='SmApi']/method[@name='Sm2Sign_Api' and count(parameter)=7 and parameter[1][@type='byte[]'] and parameter[2][@type='int'] and parameter[3][@type='byte[]'] and parameter[4][@type='byte[]'] and parameter[5][@type='byte[]'] and parameter[6][@type='byte[]'] and parameter[7][@type='int']]"
		[Register ("Sm2Sign_Api", "([BI[B[B[B[BI)I", "")]
		public static unsafe int Sm2Sign_Api (byte[]? UserId, int UserIdLen, byte[]? PublicKey, byte[]? PrivateKey, byte[]? Sign, byte[]? Msg, int MsgLen)
		{
			const string __id = "Sm2Sign_Api.([BI[B[B[B[BI)I";
			IntPtr native_UserId = JNIEnv.NewArray (UserId);
			IntPtr native_PublicKey = JNIEnv.NewArray (PublicKey);
			IntPtr native_PrivateKey = JNIEnv.NewArray (PrivateKey);
			IntPtr native_Sign = JNIEnv.NewArray (Sign);
			IntPtr native_Msg = JNIEnv.NewArray (Msg);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [7];
				__args [0] = new JniArgumentValue (native_UserId);
				__args [1] = new JniArgumentValue (UserIdLen);
				__args [2] = new JniArgumentValue (native_PublicKey);
				__args [3] = new JniArgumentValue (native_PrivateKey);
				__args [4] = new JniArgumentValue (native_Sign);
				__args [5] = new JniArgumentValue (native_Msg);
				__args [6] = new JniArgumentValue (MsgLen);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (UserId != null) {
					JNIEnv.CopyArray (native_UserId, UserId);
					JNIEnv.DeleteLocalRef (native_UserId);
				}
				if (PublicKey != null) {
					JNIEnv.CopyArray (native_PublicKey, PublicKey);
					JNIEnv.DeleteLocalRef (native_PublicKey);
				}
				if (PrivateKey != null) {
					JNIEnv.CopyArray (native_PrivateKey, PrivateKey);
					JNIEnv.DeleteLocalRef (native_PrivateKey);
				}
				if (Sign != null) {
					JNIEnv.CopyArray (native_Sign, Sign);
					JNIEnv.DeleteLocalRef (native_Sign);
				}
				if (Msg != null) {
					JNIEnv.CopyArray (native_Msg, Msg);
					JNIEnv.DeleteLocalRef (native_Msg);
				}
				global::System.GC.KeepAlive (UserId);
				global::System.GC.KeepAlive (PublicKey);
				global::System.GC.KeepAlive (PrivateKey);
				global::System.GC.KeepAlive (Sign);
				global::System.GC.KeepAlive (Msg);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='SmApi']/method[@name='Sm4_Api' and count(parameter)=5 and parameter[1][@type='byte[]'] and parameter[2][@type='int'] and parameter[3][@type='byte[]'] and parameter[4][@type='byte[]'] and parameter[5][@type='int']]"
		[Register ("Sm4_Api", "([BI[B[BI)I", "")]
		public static unsafe int Sm4_Api (byte[]? Source, int SourceLen, byte[]? Dest, byte[]? Inkey, int Flag)
		{
			const string __id = "Sm4_Api.([BI[B[BI)I";
			IntPtr native_Source = JNIEnv.NewArray (Source);
			IntPtr native_Dest = JNIEnv.NewArray (Dest);
			IntPtr native_Inkey = JNIEnv.NewArray (Inkey);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [5];
				__args [0] = new JniArgumentValue (native_Source);
				__args [1] = new JniArgumentValue (SourceLen);
				__args [2] = new JniArgumentValue (native_Dest);
				__args [3] = new JniArgumentValue (native_Inkey);
				__args [4] = new JniArgumentValue (Flag);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (Source != null) {
					JNIEnv.CopyArray (native_Source, Source);
					JNIEnv.DeleteLocalRef (native_Source);
				}
				if (Dest != null) {
					JNIEnv.CopyArray (native_Dest, Dest);
					JNIEnv.DeleteLocalRef (native_Dest);
				}
				if (Inkey != null) {
					JNIEnv.CopyArray (native_Inkey, Inkey);
					JNIEnv.DeleteLocalRef (native_Inkey);
				}
				global::System.GC.KeepAlive (Source);
				global::System.GC.KeepAlive (Dest);
				global::System.GC.KeepAlive (Inkey);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='SmApi']/method[@name='SmGetRand_Api' and count(parameter)=2 and parameter[1][@type='int'] and parameter[2][@type='byte[]']]"
		[Register ("SmGetRand_Api", "(I[B)I", "")]
		public static unsafe int SmGetRand_Api (int Lc, byte[]? Rand)
		{
			const string __id = "SmGetRand_Api.(I[B)I";
			IntPtr native_Rand = JNIEnv.NewArray (Rand);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (Lc);
				__args [1] = new JniArgumentValue (native_Rand);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (Rand != null) {
					JNIEnv.CopyArray (native_Rand, Rand);
					JNIEnv.DeleteLocalRef (native_Rand);
				}
				global::System.GC.KeepAlive (Rand);
			}
		}

	}
}
