//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable restore
using System;
using System.Collections.Generic;
using Android.Runtime;
using Java.Interop;

namespace Com.Vanstone.Trans.Api {

	// Metadata.xml XPath class reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PinpadApi']"
	[global::Android.Runtime.Register ("com/vanstone/trans/api/PinpadApi", DoNotGenerateAcw=true)]
	public partial class PinpadApi : global::Java.Lang.Object {
		static readonly JniPeerMembers _members = new XAPeerMembers ("com/vanstone/trans/api/PinpadApi", typeof (PinpadApi));

		internal static IntPtr class_ref {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		public override global::Java.Interop.JniPeerMembers JniPeerMembers {
			get { return _members; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override IntPtr ThresholdClass {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override global::System.Type ThresholdType {
			get { return _members.ManagedPeerType; }
		}

		protected PinpadApi (IntPtr javaReference, JniHandleOwnership transfer) : base (javaReference, transfer)
		{
		}

		// Metadata.xml XPath constructor reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PinpadApi']/constructor[@name='PinpadApi' and count(parameter)=0]"
		[Register (".ctor", "()V", "")]
		public unsafe PinpadApi () : base (IntPtr.Zero, JniHandleOwnership.DoNotTransfer)
		{
			const string __id = "()V";

			if (((global::Java.Lang.Object) this).Handle != IntPtr.Zero)
				return;

			try {
				var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), null);
				SetHandle (__r.Handle, JniHandleOwnership.TransferLocalRef);
				_members.InstanceMethods.FinishCreateInstance (__id, this, null);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PinpadApi']/method[@name='CoveDispAmt' and count(parameter)=2 and parameter[1][@type='byte[]'] and parameter[2][@type='byte[]']]"
		[Register ("CoveDispAmt", "([B[B)I", "")]
		public static unsafe int CoveDispAmt (byte[]? AscAmt, byte[]? Out)
		{
			const string __id = "CoveDispAmt.([B[B)I";
			IntPtr native_AscAmt = JNIEnv.NewArray (AscAmt);
			IntPtr native_Out = JNIEnv.NewArray (Out);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_AscAmt);
				__args [1] = new JniArgumentValue (native_Out);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (AscAmt != null) {
					JNIEnv.CopyArray (native_AscAmt, AscAmt);
					JNIEnv.DeleteLocalRef (native_AscAmt);
				}
				if (Out != null) {
					JNIEnv.CopyArray (native_Out, Out);
					JNIEnv.DeleteLocalRef (native_Out);
				}
				global::System.GC.KeepAlive (AscAmt);
				global::System.GC.KeepAlive (Out);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PinpadApi']/method[@name='GetTermInforEx_Api' and count(parameter)=2 and parameter[1][@type='byte[]'] and parameter[2][@type='int']]"
		[Register ("GetTermInforEx_Api", "([BI)I", "")]
		public static unsafe int GetTermInforEx_Api (byte[]? InforOut, int InBufSize)
		{
			const string __id = "GetTermInforEx_Api.([BI)I";
			IntPtr native_InforOut = JNIEnv.NewArray (InforOut);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_InforOut);
				__args [1] = new JniArgumentValue (InBufSize);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (InforOut != null) {
					JNIEnv.CopyArray (native_InforOut, InforOut);
					JNIEnv.DeleteLocalRef (native_InforOut);
				}
				global::System.GC.KeepAlive (InforOut);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PinpadApi']/method[@name='PPCheckState_Api' and count(parameter)=1 and parameter[1][@type='int']]"
		[Register ("PPCheckState_Api", "(I)I", "")]
		public static unsafe int PPCheckState_Api (int timeOutMs)
		{
			const string __id = "PPCheckState_Api.(I)I";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (timeOutMs);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PinpadApi']/method[@name='PPDes_Api' and count(parameter)=6 and parameter[1][@type='int'] and parameter[2][@type='int'] and parameter[3][@type='int'] and parameter[4][@type='byte[]'] and parameter[5][@type='int'] and parameter[6][@type='byte[]']]"
		[Register ("PPDes_Api", "(III[BI[B)I", "")]
		public static unsafe int PPDes_Api (int KeyIndex, int Mode, int MorWFlag, byte[]? DataIn, int DataInLen, byte[]? DataOut)
		{
			const string __id = "PPDes_Api.(III[BI[B)I";
			IntPtr native_DataIn = JNIEnv.NewArray (DataIn);
			IntPtr native_DataOut = JNIEnv.NewArray (DataOut);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [6];
				__args [0] = new JniArgumentValue (KeyIndex);
				__args [1] = new JniArgumentValue (Mode);
				__args [2] = new JniArgumentValue (MorWFlag);
				__args [3] = new JniArgumentValue (native_DataIn);
				__args [4] = new JniArgumentValue (DataInLen);
				__args [5] = new JniArgumentValue (native_DataOut);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (DataIn != null) {
					JNIEnv.CopyArray (native_DataIn, DataIn);
					JNIEnv.DeleteLocalRef (native_DataIn);
				}
				if (DataOut != null) {
					JNIEnv.CopyArray (native_DataOut, DataOut);
					JNIEnv.DeleteLocalRef (native_DataOut);
				}
				global::System.GC.KeepAlive (DataIn);
				global::System.GC.KeepAlive (DataOut);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PinpadApi']/method[@name='PPDisAmt_Api' and count(parameter)=2 and parameter[1][@type='byte[]'] and parameter[2][@type='int']]"
		[Register ("PPDisAmt_Api", "([BI)I", "")]
		public static unsafe int PPDisAmt_Api (byte[]? AmtBcd, int type)
		{
			const string __id = "PPDisAmt_Api.([BI)I";
			IntPtr native_AmtBcd = JNIEnv.NewArray (AmtBcd);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_AmtBcd);
				__args [1] = new JniArgumentValue (type);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (AmtBcd != null) {
					JNIEnv.CopyArray (native_AmtBcd, AmtBcd);
					JNIEnv.DeleteLocalRef (native_AmtBcd);
				}
				global::System.GC.KeepAlive (AmtBcd);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PinpadApi']/method[@name='PPDukptIncreaseKsn_Api' and count(parameter)=1 and parameter[1][@type='int']]"
		[Register ("PPDukptIncreaseKsn_Api", "(I)I", "")]
		public static unsafe int PPDukptIncreaseKsn_Api (int GroupIdx)
		{
			const string __id = "PPDukptIncreaseKsn_Api.(I)I";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (GroupIdx);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PinpadApi']/method[@name='PPDukptTdes_Api' and count(parameter)=9 and parameter[1][@type='int'] and parameter[2][@type='int'] and parameter[3][@type='int'] and parameter[4][@type='byte[]'] and parameter[5][@type='byte[]'] and parameter[6][@type='int'] and parameter[7][@type='int'] and parameter[8][@type='byte[]'] and parameter[9][@type='byte[]']]"
		[Register ("PPDukptTdes_Api", "(III[B[BII[B[B)I", "")]
		public static unsafe int PPDukptTdes_Api (int KeyNo, int KeyType, int IncKsn, byte[]? pucIV, byte[]? DataIn, int DataInLen, int Mode, byte[]? DataOut, byte[]? OutKSN)
		{
			const string __id = "PPDukptTdes_Api.(III[B[BII[B[B)I";
			IntPtr native_pucIV = JNIEnv.NewArray (pucIV);
			IntPtr native_DataIn = JNIEnv.NewArray (DataIn);
			IntPtr native_DataOut = JNIEnv.NewArray (DataOut);
			IntPtr native_OutKSN = JNIEnv.NewArray (OutKSN);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [9];
				__args [0] = new JniArgumentValue (KeyNo);
				__args [1] = new JniArgumentValue (KeyType);
				__args [2] = new JniArgumentValue (IncKsn);
				__args [3] = new JniArgumentValue (native_pucIV);
				__args [4] = new JniArgumentValue (native_DataIn);
				__args [5] = new JniArgumentValue (DataInLen);
				__args [6] = new JniArgumentValue (Mode);
				__args [7] = new JniArgumentValue (native_DataOut);
				__args [8] = new JniArgumentValue (native_OutKSN);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (pucIV != null) {
					JNIEnv.CopyArray (native_pucIV, pucIV);
					JNIEnv.DeleteLocalRef (native_pucIV);
				}
				if (DataIn != null) {
					JNIEnv.CopyArray (native_DataIn, DataIn);
					JNIEnv.DeleteLocalRef (native_DataIn);
				}
				if (DataOut != null) {
					JNIEnv.CopyArray (native_DataOut, DataOut);
					JNIEnv.DeleteLocalRef (native_DataOut);
				}
				if (OutKSN != null) {
					JNIEnv.CopyArray (native_OutKSN, OutKSN);
					JNIEnv.DeleteLocalRef (native_OutKSN);
				}
				global::System.GC.KeepAlive (pucIV);
				global::System.GC.KeepAlive (DataIn);
				global::System.GC.KeepAlive (DataOut);
				global::System.GC.KeepAlive (OutKSN);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PinpadApi']/method[@name='PPDukptWriteTIK_Api' and count(parameter)=6 and parameter[1][@type='int'] and parameter[2][@type='int'] and parameter[3][@type='int'] and parameter[4][@type='byte[]'] and parameter[5][@type='byte[]'] and parameter[6][@type='int']]"
		[Register ("PPDukptWriteTIK_Api", "(III[B[BI)I", "")]
		public static unsafe int PPDukptWriteTIK_Api (int GroupIdx, int SrcKeyIdx, int KeyLen, byte[]? KeyValueIn, byte[]? KsnIn, int Mode)
		{
			const string __id = "PPDukptWriteTIK_Api.(III[B[BI)I";
			IntPtr native_KeyValueIn = JNIEnv.NewArray (KeyValueIn);
			IntPtr native_KsnIn = JNIEnv.NewArray (KsnIn);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [6];
				__args [0] = new JniArgumentValue (GroupIdx);
				__args [1] = new JniArgumentValue (SrcKeyIdx);
				__args [2] = new JniArgumentValue (KeyLen);
				__args [3] = new JniArgumentValue (native_KeyValueIn);
				__args [4] = new JniArgumentValue (native_KsnIn);
				__args [5] = new JniArgumentValue (Mode);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (KeyValueIn != null) {
					JNIEnv.CopyArray (native_KeyValueIn, KeyValueIn);
					JNIEnv.DeleteLocalRef (native_KeyValueIn);
				}
				if (KsnIn != null) {
					JNIEnv.CopyArray (native_KsnIn, KsnIn);
					JNIEnv.DeleteLocalRef (native_KsnIn);
				}
				global::System.GC.KeepAlive (KeyValueIn);
				global::System.GC.KeepAlive (KsnIn);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PinpadApi']/method[@name='PPGetDukptKSN_Api' and count(parameter)=2 and parameter[1][@type='int'] and parameter[2][@type='byte[]']]"
		[Register ("PPGetDukptKSN_Api", "(I[B)I", "")]
		public static unsafe int PPGetDukptKSN_Api (int GroupIdx, byte[]? KsnOut)
		{
			const string __id = "PPGetDukptKSN_Api.(I[B)I";
			IntPtr native_KsnOut = JNIEnv.NewArray (KsnOut);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (GroupIdx);
				__args [1] = new JniArgumentValue (native_KsnOut);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (KsnOut != null) {
					JNIEnv.CopyArray (native_KsnOut, KsnOut);
					JNIEnv.DeleteLocalRef (native_KsnOut);
				}
				global::System.GC.KeepAlive (KsnOut);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PinpadApi']/method[@name='PPGetEMVOfflinePin_Api' and count(parameter)=3 and parameter[1][@type='int'] and parameter[2][@type='int'] and parameter[3][@type='int']]"
		[Register ("PPGetEMVOfflinePin_Api", "(III)I", "")]
		public static unsafe int PPGetEMVOfflinePin_Api (int min, int max, int timeOut)
		{
			const string __id = "PPGetEMVOfflinePin_Api.(III)I";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (min);
				__args [1] = new JniArgumentValue (max);
				__args [2] = new JniArgumentValue (timeOut);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PinpadApi']/method[@name='PPGetExpress_Api' and count(parameter)=0]"
		[Register ("PPGetExpress_Api", "()I", "")]
		public static unsafe int PPGetExpress_Api ()
		{
			const string __id = "PPGetExpress_Api.()I";
			try {
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, null);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PinpadApi']/method[@name='PPGetExpress_Api' and count(parameter)=1 and parameter[1][@type='byte[]']]"
		[Register ("PPGetExpress_Api", "([B)I", "")]
		public static unsafe int PPGetExpress_Api (byte[]? ExPressPinOut)
		{
			const string __id = "PPGetExpress_Api.([B)I";
			IntPtr native_ExPressPinOut = JNIEnv.NewArray (ExPressPinOut);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_ExPressPinOut);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (ExPressPinOut != null) {
					JNIEnv.CopyArray (native_ExPressPinOut, ExPressPinOut);
					JNIEnv.DeleteLocalRef (native_ExPressPinOut);
				}
				global::System.GC.KeepAlive (ExPressPinOut);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PinpadApi']/method[@name='PPGetMacDukpt_Api' and count(parameter)=7 and parameter[1][@type='int'] and parameter[2][@type='int'] and parameter[3][@type='byte[]'] and parameter[4][@type='int'] and parameter[5][@type='byte[]'] and parameter[6][@type='byte[]'] and parameter[7][@type='int']]"
		[Register ("PPGetMacDukpt_Api", "(II[BI[B[BI)I", "")]
		public static unsafe int PPGetMacDukpt_Api (int GroupIdx, int IncKsn, byte[]? DataIn, int DataInLen, byte[]? MacOut, byte[]? KsnOut, int Mode)
		{
			const string __id = "PPGetMacDukpt_Api.(II[BI[B[BI)I";
			IntPtr native_DataIn = JNIEnv.NewArray (DataIn);
			IntPtr native_MacOut = JNIEnv.NewArray (MacOut);
			IntPtr native_KsnOut = JNIEnv.NewArray (KsnOut);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [7];
				__args [0] = new JniArgumentValue (GroupIdx);
				__args [1] = new JniArgumentValue (IncKsn);
				__args [2] = new JniArgumentValue (native_DataIn);
				__args [3] = new JniArgumentValue (DataInLen);
				__args [4] = new JniArgumentValue (native_MacOut);
				__args [5] = new JniArgumentValue (native_KsnOut);
				__args [6] = new JniArgumentValue (Mode);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (DataIn != null) {
					JNIEnv.CopyArray (native_DataIn, DataIn);
					JNIEnv.DeleteLocalRef (native_DataIn);
				}
				if (MacOut != null) {
					JNIEnv.CopyArray (native_MacOut, MacOut);
					JNIEnv.DeleteLocalRef (native_MacOut);
				}
				if (KsnOut != null) {
					JNIEnv.CopyArray (native_KsnOut, KsnOut);
					JNIEnv.DeleteLocalRef (native_KsnOut);
				}
				global::System.GC.KeepAlive (DataIn);
				global::System.GC.KeepAlive (MacOut);
				global::System.GC.KeepAlive (KsnOut);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PinpadApi']/method[@name='PPGetPinDukpt_Api' and count(parameter)=7 and parameter[1][@type='int'] and parameter[2][@type='int'] and parameter[3][@type='int'] and parameter[4][@type='int'] and parameter[5][@type='byte[]'] and parameter[6][@type='byte[]'] and parameter[7][@type='byte[]']]"
		[Register ("PPGetPinDukpt_Api", "(IIII[B[B[B)I", "")]
		public static unsafe int PPGetPinDukpt_Api (int GroupIdx, int IncKsn, int min, int max, byte[]? CardNo, byte[]? KsnOut, byte[]? PinBlockOut)
		{
			const string __id = "PPGetPinDukpt_Api.(IIII[B[B[B)I";
			IntPtr native_CardNo = JNIEnv.NewArray (CardNo);
			IntPtr native_KsnOut = JNIEnv.NewArray (KsnOut);
			IntPtr native_PinBlockOut = JNIEnv.NewArray (PinBlockOut);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [7];
				__args [0] = new JniArgumentValue (GroupIdx);
				__args [1] = new JniArgumentValue (IncKsn);
				__args [2] = new JniArgumentValue (min);
				__args [3] = new JniArgumentValue (max);
				__args [4] = new JniArgumentValue (native_CardNo);
				__args [5] = new JniArgumentValue (native_KsnOut);
				__args [6] = new JniArgumentValue (native_PinBlockOut);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (CardNo != null) {
					JNIEnv.CopyArray (native_CardNo, CardNo);
					JNIEnv.DeleteLocalRef (native_CardNo);
				}
				if (KsnOut != null) {
					JNIEnv.CopyArray (native_KsnOut, KsnOut);
					JNIEnv.DeleteLocalRef (native_KsnOut);
				}
				if (PinBlockOut != null) {
					JNIEnv.CopyArray (native_PinBlockOut, PinBlockOut);
					JNIEnv.DeleteLocalRef (native_PinBlockOut);
				}
				global::System.GC.KeepAlive (CardNo);
				global::System.GC.KeepAlive (KsnOut);
				global::System.GC.KeepAlive (PinBlockOut);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PinpadApi']/method[@name='PPGetPwd_Api' and count(parameter)=6 and parameter[1][@type='int'] and parameter[2][@type='int'] and parameter[3][@type='int'] and parameter[4][@type='byte[]'] and parameter[5][@type='byte[]'] and parameter[6][@type='int']]"
		[Register ("PPGetPwd_Api", "(III[B[BI)I", "")]
		public static unsafe int PPGetPwd_Api (int wkindex, int min, int max, byte[]? cardNo, byte[]? pin, int mode)
		{
			const string __id = "PPGetPwd_Api.(III[B[BI)I";
			IntPtr native_cardNo = JNIEnv.NewArray (cardNo);
			IntPtr native_pin = JNIEnv.NewArray (pin);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [6];
				__args [0] = new JniArgumentValue (wkindex);
				__args [1] = new JniArgumentValue (min);
				__args [2] = new JniArgumentValue (max);
				__args [3] = new JniArgumentValue (native_cardNo);
				__args [4] = new JniArgumentValue (native_pin);
				__args [5] = new JniArgumentValue (mode);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (cardNo != null) {
					JNIEnv.CopyArray (native_cardNo, cardNo);
					JNIEnv.DeleteLocalRef (native_cardNo);
				}
				if (pin != null) {
					JNIEnv.CopyArray (native_pin, pin);
					JNIEnv.DeleteLocalRef (native_pin);
				}
				global::System.GC.KeepAlive (cardNo);
				global::System.GC.KeepAlive (pin);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PinpadApi']/method[@name='PPGetScanfEx_Api' and count(parameter)=9 and parameter[1][@type='int'] and parameter[2][@type='int'] and parameter[3][@type='int'] and parameter[4][@type='byte[]'] and parameter[5][@type='int'] and parameter[6][@type='int'] and parameter[7][@type='int'] and parameter[8][@type='int'] and parameter[9][@type='int']]"
		[Register ("PPGetScanfEx_Api", "(III[BIIIII)I", "")]
		public static unsafe int PPGetScanfEx_Api (int Mode, int Min, int Max, byte[]? outBuf, int TimeOut, int StartRow, int EndRow, int HowStr, int DefMode)
		{
			const string __id = "PPGetScanfEx_Api.(III[BIIIII)I";
			IntPtr native_outBuf = JNIEnv.NewArray (outBuf);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [9];
				__args [0] = new JniArgumentValue (Mode);
				__args [1] = new JniArgumentValue (Min);
				__args [2] = new JniArgumentValue (Max);
				__args [3] = new JniArgumentValue (native_outBuf);
				__args [4] = new JniArgumentValue (TimeOut);
				__args [5] = new JniArgumentValue (StartRow);
				__args [6] = new JniArgumentValue (EndRow);
				__args [7] = new JniArgumentValue (HowStr);
				__args [8] = new JniArgumentValue (DefMode);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (outBuf != null) {
					JNIEnv.CopyArray (native_outBuf, outBuf);
					JNIEnv.DeleteLocalRef (native_outBuf);
				}
				global::System.GC.KeepAlive (outBuf);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PinpadApi']/method[@name='PPGetVersion_Api' and count(parameter)=2 and parameter[1][@type='byte[]'] and parameter[2][@type='byte[]']]"
		[Register ("PPGetVersion_Api", "([B[B)I", "")]
		public static unsafe int PPGetVersion_Api (byte[]? lpOut, byte[]? VersionNum)
		{
			const string __id = "PPGetVersion_Api.([B[B)I";
			IntPtr native_lpOut = JNIEnv.NewArray (lpOut);
			IntPtr native_VersionNum = JNIEnv.NewArray (VersionNum);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_lpOut);
				__args [1] = new JniArgumentValue (native_VersionNum);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (lpOut != null) {
					JNIEnv.CopyArray (native_lpOut, lpOut);
					JNIEnv.DeleteLocalRef (native_lpOut);
				}
				if (VersionNum != null) {
					JNIEnv.CopyArray (native_VersionNum, VersionNum);
					JNIEnv.DeleteLocalRef (native_VersionNum);
				}
				global::System.GC.KeepAlive (lpOut);
				global::System.GC.KeepAlive (VersionNum);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PinpadApi']/method[@name='PPMac_Api' and count(parameter)=6 and parameter[1][@type='int'] and parameter[2][@type='int'] and parameter[3][@type='byte[]'] and parameter[4][@type='int'] and parameter[5][@type='byte[]'] and parameter[6][@type='int']]"
		[Register ("PPMac_Api", "(II[BI[BI)I", "")]
		public static unsafe int PPMac_Api (int wkindex, int mode, byte[]? data, int Len, byte[]? Out, int flag)
		{
			const string __id = "PPMac_Api.(II[BI[BI)I";
			IntPtr native_data = JNIEnv.NewArray (data);
			IntPtr native_Out = JNIEnv.NewArray (Out);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [6];
				__args [0] = new JniArgumentValue (wkindex);
				__args [1] = new JniArgumentValue (mode);
				__args [2] = new JniArgumentValue (native_data);
				__args [3] = new JniArgumentValue (Len);
				__args [4] = new JniArgumentValue (native_Out);
				__args [5] = new JniArgumentValue (flag);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (data != null) {
					JNIEnv.CopyArray (native_data, data);
					JNIEnv.DeleteLocalRef (native_data);
				}
				if (Out != null) {
					JNIEnv.CopyArray (native_Out, Out);
					JNIEnv.DeleteLocalRef (native_Out);
				}
				global::System.GC.KeepAlive (data);
				global::System.GC.KeepAlive (Out);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PinpadApi']/method[@name='PPPInitEx_Api' and count(parameter)=0]"
		[Register ("PPPInitEx_Api", "()I", "")]
		public static unsafe int PPPInitEx_Api ()
		{
			const string __id = "PPPInitEx_Api.()I";
			try {
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, null);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PinpadApi']/method[@name='PPPowerOff_Api' and count(parameter)=0]"
		[Register ("PPPowerOff_Api", "()V", "")]
		public static unsafe void PPPowerOff_Api ()
		{
			const string __id = "PPPowerOff_Api.()V";
			try {
				_members.StaticMethods.InvokeVoidMethod (__id, null);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PinpadApi']/method[@name='PPPowerOn_Api' and count(parameter)=0]"
		[Register ("PPPowerOn_Api", "()V", "")]
		public static unsafe void PPPowerOn_Api ()
		{
			const string __id = "PPPowerOn_Api.()V";
			try {
				_members.StaticMethods.InvokeVoidMethod (__id, null);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PinpadApi']/method[@name='PPPreGetPwd_Api' and count(parameter)=4 and parameter[1][@type='byte[]'] and parameter[2][@type='int'] and parameter[3][@type='byte[]'] and parameter[4][@type='int']]"
		[Register ("PPPreGetPwd_Api", "([BI[BI)I", "")]
		public static unsafe int PPPreGetPwd_Api (byte[]? IndexS, int IndexLen, byte[]? TlvBuf, int TlvLen)
		{
			const string __id = "PPPreGetPwd_Api.([BI[BI)I";
			IntPtr native_IndexS = JNIEnv.NewArray (IndexS);
			IntPtr native_TlvBuf = JNIEnv.NewArray (TlvBuf);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [4];
				__args [0] = new JniArgumentValue (native_IndexS);
				__args [1] = new JniArgumentValue (IndexLen);
				__args [2] = new JniArgumentValue (native_TlvBuf);
				__args [3] = new JniArgumentValue (TlvLen);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (IndexS != null) {
					JNIEnv.CopyArray (native_IndexS, IndexS);
					JNIEnv.DeleteLocalRef (native_IndexS);
				}
				if (TlvBuf != null) {
					JNIEnv.CopyArray (native_TlvBuf, TlvBuf);
					JNIEnv.DeleteLocalRef (native_TlvBuf);
				}
				global::System.GC.KeepAlive (IndexS);
				global::System.GC.KeepAlive (TlvBuf);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PinpadApi']/method[@name='PPReadPinPadSn_Api' and count(parameter)=1 and parameter[1][@type='byte[]']]"
		[Register ("PPReadPinPadSn_Api", "([B)I", "")]
		public static unsafe int PPReadPinPadSn_Api (byte[]? Sn)
		{
			const string __id = "PPReadPinPadSn_Api.([B)I";
			IntPtr native_Sn = JNIEnv.NewArray (Sn);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_Sn);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (Sn != null) {
					JNIEnv.CopyArray (native_Sn, Sn);
					JNIEnv.DeleteLocalRef (native_Sn);
				}
				global::System.GC.KeepAlive (Sn);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PinpadApi']/method[@name='PPSavePinPadSn_Api' and count(parameter)=1 and parameter[1][@type='byte[]']]"
		[Register ("PPSavePinPadSn_Api", "([B)I", "")]
		public static unsafe int PPSavePinPadSn_Api (byte[]? Sn)
		{
			const string __id = "PPSavePinPadSn_Api.([B)I";
			IntPtr native_Sn = JNIEnv.NewArray (Sn);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_Sn);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (Sn != null) {
					JNIEnv.CopyArray (native_Sn, Sn);
					JNIEnv.DeleteLocalRef (native_Sn);
				}
				global::System.GC.KeepAlive (Sn);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PinpadApi']/method[@name='PPScrCls_Api' and count(parameter)=0]"
		[Register ("PPScrCls_Api", "()V", "")]
		public static unsafe void PPScrCls_Api ()
		{
			const string __id = "PPScrCls_Api.()V";
			try {
				_members.StaticMethods.InvokeVoidMethod (__id, null);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PinpadApi']/method[@name='PPSetBaude_Api' and count(parameter)=1 and parameter[1][@type='int']]"
		[Register ("PPSetBaude_Api", "(I)I", "")]
		public static unsafe int PPSetBaude_Api (int baude)
		{
			const string __id = "PPSetBaude_Api.(I)I";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (baude);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PinpadApi']/method[@name='PPUpdateAssetZipFiles_Api' and count(parameter)=3 and parameter[1][@type='android.content.Context'] and parameter[2][@type='java.lang.String'] and parameter[3][@type='com.vanstone.utils.PPUpdate.IUpdatePinPadListener']]"
		[Register ("PPUpdateAssetZipFiles_Api", "(Landroid/content/Context;Ljava/lang/String;Lcom/vanstone/utils/PPUpdate$IUpdatePinPadListener;)I", "")]
		public static unsafe int PPUpdateAssetZipFiles_Api (global::Android.Content.Context? MyContext, string? ZipName, global::Com.Vanstone.Utils.PPUpdate.IUpdatePinPadListener? Listner)
		{
			const string __id = "PPUpdateAssetZipFiles_Api.(Landroid/content/Context;Ljava/lang/String;Lcom/vanstone/utils/PPUpdate$IUpdatePinPadListener;)I";
			IntPtr native_ZipName = JNIEnv.NewString ((string?)ZipName);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue ((MyContext == null) ? IntPtr.Zero : ((global::Java.Lang.Object) MyContext).Handle);
				__args [1] = new JniArgumentValue (native_ZipName);
				__args [2] = new JniArgumentValue ((Listner == null) ? IntPtr.Zero : ((global::Java.Lang.Object) Listner).Handle);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				JNIEnv.DeleteLocalRef (native_ZipName);
				global::System.GC.KeepAlive (MyContext);
				global::System.GC.KeepAlive (Listner);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PinpadApi']/method[@name='PPUpdateAutoFromOTA_Api' and count(parameter)=1 and parameter[1][@type='com.vanstone.utils.PPUpdate.IUpdatePinPadListener']]"
		[Register ("PPUpdateAutoFromOTA_Api", "(Lcom/vanstone/utils/PPUpdate$IUpdatePinPadListener;)I", "")]
		public static unsafe int PPUpdateAutoFromOTA_Api (global::Com.Vanstone.Utils.PPUpdate.IUpdatePinPadListener? Listner)
		{
			const string __id = "PPUpdateAutoFromOTA_Api.(Lcom/vanstone/utils/PPUpdate$IUpdatePinPadListener;)I";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue ((Listner == null) ? IntPtr.Zero : ((global::Java.Lang.Object) Listner).Handle);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				global::System.GC.KeepAlive (Listner);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PinpadApi']/method[@name='PPWriteIcBcKey_Api' and count(parameter)=7 and parameter[1][@type='byte[]'] and parameter[2][@type='int'] and parameter[3][@type='int'] and parameter[4][@type='int'] and parameter[5][@type='int'] and parameter[6][@type='int'] and parameter[7][@type='byte[]']]"
		[Register ("PPWriteIcBcKey_Api", "([BIIIII[B)I", "")]
		public static unsafe int PPWriteIcBcKey_Api (byte[]? Inbuf, int AKeyIndes, int MasteKeyIndes, int MacKeyIndes, int PinKeyIndes, int Flag28, byte[]? BitMap)
		{
			const string __id = "PPWriteIcBcKey_Api.([BIIIII[B)I";
			IntPtr native_Inbuf = JNIEnv.NewArray (Inbuf);
			IntPtr native_BitMap = JNIEnv.NewArray (BitMap);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [7];
				__args [0] = new JniArgumentValue (native_Inbuf);
				__args [1] = new JniArgumentValue (AKeyIndes);
				__args [2] = new JniArgumentValue (MasteKeyIndes);
				__args [3] = new JniArgumentValue (MacKeyIndes);
				__args [4] = new JniArgumentValue (PinKeyIndes);
				__args [5] = new JniArgumentValue (Flag28);
				__args [6] = new JniArgumentValue (native_BitMap);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (Inbuf != null) {
					JNIEnv.CopyArray (native_Inbuf, Inbuf);
					JNIEnv.DeleteLocalRef (native_Inbuf);
				}
				if (BitMap != null) {
					JNIEnv.CopyArray (native_BitMap, BitMap);
					JNIEnv.DeleteLocalRef (native_BitMap);
				}
				global::System.GC.KeepAlive (Inbuf);
				global::System.GC.KeepAlive (BitMap);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PinpadApi']/method[@name='PPWriteKey_Api' and count(parameter)=6 and parameter[1][@type='int'] and parameter[2][@type='int'] and parameter[3][@type='byte[]'] and parameter[4][@type='int'] and parameter[5][@type='int'] and parameter[6][@type='byte[]']]"
		[Register ("PPWriteKey_Api", "(II[BII[B)I", "")]
		public static unsafe int PPWriteKey_Api (int SKeyIndex, int DKeyIndex, byte[]? DKey, int DKeyType, int mode, byte[]? KVRData)
		{
			const string __id = "PPWriteKey_Api.(II[BII[B)I";
			IntPtr native_DKey = JNIEnv.NewArray (DKey);
			IntPtr native_KVRData = JNIEnv.NewArray (KVRData);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [6];
				__args [0] = new JniArgumentValue (SKeyIndex);
				__args [1] = new JniArgumentValue (DKeyIndex);
				__args [2] = new JniArgumentValue (native_DKey);
				__args [3] = new JniArgumentValue (DKeyType);
				__args [4] = new JniArgumentValue (mode);
				__args [5] = new JniArgumentValue (native_KVRData);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (DKey != null) {
					JNIEnv.CopyArray (native_DKey, DKey);
					JNIEnv.DeleteLocalRef (native_DKey);
				}
				if (KVRData != null) {
					JNIEnv.CopyArray (native_KVRData, KVRData);
					JNIEnv.DeleteLocalRef (native_KVRData);
				}
				global::System.GC.KeepAlive (DKey);
				global::System.GC.KeepAlive (KVRData);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PinpadApi']/method[@name='PPWriteMKey_Api' and count(parameter)=3 and parameter[1][@type='int'] and parameter[2][@type='int'] and parameter[3][@type='byte[]']]"
		[Register ("PPWriteMKey_Api", "(II[B)I", "")]
		public static unsafe int PPWriteMKey_Api (int mkindex, int mode, byte[]? data)
		{
			const string __id = "PPWriteMKey_Api.(II[B)I";
			IntPtr native_data = JNIEnv.NewArray (data);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (mkindex);
				__args [1] = new JniArgumentValue (mode);
				__args [2] = new JniArgumentValue (native_data);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (data != null) {
					JNIEnv.CopyArray (native_data, data);
					JNIEnv.DeleteLocalRef (native_data);
				}
				global::System.GC.KeepAlive (data);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PinpadApi']/method[@name='PPWriteWKey_Api' and count(parameter)=4 and parameter[1][@type='int'] and parameter[2][@type='int'] and parameter[3][@type='int'] and parameter[4][@type='byte[]']]"
		[Register ("PPWriteWKey_Api", "(III[B)I", "")]
		public static unsafe int PPWriteWKey_Api (int MkeyIndex, int WkeyIndex, int mode, byte[]? data)
		{
			const string __id = "PPWriteWKey_Api.(III[B)I";
			IntPtr native_data = JNIEnv.NewArray (data);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [4];
				__args [0] = new JniArgumentValue (MkeyIndex);
				__args [1] = new JniArgumentValue (WkeyIndex);
				__args [2] = new JniArgumentValue (mode);
				__args [3] = new JniArgumentValue (native_data);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (data != null) {
					JNIEnv.CopyArray (native_data, data);
					JNIEnv.DeleteLocalRef (native_data);
				}
				global::System.GC.KeepAlive (data);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PinpadApi']/method[@name='ScrPinpadFaceEx_Api' and count(parameter)=2 and parameter[1][@type='java.util.List&lt;com.vanstone.utils.PinpadFace&gt;'] and parameter[2][@type='int']]"
		[Register ("ScrPinpadFaceEx_Api", "(Ljava/util/List;I)I", "")]
		public static unsafe int ScrPinpadFaceEx_Api (global::System.Collections.Generic.IList<global::Com.Vanstone.Utils.PinpadFace>? Faces, int NumLine)
		{
			const string __id = "ScrPinpadFaceEx_Api.(Ljava/util/List;I)I";
			IntPtr native_Faces = global::Android.Runtime.JavaList<global::Com.Vanstone.Utils.PinpadFace>.ToLocalJniHandle (Faces);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_Faces);
				__args [1] = new JniArgumentValue (NumLine);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				JNIEnv.DeleteLocalRef (native_Faces);
				global::System.GC.KeepAlive (Faces);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PinpadApi']/method[@name='WaitAnyKeyEx_Api' and count(parameter)=1 and parameter[1][@type='int']]"
		[Register ("WaitAnyKeyEx_Api", "(I)I", "")]
		public static unsafe int WaitAnyKeyEx_Api (int TimeOuts)
		{
			const string __id = "WaitAnyKeyEx_Api.(I)I";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (TimeOuts);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
			}
		}

	}
}
