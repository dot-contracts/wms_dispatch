//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable restore
using System;
using System.Collections.Generic;
using Android.Runtime;
using Java.Interop;

namespace Com.Vanstone.Trans.Api.Jni {

	// Metadata.xml XPath class reference: path="/api/package[@name='com.vanstone.trans.api.jni']/class[@name='JCallback']"
	[global::Android.Runtime.Register ("com/vanstone/trans/api/jni/JCallback", DoNotGenerateAcw=true)]
	public partial class JCallback : global::Java.Lang.Object {
		static readonly JniPeerMembers _members = new XAPeerMembers ("com/vanstone/trans/api/jni/JCallback", typeof (JCallback));

		internal static IntPtr class_ref {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		public override global::Java.Interop.JniPeerMembers JniPeerMembers {
			get { return _members; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override IntPtr ThresholdClass {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override global::System.Type ThresholdType {
			get { return _members.ManagedPeerType; }
		}

		protected JCallback (IntPtr javaReference, JniHandleOwnership transfer) : base (javaReference, transfer)
		{
		}

		// Metadata.xml XPath constructor reference: path="/api/package[@name='com.vanstone.trans.api.jni']/class[@name='JCallback']/constructor[@name='JCallback' and count(parameter)=0]"
		[Register (".ctor", "()V", "")]
		public unsafe JCallback () : base (IntPtr.Zero, JniHandleOwnership.DoNotTransfer)
		{
			const string __id = "()V";

			if (((global::Java.Lang.Object) this).Handle != IntPtr.Zero)
				return;

			try {
				var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), null);
				SetHandle (__r.Handle, JniHandleOwnership.TransferLocalRef);
				_members.InstanceMethods.FinishCreateInstance (__id, this, null);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api.jni']/class[@name='JCallback']/method[@name='DelFile_Api' and count(parameter)=1 and parameter[1][@type='byte[]']]"
		[Register ("DelFile_Api", "([B)I", "")]
		public static unsafe int DelFile_Api (byte[]? FileName)
		{
			const string __id = "DelFile_Api.([B)I";
			IntPtr native_FileName = JNIEnv.NewArray (FileName);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_FileName);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (FileName != null) {
					JNIEnv.CopyArray (native_FileName, FileName);
					JNIEnv.DeleteLocalRef (native_FileName);
				}
				global::System.GC.KeepAlive (FileName);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api.jni']/class[@name='JCallback']/method[@name='Delay_Api' and count(parameter)=1 and parameter[1][@type='int']]"
		[Register ("Delay_Api", "(I)V", "")]
		public static unsafe void Delay_Api (int ms)
		{
			const string __id = "Delay_Api.(I)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (ms);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api.jni']/class[@name='JCallback']/method[@name='GetFileSize_Api' and count(parameter)=1 and parameter[1][@type='byte[]']]"
		[Register ("GetFileSize_Api", "([B)I", "")]
		public static unsafe int GetFileSize_Api (byte[]? FileName)
		{
			const string __id = "GetFileSize_Api.([B)I";
			IntPtr native_FileName = JNIEnv.NewArray (FileName);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_FileName);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (FileName != null) {
					JNIEnv.CopyArray (native_FileName, FileName);
					JNIEnv.DeleteLocalRef (native_FileName);
				}
				global::System.GC.KeepAlive (FileName);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api.jni']/class[@name='JCallback']/method[@name='GetSysTime_Api' and count(parameter)=1 and parameter[1][@type='byte[]']]"
		[Register ("GetSysTime_Api", "([B)V", "")]
		public static unsafe void GetSysTime_Api (byte[]? Buf)
		{
			const string __id = "GetSysTime_Api.([B)V";
			IntPtr native_Buf = JNIEnv.NewArray (Buf);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_Buf);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				if (Buf != null) {
					JNIEnv.CopyArray (native_Buf, Buf);
					JNIEnv.DeleteLocalRef (native_Buf);
				}
				global::System.GC.KeepAlive (Buf);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api.jni']/class[@name='JCallback']/method[@name='IccDetect_Api' and count(parameter)=1 and parameter[1][@type='int']]"
		[Register ("IccDetect_Api", "(I)I", "")]
		public static unsafe int IccDetect_Api (int CardNo)
		{
			const string __id = "IccDetect_Api.(I)I";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (CardNo);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api.jni']/class[@name='JCallback']/method[@name='IccInit_Api' and count(parameter)=4 and parameter[1][@type='int'] and parameter[2][@type='int'] and parameter[3][@type='byte[]'] and parameter[4][@type='byte[]']]"
		[Register ("IccInit_Api", "(II[B[B)I", "")]
		public static unsafe int IccInit_Api (int CardNo, int VccMode, byte[]? RstBuf, byte[]? Rlen)
		{
			const string __id = "IccInit_Api.(II[B[B)I";
			IntPtr native_RstBuf = JNIEnv.NewArray (RstBuf);
			IntPtr native_Rlen = JNIEnv.NewArray (Rlen);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [4];
				__args [0] = new JniArgumentValue (CardNo);
				__args [1] = new JniArgumentValue (VccMode);
				__args [2] = new JniArgumentValue (native_RstBuf);
				__args [3] = new JniArgumentValue (native_Rlen);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (RstBuf != null) {
					JNIEnv.CopyArray (native_RstBuf, RstBuf);
					JNIEnv.DeleteLocalRef (native_RstBuf);
				}
				if (Rlen != null) {
					JNIEnv.CopyArray (native_Rlen, Rlen);
					JNIEnv.DeleteLocalRef (native_Rlen);
				}
				global::System.GC.KeepAlive (RstBuf);
				global::System.GC.KeepAlive (Rlen);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api.jni']/class[@name='JCallback']/method[@name='IccIsoCommandEx_Api' and count(parameter)=3 and parameter[1][@type='byte'] and parameter[2][@type='byte[]'] and parameter[3][@type='byte[]']]"
		[Register ("IccIsoCommandEx_Api", "(B[B[B)V", "")]
		public static unsafe void IccIsoCommandEx_Api (sbyte CardNo, byte[]? apduSend, byte[]? apduResp)
		{
			const string __id = "IccIsoCommandEx_Api.(B[B[B)V";
			IntPtr native_apduSend = JNIEnv.NewArray (apduSend);
			IntPtr native_apduResp = JNIEnv.NewArray (apduResp);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (CardNo);
				__args [1] = new JniArgumentValue (native_apduSend);
				__args [2] = new JniArgumentValue (native_apduResp);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				if (apduSend != null) {
					JNIEnv.CopyArray (native_apduSend, apduSend);
					JNIEnv.DeleteLocalRef (native_apduSend);
				}
				if (apduResp != null) {
					JNIEnv.CopyArray (native_apduResp, apduResp);
					JNIEnv.DeleteLocalRef (native_apduResp);
				}
				global::System.GC.KeepAlive (apduSend);
				global::System.GC.KeepAlive (apduResp);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api.jni']/class[@name='JCallback']/method[@name='IccIsoCommand_Api' and count(parameter)=3 and parameter[1][@type='byte'] and parameter[2][@type='byte[]'] and parameter[3][@type='byte[]']]"
		[Register ("IccIsoCommand_Api", "(B[B[B)V", "")]
		public static unsafe void IccIsoCommand_Api (sbyte CardNo, byte[]? apduSend, byte[]? apduResp)
		{
			const string __id = "IccIsoCommand_Api.(B[B[B)V";
			IntPtr native_apduSend = JNIEnv.NewArray (apduSend);
			IntPtr native_apduResp = JNIEnv.NewArray (apduResp);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (CardNo);
				__args [1] = new JniArgumentValue (native_apduSend);
				__args [2] = new JniArgumentValue (native_apduResp);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				if (apduSend != null) {
					JNIEnv.CopyArray (native_apduSend, apduSend);
					JNIEnv.DeleteLocalRef (native_apduSend);
				}
				if (apduResp != null) {
					JNIEnv.CopyArray (native_apduResp, apduResp);
					JNIEnv.DeleteLocalRef (native_apduResp);
				}
				global::System.GC.KeepAlive (apduSend);
				global::System.GC.KeepAlive (apduResp);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api.jni']/class[@name='JCallback']/method[@name='PPPortSetBaudC' and count(parameter)=4 and parameter[1][@type='int'] and parameter[2][@type='int'] and parameter[3][@type='int'] and parameter[4][@type='int']]"
		[Register ("PPPortSetBaudC", "(IIII)I", "")]
		public static unsafe int PPPortSetBaudC (int baud, int databits, int parity, int stopbits)
		{
			const string __id = "PPPortSetBaudC.(IIII)I";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [4];
				__args [0] = new JniArgumentValue (baud);
				__args [1] = new JniArgumentValue (databits);
				__args [2] = new JniArgumentValue (parity);
				__args [3] = new JniArgumentValue (stopbits);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api.jni']/class[@name='JCallback']/method[@name='PiccIsoCommandEx_Api' and count(parameter)=2 and parameter[1][@type='byte[]'] and parameter[2][@type='byte[]']]"
		[Register ("PiccIsoCommandEx_Api", "([B[B)V", "")]
		public static unsafe void PiccIsoCommandEx_Api (byte[]? apduSend, byte[]? apduResp)
		{
			const string __id = "PiccIsoCommandEx_Api.([B[B)V";
			IntPtr native_apduSend = JNIEnv.NewArray (apduSend);
			IntPtr native_apduResp = JNIEnv.NewArray (apduResp);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_apduSend);
				__args [1] = new JniArgumentValue (native_apduResp);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				if (apduSend != null) {
					JNIEnv.CopyArray (native_apduSend, apduSend);
					JNIEnv.DeleteLocalRef (native_apduSend);
				}
				if (apduResp != null) {
					JNIEnv.CopyArray (native_apduResp, apduResp);
					JNIEnv.DeleteLocalRef (native_apduResp);
				}
				global::System.GC.KeepAlive (apduSend);
				global::System.GC.KeepAlive (apduResp);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api.jni']/class[@name='JCallback']/method[@name='PiccIsoCommand_Api' and count(parameter)=2 and parameter[1][@type='byte[]'] and parameter[2][@type='byte[]']]"
		[Register ("PiccIsoCommand_Api", "([B[B)V", "")]
		public static unsafe void PiccIsoCommand_Api (byte[]? apduSend, byte[]? apduResp)
		{
			const string __id = "PiccIsoCommand_Api.([B[B)V";
			IntPtr native_apduSend = JNIEnv.NewArray (apduSend);
			IntPtr native_apduResp = JNIEnv.NewArray (apduResp);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_apduSend);
				__args [1] = new JniArgumentValue (native_apduResp);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				if (apduSend != null) {
					JNIEnv.CopyArray (native_apduSend, apduSend);
					JNIEnv.DeleteLocalRef (native_apduSend);
				}
				if (apduResp != null) {
					JNIEnv.CopyArray (native_apduResp, apduResp);
					JNIEnv.DeleteLocalRef (native_apduResp);
				}
				global::System.GC.KeepAlive (apduSend);
				global::System.GC.KeepAlive (apduResp);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api.jni']/class[@name='JCallback']/method[@name='PortSends_Api' and count(parameter)=3 and parameter[1][@type='int'] and parameter[2][@type='byte[]'] and parameter[3][@type='int']]"
		[Register ("PortSends_Api", "(I[BI)I", "")]
		public static unsafe int PortSends_Api (int comport, byte[]? buf, int len)
		{
			const string __id = "PortSends_Api.(I[BI)I";
			IntPtr native_buf = JNIEnv.NewArray (buf);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (comport);
				__args [1] = new JniArgumentValue (native_buf);
				__args [2] = new JniArgumentValue (len);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (buf != null) {
					JNIEnv.CopyArray (native_buf, buf);
					JNIEnv.DeleteLocalRef (native_buf);
				}
				global::System.GC.KeepAlive (buf);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api.jni']/class[@name='JCallback']/method[@name='ReNameFile_Api' and count(parameter)=2 and parameter[1][@type='byte[]'] and parameter[2][@type='byte[]']]"
		[Register ("ReNameFile_Api", "([B[B)I", "")]
		public static unsafe int ReNameFile_Api (byte[]? OldfName, byte[]? NewFileName)
		{
			const string __id = "ReNameFile_Api.([B[B)I";
			IntPtr native_OldfName = JNIEnv.NewArray (OldfName);
			IntPtr native_NewFileName = JNIEnv.NewArray (NewFileName);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_OldfName);
				__args [1] = new JniArgumentValue (native_NewFileName);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (OldfName != null) {
					JNIEnv.CopyArray (native_OldfName, OldfName);
					JNIEnv.DeleteLocalRef (native_OldfName);
				}
				if (NewFileName != null) {
					JNIEnv.CopyArray (native_NewFileName, NewFileName);
					JNIEnv.DeleteLocalRef (native_NewFileName);
				}
				global::System.GC.KeepAlive (OldfName);
				global::System.GC.KeepAlive (NewFileName);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api.jni']/class[@name='JCallback']/method[@name='ReadFile_Api' and count(parameter)=4 and parameter[1][@type='byte[]'] and parameter[2][@type='byte[]'] and parameter[3][@type='int'] and parameter[4][@type='byte[]']]"
		[Register ("ReadFile_Api", "([B[BI[B)I", "")]
		public static unsafe int ReadFile_Api (byte[]? FileName, byte[]? Buf, int Start, byte[]? Length)
		{
			const string __id = "ReadFile_Api.([B[BI[B)I";
			IntPtr native_FileName = JNIEnv.NewArray (FileName);
			IntPtr native_Buf = JNIEnv.NewArray (Buf);
			IntPtr native_Length = JNIEnv.NewArray (Length);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [4];
				__args [0] = new JniArgumentValue (native_FileName);
				__args [1] = new JniArgumentValue (native_Buf);
				__args [2] = new JniArgumentValue (Start);
				__args [3] = new JniArgumentValue (native_Length);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (FileName != null) {
					JNIEnv.CopyArray (native_FileName, FileName);
					JNIEnv.DeleteLocalRef (native_FileName);
				}
				if (Buf != null) {
					JNIEnv.CopyArray (native_Buf, Buf);
					JNIEnv.DeleteLocalRef (native_Buf);
				}
				if (Length != null) {
					JNIEnv.CopyArray (native_Length, Length);
					JNIEnv.DeleteLocalRef (native_Length);
				}
				global::System.GC.KeepAlive (FileName);
				global::System.GC.KeepAlive (Buf);
				global::System.GC.KeepAlive (Length);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api.jni']/class[@name='JCallback']/method[@name='Rs232ReadC' and count(parameter)=4 and parameter[1][@type='int'] and parameter[2][@type='byte[]'] and parameter[3][@type='byte[]'] and parameter[4][@type='int']]"
		[Register ("Rs232ReadC", "(I[B[BI)I", "")]
		public static unsafe int Rs232ReadC (int funcId, byte[]? RecvBufEnv, byte[]? iRecvLen, int timeOut)
		{
			const string __id = "Rs232ReadC.(I[B[BI)I";
			IntPtr native_RecvBufEnv = JNIEnv.NewArray (RecvBufEnv);
			IntPtr native_iRecvLen = JNIEnv.NewArray (iRecvLen);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [4];
				__args [0] = new JniArgumentValue (funcId);
				__args [1] = new JniArgumentValue (native_RecvBufEnv);
				__args [2] = new JniArgumentValue (native_iRecvLen);
				__args [3] = new JniArgumentValue (timeOut);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (RecvBufEnv != null) {
					JNIEnv.CopyArray (native_RecvBufEnv, RecvBufEnv);
					JNIEnv.DeleteLocalRef (native_RecvBufEnv);
				}
				if (iRecvLen != null) {
					JNIEnv.CopyArray (native_iRecvLen, iRecvLen);
					JNIEnv.DeleteLocalRef (native_iRecvLen);
				}
				global::System.GC.KeepAlive (RecvBufEnv);
				global::System.GC.KeepAlive (iRecvLen);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api.jni']/class[@name='JCallback']/method[@name='Rs232WriteC' and count(parameter)=2 and parameter[1][@type='byte[]'] and parameter[2][@type='int']]"
		[Register ("Rs232WriteC", "([BI)I", "")]
		public static unsafe int Rs232WriteC (byte[]? SendBuf, int SendLen)
		{
			const string __id = "Rs232WriteC.([BI)I";
			IntPtr native_SendBuf = JNIEnv.NewArray (SendBuf);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_SendBuf);
				__args [1] = new JniArgumentValue (SendLen);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (SendBuf != null) {
					JNIEnv.CopyArray (native_SendBuf, SendBuf);
					JNIEnv.DeleteLocalRef (native_SendBuf);
				}
				global::System.GC.KeepAlive (SendBuf);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api.jni']/class[@name='JCallback']/method[@name='SaveWholeFile_Api' and count(parameter)=3 and parameter[1][@type='byte[]'] and parameter[2][@type='byte[]'] and parameter[3][@type='int']]"
		[Register ("SaveWholeFile_Api", "([B[BI)I", "")]
		public static unsafe int SaveWholeFile_Api (byte[]? FileName, byte[]? Buf, int Len)
		{
			const string __id = "SaveWholeFile_Api.([B[BI)I";
			IntPtr native_FileName = JNIEnv.NewArray (FileName);
			IntPtr native_Buf = JNIEnv.NewArray (Buf);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (native_FileName);
				__args [1] = new JniArgumentValue (native_Buf);
				__args [2] = new JniArgumentValue (Len);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (FileName != null) {
					JNIEnv.CopyArray (native_FileName, FileName);
					JNIEnv.DeleteLocalRef (native_FileName);
				}
				if (Buf != null) {
					JNIEnv.CopyArray (native_Buf, Buf);
					JNIEnv.DeleteLocalRef (native_Buf);
				}
				global::System.GC.KeepAlive (FileName);
				global::System.GC.KeepAlive (Buf);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api.jni']/class[@name='JCallback']/method[@name='SigPadCommandC' and count(parameter)=4 and parameter[1][@type='int'] and parameter[2][@type='byte[]'] and parameter[3][@type='byte[]'] and parameter[4][@type='int']]"
		[Register ("SigPadCommandC", "(I[B[BI)I", "")]
		public static unsafe int SigPadCommandC (int cmd, byte[]? pData, byte[]? ipDatalen, int TimeOutS)
		{
			const string __id = "SigPadCommandC.(I[B[BI)I";
			IntPtr native_pData = JNIEnv.NewArray (pData);
			IntPtr native_ipDatalen = JNIEnv.NewArray (ipDatalen);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [4];
				__args [0] = new JniArgumentValue (cmd);
				__args [1] = new JniArgumentValue (native_pData);
				__args [2] = new JniArgumentValue (native_ipDatalen);
				__args [3] = new JniArgumentValue (TimeOutS);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (pData != null) {
					JNIEnv.CopyArray (native_pData, pData);
					JNIEnv.DeleteLocalRef (native_pData);
				}
				if (ipDatalen != null) {
					JNIEnv.CopyArray (native_ipDatalen, ipDatalen);
					JNIEnv.DeleteLocalRef (native_ipDatalen);
				}
				global::System.GC.KeepAlive (pData);
				global::System.GC.KeepAlive (ipDatalen);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api.jni']/class[@name='JCallback']/method[@name='WriteFile_Api' and count(parameter)=4 and parameter[1][@type='byte[]'] and parameter[2][@type='byte[]'] and parameter[3][@type='int'] and parameter[4][@type='int']]"
		[Register ("WriteFile_Api", "([B[BII)I", "")]
		public static unsafe int WriteFile_Api (byte[]? FileName, byte[]? Buf, int Start, int Length)
		{
			const string __id = "WriteFile_Api.([B[BII)I";
			IntPtr native_FileName = JNIEnv.NewArray (FileName);
			IntPtr native_Buf = JNIEnv.NewArray (Buf);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [4];
				__args [0] = new JniArgumentValue (native_FileName);
				__args [1] = new JniArgumentValue (native_Buf);
				__args [2] = new JniArgumentValue (Start);
				__args [3] = new JniArgumentValue (Length);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (FileName != null) {
					JNIEnv.CopyArray (native_FileName, FileName);
					JNIEnv.DeleteLocalRef (native_FileName);
				}
				if (Buf != null) {
					JNIEnv.CopyArray (native_Buf, Buf);
					JNIEnv.DeleteLocalRef (native_Buf);
				}
				global::System.GC.KeepAlive (FileName);
				global::System.GC.KeepAlive (Buf);
			}
		}

	}
}
