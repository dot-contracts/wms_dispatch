//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable restore
using System;
using System.Collections.Generic;
using Android.Runtime;
using Java.Interop;

namespace Com.Vanstone.Trans.Api {

	// Metadata.xml XPath class reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='HsmApi']"
	[global::Android.Runtime.Register ("com/vanstone/trans/api/HsmApi", DoNotGenerateAcw=true)]
	public partial class HsmApi : global::Java.Lang.Object {
		static readonly JniPeerMembers _members = new XAPeerMembers ("com/vanstone/trans/api/HsmApi", typeof (HsmApi));

		internal static IntPtr class_ref {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		public override global::Java.Interop.JniPeerMembers JniPeerMembers {
			get { return _members; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override IntPtr ThresholdClass {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override global::System.Type ThresholdType {
			get { return _members.ManagedPeerType; }
		}

		protected HsmApi (IntPtr javaReference, JniHandleOwnership transfer) : base (javaReference, transfer)
		{
		}

		// Metadata.xml XPath constructor reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='HsmApi']/constructor[@name='HsmApi' and count(parameter)=0]"
		[Register (".ctor", "()V", "")]
		public unsafe HsmApi () : base (IntPtr.Zero, JniHandleOwnership.DoNotTransfer)
		{
			const string __id = "()V";

			if (((global::Java.Lang.Object) this).Handle != IntPtr.Zero)
				return;

			try {
				var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), null);
				SetHandle (__r.Handle, JniHandleOwnership.TransferLocalRef);
				_members.InstanceMethods.FinishCreateInstance (__id, this, null);
			} finally {
			}
		}

		public static unsafe long FreeSpace_Api {
			// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='HsmApi']/method[@name='getFreeSpace_Api' and count(parameter)=0]"
			[Register ("getFreeSpace_Api", "()J", "")]
			get {
				const string __id = "getFreeSpace_Api.()J";
				try {
					var __rm = _members.StaticMethods.InvokeInt64Method (__id, null);
					return __rm;
				} finally {
				}
			}
		}

		public static unsafe bool IsTampered_Api {
			// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='HsmApi']/method[@name='isTampered_Api' and count(parameter)=0]"
			[Register ("isTampered_Api", "()Z", "")]
			get {
				const string __id = "isTampered_Api.()Z";
				try {
					var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, null);
					return __rm;
				} finally {
				}
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='HsmApi']/method[@name='decrypt_Api' and count(parameter)=3 and parameter[1][@type='int'] and parameter[2][@type='java.lang.String'] and parameter[3][@type='byte[]']]"
		[Register ("decrypt_Api", "(ILjava/lang/String;[B)[B", "")]
		public static unsafe byte[]? Decrypt_Api (int algorithm, string? aliasPrivateKey, byte[]? bufCipher)
		{
			const string __id = "decrypt_Api.(ILjava/lang/String;[B)[B";
			IntPtr native_aliasPrivateKey = JNIEnv.NewString ((string?)aliasPrivateKey);
			IntPtr native_bufCipher = JNIEnv.NewArray (bufCipher);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (algorithm);
				__args [1] = new JniArgumentValue (native_aliasPrivateKey);
				__args [2] = new JniArgumentValue (native_bufCipher);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return (byte[]?) JNIEnv.GetArray (__rm.Handle, JniHandleOwnership.TransferLocalRef, typeof (byte));
			} finally {
				JNIEnv.DeleteLocalRef (native_aliasPrivateKey);
				if (bufCipher != null) {
					JNIEnv.CopyArray (native_bufCipher, bufCipher);
					JNIEnv.DeleteLocalRef (native_bufCipher);
				}
				global::System.GC.KeepAlive (bufCipher);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='HsmApi']/method[@name='deleteCertificate_Api' and count(parameter)=2 and parameter[1][@type='int'] and parameter[2][@type='java.lang.String']]"
		[Register ("deleteCertificate_Api", "(ILjava/lang/String;)Z", "")]
		public static unsafe bool DeleteCertificate_Api (int certType, string? alias)
		{
			const string __id = "deleteCertificate_Api.(ILjava/lang/String;)Z";
			IntPtr native_alias = JNIEnv.NewString ((string?)alias);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (certType);
				__args [1] = new JniArgumentValue (native_alias);
				var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, __args);
				return __rm;
			} finally {
				JNIEnv.DeleteLocalRef (native_alias);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='HsmApi']/method[@name='deleteKeyPair_Api' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
		[Register ("deleteKeyPair_Api", "(Ljava/lang/String;)Z", "")]
		public static unsafe bool DeleteKeyPair_Api (string? aliasPrivateKey)
		{
			const string __id = "deleteKeyPair_Api.(Ljava/lang/String;)Z";
			IntPtr native_aliasPrivateKey = JNIEnv.NewString ((string?)aliasPrivateKey);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_aliasPrivateKey);
				var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, __args);
				return __rm;
			} finally {
				JNIEnv.DeleteLocalRef (native_aliasPrivateKey);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='HsmApi']/method[@name='encrypt_Api' and count(parameter)=3 and parameter[1][@type='int'] and parameter[2][@type='java.lang.String'] and parameter[3][@type='byte[]']]"
		[Register ("encrypt_Api", "(ILjava/lang/String;[B)[B", "")]
		public static unsafe byte[]? Encrypt_Api (int algorithm, string? aliasPrivateKey, byte[]? bufPlain)
		{
			const string __id = "encrypt_Api.(ILjava/lang/String;[B)[B";
			IntPtr native_aliasPrivateKey = JNIEnv.NewString ((string?)aliasPrivateKey);
			IntPtr native_bufPlain = JNIEnv.NewArray (bufPlain);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (algorithm);
				__args [1] = new JniArgumentValue (native_aliasPrivateKey);
				__args [2] = new JniArgumentValue (native_bufPlain);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return (byte[]?) JNIEnv.GetArray (__rm.Handle, JniHandleOwnership.TransferLocalRef, typeof (byte));
			} finally {
				JNIEnv.DeleteLocalRef (native_aliasPrivateKey);
				if (bufPlain != null) {
					JNIEnv.CopyArray (native_bufPlain, bufPlain);
					JNIEnv.DeleteLocalRef (native_bufPlain);
				}
				global::System.GC.KeepAlive (bufPlain);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='HsmApi']/method[@name='generateCSR_Api' and count(parameter)=2 and parameter[1][@type='java.lang.String'] and parameter[2][@type='javax.security.auth.x500.X500Principal']]"
		[Register ("generateCSR_Api", "(Ljava/lang/String;Ljavax/security/auth/x500/X500Principal;)[B", "")]
		public static unsafe byte[]? GenerateCSR_Api (string? aliasPrivateKey, global::Javax.Security.Auth.X500.X500Principal? subject)
		{
			const string __id = "generateCSR_Api.(Ljava/lang/String;Ljavax/security/auth/x500/X500Principal;)[B";
			IntPtr native_aliasPrivateKey = JNIEnv.NewString ((string?)aliasPrivateKey);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_aliasPrivateKey);
				__args [1] = new JniArgumentValue ((subject == null) ? IntPtr.Zero : ((global::Java.Lang.Object) subject).Handle);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return (byte[]?) JNIEnv.GetArray (__rm.Handle, JniHandleOwnership.TransferLocalRef, typeof (byte));
			} finally {
				JNIEnv.DeleteLocalRef (native_aliasPrivateKey);
				global::System.GC.KeepAlive (subject);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='HsmApi']/method[@name='generateKeyPair_Api' and count(parameter)=3 and parameter[1][@type='java.lang.String'] and parameter[2][@type='int'] and parameter[3][@type='int']]"
		[Register ("generateKeyPair_Api", "(Ljava/lang/String;II)Z", "")]
		public static unsafe bool GenerateKeyPair_Api (string? aliasPrivateKey, int algorithm, int keySize)
		{
			const string __id = "generateKeyPair_Api.(Ljava/lang/String;II)Z";
			IntPtr native_aliasPrivateKey = JNIEnv.NewString ((string?)aliasPrivateKey);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (native_aliasPrivateKey);
				__args [1] = new JniArgumentValue (algorithm);
				__args [2] = new JniArgumentValue (keySize);
				var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, __args);
				return __rm;
			} finally {
				JNIEnv.DeleteLocalRef (native_aliasPrivateKey);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='HsmApi']/method[@name='generateRandom_Api' and count(parameter)=1 and parameter[1][@type='int']]"
		[Register ("generateRandom_Api", "(I)[B", "")]
		public static unsafe byte[]? GenerateRandom_Api (int length)
		{
			const string __id = "generateRandom_Api.(I)[B";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (length);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return (byte[]?) JNIEnv.GetArray (__rm.Handle, JniHandleOwnership.TransferLocalRef, typeof (byte));
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='HsmApi']/method[@name='getCertificate_Api' and count(parameter)=3 and parameter[1][@type='int'] and parameter[2][@type='java.lang.String'] and parameter[3][@type='int']]"
		[Register ("getCertificate_Api", "(ILjava/lang/String;I)[B", "")]
		public static unsafe byte[]? GetCertificate_Api (int certType, string? alias, int dataFormat)
		{
			const string __id = "getCertificate_Api.(ILjava/lang/String;I)[B";
			IntPtr native_alias = JNIEnv.NewString ((string?)alias);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (certType);
				__args [1] = new JniArgumentValue (native_alias);
				__args [2] = new JniArgumentValue (dataFormat);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return (byte[]?) JNIEnv.GetArray (__rm.Handle, JniHandleOwnership.TransferLocalRef, typeof (byte));
			} finally {
				JNIEnv.DeleteLocalRef (native_alias);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='HsmApi']/method[@name='injectPrivateKey_Api' and count(parameter)=2 and parameter[1][@type='byte[]'] and parameter[2][@type='int']]"
		[Register ("injectPrivateKey_Api", "([BI)Z", "")]
		public static unsafe bool InjectPrivateKey_Api (byte[]? keyBuffer, int dataFormat)
		{
			const string __id = "injectPrivateKey_Api.([BI)Z";
			IntPtr native_keyBuffer = JNIEnv.NewArray (keyBuffer);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_keyBuffer);
				__args [1] = new JniArgumentValue (dataFormat);
				var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, __args);
				return __rm;
			} finally {
				if (keyBuffer != null) {
					JNIEnv.CopyArray (native_keyBuffer, keyBuffer);
					JNIEnv.DeleteLocalRef (native_keyBuffer);
				}
				global::System.GC.KeepAlive (keyBuffer);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='HsmApi']/method[@name='injectPublicKeyCertificate_Api' and count(parameter)=4 and parameter[1][@type='java.lang.String'] and parameter[2][@type='java.lang.String'] and parameter[3][@type='byte[]'] and parameter[4][@type='int']]"
		[Register ("injectPublicKeyCertificate_Api", "(Ljava/lang/String;Ljava/lang/String;[BI)Z", "")]
		public static unsafe bool InjectPublicKeyCertificate_Api (string? alias, string? aliasPrivateKey, byte[]? bufCert, int dataFormat)
		{
			const string __id = "injectPublicKeyCertificate_Api.(Ljava/lang/String;Ljava/lang/String;[BI)Z";
			IntPtr native_alias = JNIEnv.NewString ((string?)alias);
			IntPtr native_aliasPrivateKey = JNIEnv.NewString ((string?)aliasPrivateKey);
			IntPtr native_bufCert = JNIEnv.NewArray (bufCert);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [4];
				__args [0] = new JniArgumentValue (native_alias);
				__args [1] = new JniArgumentValue (native_aliasPrivateKey);
				__args [2] = new JniArgumentValue (native_bufCert);
				__args [3] = new JniArgumentValue (dataFormat);
				var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, __args);
				return __rm;
			} finally {
				JNIEnv.DeleteLocalRef (native_alias);
				JNIEnv.DeleteLocalRef (native_aliasPrivateKey);
				if (bufCert != null) {
					JNIEnv.CopyArray (native_bufCert, bufCert);
					JNIEnv.DeleteLocalRef (native_bufCert);
				}
				global::System.GC.KeepAlive (bufCert);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='HsmApi']/method[@name='injectRootCertificate_Api' and count(parameter)=4 and parameter[1][@type='int'] and parameter[2][@type='java.lang.String'] and parameter[3][@type='byte[]'] and parameter[4][@type='int']]"
		[Register ("injectRootCertificate_Api", "(ILjava/lang/String;[BI)Z", "")]
		public static unsafe bool InjectRootCertificate_Api (int certType, string? alias, byte[]? bufCert, int dataFormat)
		{
			const string __id = "injectRootCertificate_Api.(ILjava/lang/String;[BI)Z";
			IntPtr native_alias = JNIEnv.NewString ((string?)alias);
			IntPtr native_bufCert = JNIEnv.NewArray (bufCert);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [4];
				__args [0] = new JniArgumentValue (certType);
				__args [1] = new JniArgumentValue (native_alias);
				__args [2] = new JniArgumentValue (native_bufCert);
				__args [3] = new JniArgumentValue (dataFormat);
				var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, __args);
				return __rm;
			} finally {
				JNIEnv.DeleteLocalRef (native_alias);
				if (bufCert != null) {
					JNIEnv.CopyArray (native_bufCert, bufCert);
					JNIEnv.DeleteLocalRef (native_bufCert);
				}
				global::System.GC.KeepAlive (bufCert);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='HsmApi']/method[@name='queryCertificates_Api' and count(parameter)=1 and parameter[1][@type='int']]"
		[Register ("queryCertificates_Api", "(I)[Ljava/lang/String;", "")]
		public static unsafe string[]? QueryCertificates_Api (int certType)
		{
			const string __id = "queryCertificates_Api.(I)[Ljava/lang/String;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (certType);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return (string[]?) JNIEnv.GetArray (__rm.Handle, JniHandleOwnership.TransferLocalRef, typeof (string));
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='HsmApi']/method[@name='resetKeyStore_Api' and count(parameter)=0]"
		[Register ("resetKeyStore_Api", "()V", "")]
		public static unsafe void ResetKeyStore_Api ()
		{
			const string __id = "resetKeyStore_Api.()V";
			try {
				_members.StaticMethods.InvokeVoidMethod (__id, null);
			} finally {
			}
		}

	}
}
