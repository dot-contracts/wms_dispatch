//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable restore
using System;
using System.Collections.Generic;
using Android.Runtime;
using Java.Interop;

namespace Com.Vanstone.Utils {

	// Metadata.xml XPath class reference: path="/api/package[@name='com.vanstone.utils']/class[@name='ImageTools']"
	[global::Android.Runtime.Register ("com/vanstone/utils/ImageTools", DoNotGenerateAcw=true)]
	public partial class ImageTools : global::Java.Lang.Object {
		// Metadata.xml XPath field reference: path="/api/package[@name='com.vanstone.utils']/class[@name='ImageTools']/field[@name='DTYPE_CDAT']"
		[Register ("DTYPE_CDAT")]
		public const int DtypeCdat = (int) 32;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.vanstone.utils']/class[@name='ImageTools']/field[@name='DTYPE_FILE']"
		[Register ("DTYPE_FILE")]
		public const int DtypeFile = (int) 16;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.vanstone.utils']/class[@name='ImageTools']/field[@name='DTYPE_MDAT']"
		[Register ("DTYPE_MDAT")]
		public const int DtypeMdat = (int) 48;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.vanstone.utils']/class[@name='ImageTools']/field[@name='FMT_BMP']"
		[Register ("FMT_BMP")]
		public const int FmtBmp = (int) 1;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.vanstone.utils']/class[@name='ImageTools']/field[@name='FMT_PRT']"
		[Register ("FMT_PRT")]
		public const int FmtPrt = (int) 2;

		static readonly JniPeerMembers _members = new XAPeerMembers ("com/vanstone/utils/ImageTools", typeof (ImageTools));

		internal static IntPtr class_ref {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		public override global::Java.Interop.JniPeerMembers JniPeerMembers {
			get { return _members; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override IntPtr ThresholdClass {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override global::System.Type ThresholdType {
			get { return _members.ManagedPeerType; }
		}

		protected ImageTools (IntPtr javaReference, JniHandleOwnership transfer) : base (javaReference, transfer)
		{
		}

		// Metadata.xml XPath constructor reference: path="/api/package[@name='com.vanstone.utils']/class[@name='ImageTools']/constructor[@name='ImageTools' and count(parameter)=0]"
		[Register (".ctor", "()V", "")]
		public unsafe ImageTools () : base (IntPtr.Zero, JniHandleOwnership.DoNotTransfer)
		{
			const string __id = "()V";

			if (((global::Java.Lang.Object) this).Handle != IntPtr.Zero)
				return;

			try {
				var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), null);
				SetHandle (__r.Handle, JniHandleOwnership.TransferLocalRef);
				_members.InstanceMethods.FinishCreateInstance (__id, this, null);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='ImageTools']/method[@name='Bitmap2Bmp' and count(parameter)=1 and parameter[1][@type='android.graphics.Bitmap']]"
		[Register ("Bitmap2Bmp", "(Landroid/graphics/Bitmap;)[B", "")]
		public static unsafe byte[]? Bitmap2Bmp (global::Android.Graphics.Bitmap? bitmap)
		{
			const string __id = "Bitmap2Bmp.(Landroid/graphics/Bitmap;)[B";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue ((bitmap == null) ? IntPtr.Zero : ((global::Java.Lang.Object) bitmap).Handle);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return (byte[]?) JNIEnv.GetArray (__rm.Handle, JniHandleOwnership.TransferLocalRef, typeof (byte));
			} finally {
				global::System.GC.KeepAlive (bitmap);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='ImageTools']/method[@name='convertToBlackWhite' and count(parameter)=1 and parameter[1][@type='android.graphics.Bitmap']]"
		[Register ("convertToBlackWhite", "(Landroid/graphics/Bitmap;)Landroid/graphics/Bitmap;", "")]
		public static unsafe global::Android.Graphics.Bitmap? ConvertToBlackWhite (global::Android.Graphics.Bitmap? bmp)
		{
			const string __id = "convertToBlackWhite.(Landroid/graphics/Bitmap;)Landroid/graphics/Bitmap;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue ((bmp == null) ? IntPtr.Zero : ((global::Java.Lang.Object) bmp).Handle);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return global::Java.Lang.Object.GetObject<global::Android.Graphics.Bitmap> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				global::System.GC.KeepAlive (bmp);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='ImageTools']/method[@name='getBitMap' and count(parameter)=1 and parameter[1][@type='byte[]']]"
		[Register ("getBitMap", "([B)Landroid/graphics/Bitmap;", "")]
		public static unsafe global::Android.Graphics.Bitmap? GetBitMap (byte[]? SignBuf)
		{
			const string __id = "getBitMap.([B)Landroid/graphics/Bitmap;";
			IntPtr native_SignBuf = JNIEnv.NewArray (SignBuf);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_SignBuf);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return global::Java.Lang.Object.GetObject<global::Android.Graphics.Bitmap> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				if (SignBuf != null) {
					JNIEnv.CopyArray (native_SignBuf, SignBuf);
					JNIEnv.DeleteLocalRef (native_SignBuf);
				}
				global::System.GC.KeepAlive (SignBuf);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='ImageTools']/method[@name='getBitMap' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
		[Register ("getBitMap", "(Ljava/lang/String;)Landroid/graphics/Bitmap;", "")]
		public static unsafe global::Android.Graphics.Bitmap? GetBitMap (string? HexSign)
		{
			const string __id = "getBitMap.(Ljava/lang/String;)Landroid/graphics/Bitmap;";
			IntPtr native_HexSign = JNIEnv.NewString ((string?)HexSign);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_HexSign);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return global::Java.Lang.Object.GetObject<global::Android.Graphics.Bitmap> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				JNIEnv.DeleteLocalRef (native_HexSign);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='ImageTools']/method[@name='readImage' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
		[Register ("readImage", "(Ljava/lang/String;)Landroid/graphics/Bitmap;", "")]
		public static unsafe global::Android.Graphics.Bitmap? ReadImage (string? filename)
		{
			const string __id = "readImage.(Ljava/lang/String;)Landroid/graphics/Bitmap;";
			IntPtr native_filename = JNIEnv.NewString ((string?)filename);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_filename);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return global::Java.Lang.Object.GetObject<global::Android.Graphics.Bitmap> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				JNIEnv.DeleteLocalRef (native_filename);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='ImageTools']/method[@name='saveImage' and count(parameter)=2 and parameter[1][@type='java.lang.String'] and parameter[2][@type='android.graphics.Bitmap']]"
		[Register ("saveImage", "(Ljava/lang/String;Landroid/graphics/Bitmap;)I", "")]
		public static unsafe int SaveImage (string? filename, global::Android.Graphics.Bitmap? bitmap)
		{
			const string __id = "saveImage.(Ljava/lang/String;Landroid/graphics/Bitmap;)I";
			IntPtr native_filename = JNIEnv.NewString ((string?)filename);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_filename);
				__args [1] = new JniArgumentValue ((bitmap == null) ? IntPtr.Zero : ((global::Java.Lang.Object) bitmap).Handle);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				JNIEnv.DeleteLocalRef (native_filename);
				global::System.GC.KeepAlive (bitmap);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='ImageTools']/method[@name='writeDword' and count(parameter)=2 and parameter[1][@type='java.io.ByteArrayOutputStream'] and parameter[2][@type='long']]"
		[Register ("writeDword", "(Ljava/io/ByteArrayOutputStream;J)V", "")]
		protected static unsafe void WriteDword (global::Java.IO.ByteArrayOutputStream? stream, long value)
		{
			const string __id = "writeDword.(Ljava/io/ByteArrayOutputStream;J)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue ((stream == null) ? IntPtr.Zero : ((global::Java.Lang.Object) stream).Handle);
				__args [1] = new JniArgumentValue (value);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				global::System.GC.KeepAlive (stream);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='ImageTools']/method[@name='writeDword' and count(parameter)=2 and parameter[1][@type='java.io.FileOutputStream'] and parameter[2][@type='long']]"
		[Register ("writeDword", "(Ljava/io/FileOutputStream;J)V", "")]
		protected static unsafe void WriteDword (global::System.IO.Stream? stream, long value)
		{
			const string __id = "writeDword.(Ljava/io/FileOutputStream;J)V";
			IntPtr native_stream = global::Android.Runtime.OutputStreamAdapter.ToLocalJniHandle (stream);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_stream);
				__args [1] = new JniArgumentValue (value);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				JNIEnv.DeleteLocalRef (native_stream);
				global::System.GC.KeepAlive (stream);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='ImageTools']/method[@name='writeLong' and count(parameter)=2 and parameter[1][@type='java.io.ByteArrayOutputStream'] and parameter[2][@type='long']]"
		[Register ("writeLong", "(Ljava/io/ByteArrayOutputStream;J)V", "")]
		protected static unsafe void WriteLong (global::Java.IO.ByteArrayOutputStream? stream, long value)
		{
			const string __id = "writeLong.(Ljava/io/ByteArrayOutputStream;J)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue ((stream == null) ? IntPtr.Zero : ((global::Java.Lang.Object) stream).Handle);
				__args [1] = new JniArgumentValue (value);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				global::System.GC.KeepAlive (stream);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='ImageTools']/method[@name='writeLong' and count(parameter)=2 and parameter[1][@type='java.io.FileOutputStream'] and parameter[2][@type='long']]"
		[Register ("writeLong", "(Ljava/io/FileOutputStream;J)V", "")]
		protected static unsafe void WriteLong (global::System.IO.Stream? stream, long value)
		{
			const string __id = "writeLong.(Ljava/io/FileOutputStream;J)V";
			IntPtr native_stream = global::Android.Runtime.OutputStreamAdapter.ToLocalJniHandle (stream);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_stream);
				__args [1] = new JniArgumentValue (value);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				JNIEnv.DeleteLocalRef (native_stream);
				global::System.GC.KeepAlive (stream);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='ImageTools']/method[@name='writeWord' and count(parameter)=2 and parameter[1][@type='java.io.ByteArrayOutputStream'] and parameter[2][@type='int']]"
		[Register ("writeWord", "(Ljava/io/ByteArrayOutputStream;I)V", "")]
		protected static unsafe void WriteWord (global::Java.IO.ByteArrayOutputStream? stream, int value)
		{
			const string __id = "writeWord.(Ljava/io/ByteArrayOutputStream;I)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue ((stream == null) ? IntPtr.Zero : ((global::Java.Lang.Object) stream).Handle);
				__args [1] = new JniArgumentValue (value);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				global::System.GC.KeepAlive (stream);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='ImageTools']/method[@name='writeWord' and count(parameter)=2 and parameter[1][@type='java.io.FileOutputStream'] and parameter[2][@type='int']]"
		[Register ("writeWord", "(Ljava/io/FileOutputStream;I)V", "")]
		protected static unsafe void WriteWord (global::System.IO.Stream? stream, int value)
		{
			const string __id = "writeWord.(Ljava/io/FileOutputStream;I)V";
			IntPtr native_stream = global::Android.Runtime.OutputStreamAdapter.ToLocalJniHandle (stream);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_stream);
				__args [1] = new JniArgumentValue (value);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				JNIEnv.DeleteLocalRef (native_stream);
				global::System.GC.KeepAlive (stream);
			}
		}

	}
}
