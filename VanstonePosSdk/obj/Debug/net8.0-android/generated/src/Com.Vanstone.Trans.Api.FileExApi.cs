//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable restore
using System;
using System.Collections.Generic;
using Android.Runtime;
using Java.Interop;

namespace Com.Vanstone.Trans.Api {

	// Metadata.xml XPath class reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='FileExApi']"
	[global::Android.Runtime.Register ("com/vanstone/trans/api/FileExApi", DoNotGenerateAcw=true)]
	public partial class FileExApi : global::Java.Lang.Object {
		static readonly JniPeerMembers _members = new XAPeerMembers ("com/vanstone/trans/api/FileExApi", typeof (FileExApi));

		internal static IntPtr class_ref {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		public override global::Java.Interop.JniPeerMembers JniPeerMembers {
			get { return _members; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override IntPtr ThresholdClass {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override global::System.Type ThresholdType {
			get { return _members.ManagedPeerType; }
		}

		protected FileExApi (IntPtr javaReference, JniHandleOwnership transfer) : base (javaReference, transfer)
		{
		}

		// Metadata.xml XPath constructor reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='FileExApi']/constructor[@name='FileExApi' and count(parameter)=0]"
		[Register (".ctor", "()V", "")]
		public unsafe FileExApi () : base (IntPtr.Zero, JniHandleOwnership.DoNotTransfer)
		{
			const string __id = "()V";

			if (((global::Java.Lang.Object) this).Handle != IntPtr.Zero)
				return;

			try {
				var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), null);
				SetHandle (__r.Handle, JniHandleOwnership.TransferLocalRef);
				_members.InstanceMethods.FinishCreateInstance (__id, this, null);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='FileExApi']/method[@name='DelFileEx_Api' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
		[Register ("DelFileEx_Api", "(Ljava/lang/String;)I", "")]
		public static unsafe int DelFileEx_Api (string? FileName)
		{
			const string __id = "DelFileEx_Api.(Ljava/lang/String;)I";
			IntPtr native_FileName = JNIEnv.NewString ((string?)FileName);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_FileName);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				JNIEnv.DeleteLocalRef (native_FileName);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='FileExApi']/method[@name='GetFileSizeEx_Api' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
		[Register ("GetFileSizeEx_Api", "(Ljava/lang/String;)I", "")]
		public static unsafe int GetFileSizeEx_Api (string? FileName)
		{
			const string __id = "GetFileSizeEx_Api.(Ljava/lang/String;)I";
			IntPtr native_FileName = JNIEnv.NewString ((string?)FileName);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_FileName);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				JNIEnv.DeleteLocalRef (native_FileName);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='FileExApi']/method[@name='ReNameFileEx_Api' and count(parameter)=2 and parameter[1][@type='java.lang.String'] and parameter[2][@type='java.lang.String']]"
		[Register ("ReNameFileEx_Api", "(Ljava/lang/String;Ljava/lang/String;)I", "")]
		public static unsafe int ReNameFileEx_Api (string? OldfName, string? NewFileName)
		{
			const string __id = "ReNameFileEx_Api.(Ljava/lang/String;Ljava/lang/String;)I";
			IntPtr native_OldfName = JNIEnv.NewString ((string?)OldfName);
			IntPtr native_NewFileName = JNIEnv.NewString ((string?)NewFileName);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_OldfName);
				__args [1] = new JniArgumentValue (native_NewFileName);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				JNIEnv.DeleteLocalRef (native_OldfName);
				JNIEnv.DeleteLocalRef (native_NewFileName);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='FileExApi']/method[@name='ReadFileEx_Api' and count(parameter)=4 and parameter[1][@type='java.lang.String'] and parameter[2][@type='byte[]'] and parameter[3][@type='int'] and parameter[4][@type='byte[]']]"
		[Register ("ReadFileEx_Api", "(Ljava/lang/String;[BI[B)I", "")]
		public static unsafe int ReadFileEx_Api (string? FileName, byte[]? Buf, int Start, byte[]? Length)
		{
			const string __id = "ReadFileEx_Api.(Ljava/lang/String;[BI[B)I";
			IntPtr native_FileName = JNIEnv.NewString ((string?)FileName);
			IntPtr native_Buf = JNIEnv.NewArray (Buf);
			IntPtr native_Length = JNIEnv.NewArray (Length);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [4];
				__args [0] = new JniArgumentValue (native_FileName);
				__args [1] = new JniArgumentValue (native_Buf);
				__args [2] = new JniArgumentValue (Start);
				__args [3] = new JniArgumentValue (native_Length);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				JNIEnv.DeleteLocalRef (native_FileName);
				if (Buf != null) {
					JNIEnv.CopyArray (native_Buf, Buf);
					JNIEnv.DeleteLocalRef (native_Buf);
				}
				if (Length != null) {
					JNIEnv.CopyArray (native_Length, Length);
					JNIEnv.DeleteLocalRef (native_Length);
				}
				global::System.GC.KeepAlive (Buf);
				global::System.GC.KeepAlive (Length);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='FileExApi']/method[@name='SaveWholeFileEx_Api' and count(parameter)=3 and parameter[1][@type='java.lang.String'] and parameter[2][@type='byte[]'] and parameter[3][@type='int']]"
		[Register ("SaveWholeFileEx_Api", "(Ljava/lang/String;[BI)I", "")]
		public static unsafe int SaveWholeFileEx_Api (string? FileName, byte[]? Buf, int Len)
		{
			const string __id = "SaveWholeFileEx_Api.(Ljava/lang/String;[BI)I";
			IntPtr native_FileName = JNIEnv.NewString ((string?)FileName);
			IntPtr native_Buf = JNIEnv.NewArray (Buf);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (native_FileName);
				__args [1] = new JniArgumentValue (native_Buf);
				__args [2] = new JniArgumentValue (Len);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				JNIEnv.DeleteLocalRef (native_FileName);
				if (Buf != null) {
					JNIEnv.CopyArray (native_Buf, Buf);
					JNIEnv.DeleteLocalRef (native_Buf);
				}
				global::System.GC.KeepAlive (Buf);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='FileExApi']/method[@name='WriteFileEx_Api' and count(parameter)=4 and parameter[1][@type='java.lang.String'] and parameter[2][@type='byte[]'] and parameter[3][@type='int'] and parameter[4][@type='int']]"
		[Register ("WriteFileEx_Api", "(Ljava/lang/String;[BII)I", "")]
		public static unsafe int WriteFileEx_Api (string? FileName, byte[]? Buf, int Start, int Length)
		{
			const string __id = "WriteFileEx_Api.(Ljava/lang/String;[BII)I";
			IntPtr native_FileName = JNIEnv.NewString ((string?)FileName);
			IntPtr native_Buf = JNIEnv.NewArray (Buf);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [4];
				__args [0] = new JniArgumentValue (native_FileName);
				__args [1] = new JniArgumentValue (native_Buf);
				__args [2] = new JniArgumentValue (Start);
				__args [3] = new JniArgumentValue (Length);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				JNIEnv.DeleteLocalRef (native_FileName);
				if (Buf != null) {
					JNIEnv.CopyArray (native_Buf, Buf);
					JNIEnv.DeleteLocalRef (native_Buf);
				}
				global::System.GC.KeepAlive (Buf);
			}
		}

	}
}
