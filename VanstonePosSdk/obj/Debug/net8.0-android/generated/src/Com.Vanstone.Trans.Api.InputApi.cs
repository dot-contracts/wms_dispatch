//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable restore
using System;
using System.Collections.Generic;
using Android.Runtime;
using Java.Interop;

namespace Com.Vanstone.Trans.Api {

	// Metadata.xml XPath class reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='InputApi']"
	[global::Android.Runtime.Register ("com/vanstone/trans/api/InputApi", DoNotGenerateAcw=true)]
	public partial class InputApi : global::Java.Lang.Object {
		static readonly JniPeerMembers _members = new XAPeerMembers ("com/vanstone/trans/api/InputApi", typeof (InputApi));

		internal static IntPtr class_ref {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		public override global::Java.Interop.JniPeerMembers JniPeerMembers {
			get { return _members; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override IntPtr ThresholdClass {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override global::System.Type ThresholdType {
			get { return _members.ManagedPeerType; }
		}

		protected InputApi (IntPtr javaReference, JniHandleOwnership transfer) : base (javaReference, transfer)
		{
		}

		// Metadata.xml XPath constructor reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='InputApi']/constructor[@name='InputApi' and count(parameter)=0]"
		[Register (".ctor", "()V", "")]
		public unsafe InputApi () : base (IntPtr.Zero, JniHandleOwnership.DoNotTransfer)
		{
			const string __id = "()V";

			if (((global::Java.Lang.Object) this).Handle != IntPtr.Zero)
				return;

			try {
				var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), null);
				SetHandle (__r.Handle, JniHandleOwnership.TransferLocalRef);
				_members.InstanceMethods.FinishCreateInstance (__id, this, null);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='InputApi']/method[@name='GetScanfEx_Api' and count(parameter)=9 and parameter[1][@type='int'] and parameter[2][@type='int'] and parameter[3][@type='int'] and parameter[4][@type='byte[]'] and parameter[5][@type='int'] and parameter[6][@type='int'] and parameter[7][@type='int'] and parameter[8][@type='int'] and parameter[9][@type='int']]"
		[Register ("GetScanfEx_Api", "(III[BIIIII)I", "")]
		public static unsafe int GetScanfEx_Api (int mode, int Min, int Max, byte[]? outBuf, int TimeOut, int StartRow, int EndRow, int howstr, int defMode)
		{
			const string __id = "GetScanfEx_Api.(III[BIIIII)I";
			IntPtr native_outBuf = JNIEnv.NewArray (outBuf);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [9];
				__args [0] = new JniArgumentValue (mode);
				__args [1] = new JniArgumentValue (Min);
				__args [2] = new JniArgumentValue (Max);
				__args [3] = new JniArgumentValue (native_outBuf);
				__args [4] = new JniArgumentValue (TimeOut);
				__args [5] = new JniArgumentValue (StartRow);
				__args [6] = new JniArgumentValue (EndRow);
				__args [7] = new JniArgumentValue (howstr);
				__args [8] = new JniArgumentValue (defMode);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (outBuf != null) {
					JNIEnv.CopyArray (native_outBuf, outBuf);
					JNIEnv.DeleteLocalRef (native_outBuf);
				}
				global::System.GC.KeepAlive (outBuf);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='InputApi']/method[@name='GetScanfEx_Api' and count(parameter)=10 and parameter[1][@type='int'] and parameter[2][@type='int'] and parameter[3][@type='int'] and parameter[4][@type='byte[]'] and parameter[5][@type='int'] and parameter[6][@type='int'] and parameter[7][@type='int'] and parameter[8][@type='int'] and parameter[9][@type='int'] and parameter[10][@type='boolean']]"
		[Register ("GetScanfEx_Api", "(III[BIIIIIZ)I", "")]
		public static unsafe int GetScanfEx_Api (int mode, int Min, int Max, byte[]? outBuf, int TimeOut, int StartRow, int EndRow, int howstr, int defMode, bool linesFlag)
		{
			const string __id = "GetScanfEx_Api.(III[BIIIIIZ)I";
			IntPtr native_outBuf = JNIEnv.NewArray (outBuf);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [10];
				__args [0] = new JniArgumentValue (mode);
				__args [1] = new JniArgumentValue (Min);
				__args [2] = new JniArgumentValue (Max);
				__args [3] = new JniArgumentValue (native_outBuf);
				__args [4] = new JniArgumentValue (TimeOut);
				__args [5] = new JniArgumentValue (StartRow);
				__args [6] = new JniArgumentValue (EndRow);
				__args [7] = new JniArgumentValue (howstr);
				__args [8] = new JniArgumentValue (defMode);
				__args [9] = new JniArgumentValue (linesFlag);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (outBuf != null) {
					JNIEnv.CopyArray (native_outBuf, outBuf);
					JNIEnv.DeleteLocalRef (native_outBuf);
				}
				global::System.GC.KeepAlive (outBuf);
			}
		}

	}
}
