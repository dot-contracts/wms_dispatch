//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable restore
using System;
using System.Collections.Generic;
using Android.Runtime;
using Java.Interop;

namespace Com.Vanstone.Trans.Api {

	// Metadata.xml XPath class reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PiccApi']"
	[global::Android.Runtime.Register ("com/vanstone/trans/api/PiccApi", DoNotGenerateAcw=true)]
	public partial class PiccApi : global::Java.Lang.Object {
		// Metadata.xml XPath field reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PiccApi']/field[@name='NTAG_CARDVERSION']"
		[Register ("NTAG_CARDVERSION")]
		public const string NtagCardversion = (string) "ntagCardVersion";

		static readonly JniPeerMembers _members = new XAPeerMembers ("com/vanstone/trans/api/PiccApi", typeof (PiccApi));

		internal static IntPtr class_ref {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		public override global::Java.Interop.JniPeerMembers JniPeerMembers {
			get { return _members; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override IntPtr ThresholdClass {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override global::System.Type ThresholdType {
			get { return _members.ManagedPeerType; }
		}

		protected PiccApi (IntPtr javaReference, JniHandleOwnership transfer) : base (javaReference, transfer)
		{
		}

		// Metadata.xml XPath constructor reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PiccApi']/constructor[@name='PiccApi' and count(parameter)=0]"
		[Register (".ctor", "()V", "")]
		public unsafe PiccApi () : base (IntPtr.Zero, JniHandleOwnership.DoNotTransfer)
		{
			const string __id = "()V";

			if (((global::Java.Lang.Object) this).Handle != IntPtr.Zero)
				return;

			try {
				var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), null);
				SetHandle (__r.Handle, JniHandleOwnership.TransferLocalRef);
				_members.InstanceMethods.FinishCreateInstance (__id, this, null);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PiccApi']/method[@name='CommCardCommand_Api' and count(parameter)=3 and parameter[1][@type='byte[]'] and parameter[2][@type='int'] and parameter[3][@type='byte[]']]"
		[Register ("CommCardCommand_Api", "([BI[B)I", "")]
		public static unsafe int CommCardCommand_Api (byte[]? cmdIn, int cmdLen, byte[]? cmdResp)
		{
			const string __id = "CommCardCommand_Api.([BI[B)I";
			IntPtr native_cmdIn = JNIEnv.NewArray (cmdIn);
			IntPtr native_cmdResp = JNIEnv.NewArray (cmdResp);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (native_cmdIn);
				__args [1] = new JniArgumentValue (cmdLen);
				__args [2] = new JniArgumentValue (native_cmdResp);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (cmdIn != null) {
					JNIEnv.CopyArray (native_cmdIn, cmdIn);
					JNIEnv.DeleteLocalRef (native_cmdIn);
				}
				if (cmdResp != null) {
					JNIEnv.CopyArray (native_cmdResp, cmdResp);
					JNIEnv.DeleteLocalRef (native_cmdResp);
				}
				global::System.GC.KeepAlive (cmdIn);
				global::System.GC.KeepAlive (cmdResp);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PiccApi']/method[@name='M1Authority_Api' and count(parameter)=3 and parameter[1][@type='int'] and parameter[2][@type='int'] and parameter[3][@type='byte[]']]"
		[Register ("M1Authority_Api", "(II[B)I", "")]
		public static unsafe int M1Authority_Api (int Type, int blkNo, byte[]? Pwd)
		{
			const string __id = "M1Authority_Api.(II[B)I";
			IntPtr native_Pwd = JNIEnv.NewArray (Pwd);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (Type);
				__args [1] = new JniArgumentValue (blkNo);
				__args [2] = new JniArgumentValue (native_Pwd);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (Pwd != null) {
					JNIEnv.CopyArray (native_Pwd, Pwd);
					JNIEnv.DeleteLocalRef (native_Pwd);
				}
				global::System.GC.KeepAlive (Pwd);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PiccApi']/method[@name='M1DecreaseValue_Api' and count(parameter)=3 and parameter[1][@type='int'] and parameter[2][@type='int'] and parameter[3][@type='int']]"
		[Register ("M1DecreaseValue_Api", "(III)I", "")]
		public static unsafe int M1DecreaseValue_Api (int blockNo, int value, int bkBlockNo)
		{
			const string __id = "M1DecreaseValue_Api.(III)I";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (blockNo);
				__args [1] = new JniArgumentValue (value);
				__args [2] = new JniArgumentValue (bkBlockNo);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PiccApi']/method[@name='M1IncreaseValue_Api' and count(parameter)=3 and parameter[1][@type='int'] and parameter[2][@type='int'] and parameter[3][@type='int']]"
		[Register ("M1IncreaseValue_Api", "(III)I", "")]
		public static unsafe int M1IncreaseValue_Api (int blockNo, int value, int bkBlockNo)
		{
			const string __id = "M1IncreaseValue_Api.(III)I";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (blockNo);
				__args [1] = new JniArgumentValue (value);
				__args [2] = new JniArgumentValue (bkBlockNo);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PiccApi']/method[@name='M1ReadBlock_Api' and count(parameter)=2 and parameter[1][@type='int'] and parameter[2][@type='byte[]']]"
		[Register ("M1ReadBlock_Api", "(I[B)I", "")]
		public static unsafe int M1ReadBlock_Api (int BlkNo, byte[]? BlkValue)
		{
			const string __id = "M1ReadBlock_Api.(I[B)I";
			IntPtr native_BlkValue = JNIEnv.NewArray (BlkValue);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (BlkNo);
				__args [1] = new JniArgumentValue (native_BlkValue);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (BlkValue != null) {
					JNIEnv.CopyArray (native_BlkValue, BlkValue);
					JNIEnv.DeleteLocalRef (native_BlkValue);
				}
				global::System.GC.KeepAlive (BlkValue);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PiccApi']/method[@name='M1WriteBlock_Api' and count(parameter)=2 and parameter[1][@type='int'] and parameter[2][@type='byte[]']]"
		[Register ("M1WriteBlock_Api", "(I[B)I", "")]
		public static unsafe int M1WriteBlock_Api (int BlkNo, byte[]? BlkValue)
		{
			const string __id = "M1WriteBlock_Api.(I[B)I";
			IntPtr native_BlkValue = JNIEnv.NewArray (BlkValue);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (BlkNo);
				__args [1] = new JniArgumentValue (native_BlkValue);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (BlkValue != null) {
					JNIEnv.CopyArray (native_BlkValue, BlkValue);
					JNIEnv.DeleteLocalRef (native_BlkValue);
				}
				global::System.GC.KeepAlive (BlkValue);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PiccApi']/method[@name='NFCListenStart_Api' and count(parameter)=0]"
		[Register ("NFCListenStart_Api", "()I", "")]
		public static unsafe int NFCListenStart_Api ()
		{
			const string __id = "NFCListenStart_Api.()I";
			try {
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, null);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PiccApi']/method[@name='NFCListenStop_Api' and count(parameter)=0]"
		[Register ("NFCListenStop_Api", "()I", "")]
		public static unsafe int NFCListenStop_Api ()
		{
			const string __id = "NFCListenStop_Api.()I";
			try {
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, null);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PiccApi']/method[@name='NFCPowerControl_Api' and count(parameter)=1 and parameter[1][@type='boolean']]"
		[Register ("NFCPowerControl_Api", "(Z)I", "")]
		public static unsafe int NFCPowerControl_Api (bool state)
		{
			const string __id = "NFCPowerControl_Api.(Z)I";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (state);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PiccApi']/method[@name='NFCReadUriInfo_Api' and count(parameter)=3 and parameter[1][@type='byte[]'] and parameter[2][@type='byte[]'] and parameter[3][@type='byte[]']]"
		[Register ("NFCReadUriInfo_Api", "([B[B[B)I", "")]
		public static unsafe int NFCReadUriInfo_Api (byte[]? protocol, byte[]? uriMessage, byte[]? info)
		{
			const string __id = "NFCReadUriInfo_Api.([B[B[B)I";
			IntPtr native_protocol = JNIEnv.NewArray (protocol);
			IntPtr native_uriMessage = JNIEnv.NewArray (uriMessage);
			IntPtr native_info = JNIEnv.NewArray (info);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (native_protocol);
				__args [1] = new JniArgumentValue (native_uriMessage);
				__args [2] = new JniArgumentValue (native_info);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (protocol != null) {
					JNIEnv.CopyArray (native_protocol, protocol);
					JNIEnv.DeleteLocalRef (native_protocol);
				}
				if (uriMessage != null) {
					JNIEnv.CopyArray (native_uriMessage, uriMessage);
					JNIEnv.DeleteLocalRef (native_uriMessage);
				}
				if (info != null) {
					JNIEnv.CopyArray (native_info, info);
					JNIEnv.DeleteLocalRef (native_info);
				}
				global::System.GC.KeepAlive (protocol);
				global::System.GC.KeepAlive (uriMessage);
				global::System.GC.KeepAlive (info);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PiccApi']/method[@name='NFCWriteUriInfo_Api' and count(parameter)=3 and parameter[1][@type='byte[]'] and parameter[2][@type='byte[]'] and parameter[3][@type='byte[]']]"
		[Register ("NFCWriteUriInfo_Api", "([B[B[B)I", "")]
		public static unsafe int NFCWriteUriInfo_Api (byte[]? protocol, byte[]? uriMessage, byte[]? info)
		{
			const string __id = "NFCWriteUriInfo_Api.([B[B[B)I";
			IntPtr native_protocol = JNIEnv.NewArray (protocol);
			IntPtr native_uriMessage = JNIEnv.NewArray (uriMessage);
			IntPtr native_info = JNIEnv.NewArray (info);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (native_protocol);
				__args [1] = new JniArgumentValue (native_uriMessage);
				__args [2] = new JniArgumentValue (native_info);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (protocol != null) {
					JNIEnv.CopyArray (native_protocol, protocol);
					JNIEnv.DeleteLocalRef (native_protocol);
				}
				if (uriMessage != null) {
					JNIEnv.CopyArray (native_uriMessage, uriMessage);
					JNIEnv.DeleteLocalRef (native_uriMessage);
				}
				if (info != null) {
					JNIEnv.CopyArray (native_info, info);
					JNIEnv.DeleteLocalRef (native_info);
				}
				global::System.GC.KeepAlive (protocol);
				global::System.GC.KeepAlive (uriMessage);
				global::System.GC.KeepAlive (info);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PiccApi']/method[@name='NTAGAuthority_Api' and count(parameter)=2 and parameter[1][@type='byte[]'] and parameter[2][@type='byte[]']]"
		[Register ("NTAGAuthority_Api", "([B[B)I", "")]
		public static unsafe int NTAGAuthority_Api (byte[]? pwd, byte[]? result)
		{
			const string __id = "NTAGAuthority_Api.([B[B)I";
			IntPtr native_pwd = JNIEnv.NewArray (pwd);
			IntPtr native_result = JNIEnv.NewArray (result);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_pwd);
				__args [1] = new JniArgumentValue (native_result);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (pwd != null) {
					JNIEnv.CopyArray (native_pwd, pwd);
					JNIEnv.DeleteLocalRef (native_pwd);
				}
				if (result != null) {
					JNIEnv.CopyArray (native_result, result);
					JNIEnv.DeleteLocalRef (native_result);
				}
				global::System.GC.KeepAlive (pwd);
				global::System.GC.KeepAlive (result);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PiccApi']/method[@name='NTAGFastReadData_Api' and count(parameter)=3 and parameter[1][@type='int'] and parameter[2][@type='int'] and parameter[3][@type='byte[]']]"
		[Register ("NTAGFastReadData_Api", "(II[B)I", "")]
		public static unsafe int NTAGFastReadData_Api (int beginPageNum, int endPageNum, byte[]? DataOut)
		{
			const string __id = "NTAGFastReadData_Api.(II[B)I";
			IntPtr native_DataOut = JNIEnv.NewArray (DataOut);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (beginPageNum);
				__args [1] = new JniArgumentValue (endPageNum);
				__args [2] = new JniArgumentValue (native_DataOut);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (DataOut != null) {
					JNIEnv.CopyArray (native_DataOut, DataOut);
					JNIEnv.DeleteLocalRef (native_DataOut);
				}
				global::System.GC.KeepAlive (DataOut);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PiccApi']/method[@name='NTAGGetCardInfo_Api' and count(parameter)=0]"
		[Register ("NTAGGetCardInfo_Api", "()Landroid/os/Bundle;", "")]
		public static unsafe global::Android.OS.Bundle? NTAGGetCardInfo_Api ()
		{
			const string __id = "NTAGGetCardInfo_Api.()Landroid/os/Bundle;";
			try {
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, null);
				return global::Java.Lang.Object.GetObject<global::Android.OS.Bundle> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PiccApi']/method[@name='NTAGReadCount_Api' and count(parameter)=1 and parameter[1][@type='byte[]']]"
		[Register ("NTAGReadCount_Api", "([B)I", "")]
		public static unsafe int NTAGReadCount_Api (byte[]? Count)
		{
			const string __id = "NTAGReadCount_Api.([B)I";
			IntPtr native_Count = JNIEnv.NewArray (Count);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_Count);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (Count != null) {
					JNIEnv.CopyArray (native_Count, Count);
					JNIEnv.DeleteLocalRef (native_Count);
				}
				global::System.GC.KeepAlive (Count);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PiccApi']/method[@name='NTAGReadData_Api' and count(parameter)=2 and parameter[1][@type='int'] and parameter[2][@type='byte[]']]"
		[Register ("NTAGReadData_Api", "(I[B)I", "")]
		public static unsafe int NTAGReadData_Api (int pageNum, byte[]? DataOut)
		{
			const string __id = "NTAGReadData_Api.(I[B)I";
			IntPtr native_DataOut = JNIEnv.NewArray (DataOut);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (pageNum);
				__args [1] = new JniArgumentValue (native_DataOut);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (DataOut != null) {
					JNIEnv.CopyArray (native_DataOut, DataOut);
					JNIEnv.DeleteLocalRef (native_DataOut);
				}
				global::System.GC.KeepAlive (DataOut);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PiccApi']/method[@name='NTAGReadSign_Api' and count(parameter)=1 and parameter[1][@type='byte[]']]"
		[Register ("NTAGReadSign_Api", "([B)I", "")]
		public static unsafe int NTAGReadSign_Api (byte[]? SignData)
		{
			const string __id = "NTAGReadSign_Api.([B)I";
			IntPtr native_SignData = JNIEnv.NewArray (SignData);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_SignData);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (SignData != null) {
					JNIEnv.CopyArray (native_SignData, SignData);
					JNIEnv.DeleteLocalRef (native_SignData);
				}
				global::System.GC.KeepAlive (SignData);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PiccApi']/method[@name='NTAGWriteData_Api' and count(parameter)=2 and parameter[1][@type='int'] and parameter[2][@type='byte[]']]"
		[Register ("NTAGWriteData_Api", "(I[B)I", "")]
		public static unsafe int NTAGWriteData_Api (int pageNum, byte[]? DataIn)
		{
			const string __id = "NTAGWriteData_Api.(I[B)I";
			IntPtr native_DataIn = JNIEnv.NewArray (DataIn);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (pageNum);
				__args [1] = new JniArgumentValue (native_DataIn);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (DataIn != null) {
					JNIEnv.CopyArray (native_DataIn, DataIn);
					JNIEnv.DeleteLocalRef (native_DataIn);
				}
				global::System.GC.KeepAlive (DataIn);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PiccApi']/method[@name='PiccCheck_Api' and count(parameter)=3 and parameter[1][@type='int'] and parameter[2][@type='byte[]'] and parameter[3][@type='byte[]']]"
		[Register ("PiccCheck_Api", "(I[B[B)I", "")]
		public static unsafe int PiccCheck_Api (int Mode, byte[]? CardType, byte[]? SerialNo)
		{
			const string __id = "PiccCheck_Api.(I[B[B)I";
			IntPtr native_CardType = JNIEnv.NewArray (CardType);
			IntPtr native_SerialNo = JNIEnv.NewArray (SerialNo);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (Mode);
				__args [1] = new JniArgumentValue (native_CardType);
				__args [2] = new JniArgumentValue (native_SerialNo);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (CardType != null) {
					JNIEnv.CopyArray (native_CardType, CardType);
					JNIEnv.DeleteLocalRef (native_CardType);
				}
				if (SerialNo != null) {
					JNIEnv.CopyArray (native_SerialNo, SerialNo);
					JNIEnv.DeleteLocalRef (native_SerialNo);
				}
				global::System.GC.KeepAlive (CardType);
				global::System.GC.KeepAlive (SerialNo);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PiccApi']/method[@name='PiccClose_Api' and count(parameter)=0]"
		[Register ("PiccClose_Api", "()I", "")]
		public static unsafe int PiccClose_Api ()
		{
			const string __id = "PiccClose_Api.()I";
			try {
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, null);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PiccApi']/method[@name='PiccGetCardInfo_Api' and count(parameter)=4 and parameter[1][@type='byte[]'] and parameter[2][@type='byte[]'] and parameter[3][@type='byte[]'] and parameter[4][@type='byte[]']]"
		[Register ("PiccGetCardInfo_Api", "([B[B[B[B)I", "")]
		public static unsafe int PiccGetCardInfo_Api (byte[]? lenArray, byte[]? atqa, byte[]? ats, byte[]? uid)
		{
			const string __id = "PiccGetCardInfo_Api.([B[B[B[B)I";
			IntPtr native_lenArray = JNIEnv.NewArray (lenArray);
			IntPtr native_atqa = JNIEnv.NewArray (atqa);
			IntPtr native_ats = JNIEnv.NewArray (ats);
			IntPtr native_uid = JNIEnv.NewArray (uid);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [4];
				__args [0] = new JniArgumentValue (native_lenArray);
				__args [1] = new JniArgumentValue (native_atqa);
				__args [2] = new JniArgumentValue (native_ats);
				__args [3] = new JniArgumentValue (native_uid);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (lenArray != null) {
					JNIEnv.CopyArray (native_lenArray, lenArray);
					JNIEnv.DeleteLocalRef (native_lenArray);
				}
				if (atqa != null) {
					JNIEnv.CopyArray (native_atqa, atqa);
					JNIEnv.DeleteLocalRef (native_atqa);
				}
				if (ats != null) {
					JNIEnv.CopyArray (native_ats, ats);
					JNIEnv.DeleteLocalRef (native_ats);
				}
				if (uid != null) {
					JNIEnv.CopyArray (native_uid, uid);
					JNIEnv.DeleteLocalRef (native_uid);
				}
				global::System.GC.KeepAlive (lenArray);
				global::System.GC.KeepAlive (atqa);
				global::System.GC.KeepAlive (ats);
				global::System.GC.KeepAlive (uid);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PiccApi']/method[@name='PiccHalt_Api' and count(parameter)=0]"
		[Register ("PiccHalt_Api", "()I", "")]
		public static unsafe int PiccHalt_Api ()
		{
			const string __id = "PiccHalt_Api.()I";
			try {
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, null);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PiccApi']/method[@name='PiccIsoCommand_Api' and count(parameter)=2 and parameter[1][@type='com.vanstone.trans.api.struct.ApduSend'] and parameter[2][@type='com.vanstone.trans.api.struct.ApduResp']]"
		[Register ("PiccIsoCommand_Api", "(Lcom/vanstone/trans/api/struct/ApduSend;Lcom/vanstone/trans/api/struct/ApduResp;)V", "")]
		public static unsafe void PiccIsoCommand_Api (global::Com.Vanstone.Trans.Api.Struct.ApduSend? apduSend, global::Com.Vanstone.Trans.Api.Struct.ApduResp? apduResp)
		{
			const string __id = "PiccIsoCommand_Api.(Lcom/vanstone/trans/api/struct/ApduSend;Lcom/vanstone/trans/api/struct/ApduResp;)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue ((apduSend == null) ? IntPtr.Zero : ((global::Java.Lang.Object) apduSend).Handle);
				__args [1] = new JniArgumentValue ((apduResp == null) ? IntPtr.Zero : ((global::Java.Lang.Object) apduResp).Handle);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				global::System.GC.KeepAlive (apduSend);
				global::System.GC.KeepAlive (apduResp);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PiccApi']/method[@name='PiccIsoCommand_Api' and count(parameter)=4 and parameter[1][@type='int'] and parameter[2][@type='byte[]'] and parameter[3][@type='int'] and parameter[4][@type='byte[]']]"
		[Register ("PiccIsoCommand_Api", "(I[BI[B)I", "")]
		public static unsafe int PiccIsoCommand_Api (int type, byte[]? apduSend, int sendLen, byte[]? apduResp)
		{
			const string __id = "PiccIsoCommand_Api.(I[BI[B)I";
			IntPtr native_apduSend = JNIEnv.NewArray (apduSend);
			IntPtr native_apduResp = JNIEnv.NewArray (apduResp);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [4];
				__args [0] = new JniArgumentValue (type);
				__args [1] = new JniArgumentValue (native_apduSend);
				__args [2] = new JniArgumentValue (sendLen);
				__args [3] = new JniArgumentValue (native_apduResp);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (apduSend != null) {
					JNIEnv.CopyArray (native_apduSend, apduSend);
					JNIEnv.DeleteLocalRef (native_apduSend);
				}
				if (apduResp != null) {
					JNIEnv.CopyArray (native_apduResp, apduResp);
					JNIEnv.DeleteLocalRef (native_apduResp);
				}
				global::System.GC.KeepAlive (apduSend);
				global::System.GC.KeepAlive (apduResp);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PiccApi']/method[@name='PiccOpen_Api' and count(parameter)=0]"
		[Register ("PiccOpen_Api", "()I", "")]
		public static unsafe int PiccOpen_Api ()
		{
			const string __id = "PiccOpen_Api.()I";
			try {
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, null);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PiccApi']/method[@name='PiccRemove_Api' and count(parameter)=0]"
		[Register ("PiccRemove_Api", "()I", "")]
		public static unsafe int PiccRemove_Api ()
		{
			const string __id = "PiccRemove_Api.()I";
			try {
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, null);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PiccApi']/method[@name='PiccRest_Api' and count(parameter)=2 and parameter[1][@type='int'] and parameter[2][@type='byte[]']]"
		[Register ("PiccRest_Api", "(I[B)I", "")]
		public static unsafe int PiccRest_Api (int mode, byte[]? responseBuffer)
		{
			const string __id = "PiccRest_Api.(I[B)I";
			IntPtr native_responseBuffer = JNIEnv.NewArray (responseBuffer);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (mode);
				__args [1] = new JniArgumentValue (native_responseBuffer);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (responseBuffer != null) {
					JNIEnv.CopyArray (native_responseBuffer, responseBuffer);
					JNIEnv.DeleteLocalRef (native_responseBuffer);
				}
				global::System.GC.KeepAlive (responseBuffer);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PiccApi']/method[@name='SidCardCommandSelectEx_Api' and count(parameter)=1 and parameter[1][@type='boolean']]"
		[Register ("SidCardCommandSelectEx_Api", "(Z)V", "")]
		public static unsafe void SidCardCommandSelectEx_Api (bool UseEx)
		{
			const string __id = "SidCardCommandSelectEx_Api.(Z)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (UseEx);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='PiccApi']/method[@name='SidCardCommand_Api' and count(parameter)=3 and parameter[1][@type='byte[]'] and parameter[2][@type='int'] and parameter[3][@type='byte[]']]"
		[Register ("SidCardCommand_Api", "([BI[B)I", "")]
		public static unsafe int SidCardCommand_Api (byte[]? apduSend, int sendLen, byte[]? apduRecv)
		{
			const string __id = "SidCardCommand_Api.([BI[B)I";
			IntPtr native_apduSend = JNIEnv.NewArray (apduSend);
			IntPtr native_apduRecv = JNIEnv.NewArray (apduRecv);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (native_apduSend);
				__args [1] = new JniArgumentValue (sendLen);
				__args [2] = new JniArgumentValue (native_apduRecv);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (apduSend != null) {
					JNIEnv.CopyArray (native_apduSend, apduSend);
					JNIEnv.DeleteLocalRef (native_apduSend);
				}
				if (apduRecv != null) {
					JNIEnv.CopyArray (native_apduRecv, apduRecv);
					JNIEnv.DeleteLocalRef (native_apduRecv);
				}
				global::System.GC.KeepAlive (apduSend);
				global::System.GC.KeepAlive (apduRecv);
			}
		}

	}
}
