//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable restore
using System;
using System.Collections.Generic;
using Android.Runtime;
using Java.Interop;

namespace Com.Vanstone.Utils {

	// Metadata.xml XPath class reference: path="/api/package[@name='com.vanstone.utils']/class[@name='RSAUtils']"
	[global::Android.Runtime.Register ("com/vanstone/utils/RSAUtils", DoNotGenerateAcw=true)]
	public partial class RSAUtils : global::Java.Lang.Object {

		// Metadata.xml XPath field reference: path="/api/package[@name='com.vanstone.utils']/class[@name='RSAUtils']/field[@name='keySize']"
		[Register ("keySize")]
		public static int KeySize {
			get {
				const string __id = "keySize.I";

				var __v = _members.StaticFields.GetInt32Value (__id);
				return __v;
			}
			set {
				const string __id = "keySize.I";

				try {
					_members.StaticFields.SetValue (__id, value);
				} finally {
				}
			}
		}


		// Metadata.xml XPath field reference: path="/api/package[@name='com.vanstone.utils']/class[@name='RSAUtils']/field[@name='privatekeyMap']"
		[Register ("privatekeyMap")]
		public static global::System.Collections.IDictionary? PrivatekeyMap {
			get {
				const string __id = "privatekeyMap.Ljava/util/Map;";

				var __v = _members.StaticFields.GetObjectValue (__id);
				return global::Android.Runtime.JavaDictionary.FromJniHandle (__v.Handle, JniHandleOwnership.TransferLocalRef);
			}
			set {
				const string __id = "privatekeyMap.Ljava/util/Map;";

				IntPtr native_value = global::Android.Runtime.JavaDictionary.ToLocalJniHandle (value);
				try {
					_members.StaticFields.SetValue (__id, new JniObjectReference (native_value));
				} finally {
					JNIEnv.DeleteLocalRef (native_value);
				}
			}
		}


		// Metadata.xml XPath field reference: path="/api/package[@name='com.vanstone.utils']/class[@name='RSAUtils']/field[@name='privateModulus']"
		[Register ("privateModulus")]
		public static IList<byte>? PrivateModulus {
			get {
				const string __id = "privateModulus.[B";

				var __v = _members.StaticFields.GetObjectValue (__id);
				return global::Android.Runtime.JavaArray<byte>.FromJniHandle (__v.Handle, JniHandleOwnership.TransferLocalRef);
			}
			set {
				const string __id = "privateModulus.[B";

				IntPtr native_value = global::Android.Runtime.JavaArray<byte>.ToLocalJniHandle (value);
				try {
					_members.StaticFields.SetValue (__id, new JniObjectReference (native_value));
				} finally {
					global::Android.Runtime.JNIEnv.DeleteLocalRef (native_value);
				}
			}
		}


		// Metadata.xml XPath field reference: path="/api/package[@name='com.vanstone.utils']/class[@name='RSAUtils']/field[@name='privatePublicExponent']"
		[Register ("privatePublicExponent")]
		public static IList<byte>? PrivatePublicExponent {
			get {
				const string __id = "privatePublicExponent.[B";

				var __v = _members.StaticFields.GetObjectValue (__id);
				return global::Android.Runtime.JavaArray<byte>.FromJniHandle (__v.Handle, JniHandleOwnership.TransferLocalRef);
			}
			set {
				const string __id = "privatePublicExponent.[B";

				IntPtr native_value = global::Android.Runtime.JavaArray<byte>.ToLocalJniHandle (value);
				try {
					_members.StaticFields.SetValue (__id, new JniObjectReference (native_value));
				} finally {
					global::Android.Runtime.JNIEnv.DeleteLocalRef (native_value);
				}
			}
		}


		// Metadata.xml XPath field reference: path="/api/package[@name='com.vanstone.utils']/class[@name='RSAUtils']/field[@name='publickeyMap']"
		[Register ("publickeyMap")]
		public static global::System.Collections.IDictionary? PublickeyMap {
			get {
				const string __id = "publickeyMap.Ljava/util/Map;";

				var __v = _members.StaticFields.GetObjectValue (__id);
				return global::Android.Runtime.JavaDictionary.FromJniHandle (__v.Handle, JniHandleOwnership.TransferLocalRef);
			}
			set {
				const string __id = "publickeyMap.Ljava/util/Map;";

				IntPtr native_value = global::Android.Runtime.JavaDictionary.ToLocalJniHandle (value);
				try {
					_members.StaticFields.SetValue (__id, new JniObjectReference (native_value));
				} finally {
					JNIEnv.DeleteLocalRef (native_value);
				}
			}
		}


		// Metadata.xml XPath field reference: path="/api/package[@name='com.vanstone.utils']/class[@name='RSAUtils']/field[@name='publicModulus']"
		[Register ("publicModulus")]
		public static IList<byte>? PublicModulus {
			get {
				const string __id = "publicModulus.[B";

				var __v = _members.StaticFields.GetObjectValue (__id);
				return global::Android.Runtime.JavaArray<byte>.FromJniHandle (__v.Handle, JniHandleOwnership.TransferLocalRef);
			}
			set {
				const string __id = "publicModulus.[B";

				IntPtr native_value = global::Android.Runtime.JavaArray<byte>.ToLocalJniHandle (value);
				try {
					_members.StaticFields.SetValue (__id, new JniObjectReference (native_value));
				} finally {
					global::Android.Runtime.JNIEnv.DeleteLocalRef (native_value);
				}
			}
		}


		// Metadata.xml XPath field reference: path="/api/package[@name='com.vanstone.utils']/class[@name='RSAUtils']/field[@name='publicPublicExponent']"
		[Register ("publicPublicExponent")]
		public static IList<byte>? PublicPublicExponent {
			get {
				const string __id = "publicPublicExponent.[B";

				var __v = _members.StaticFields.GetObjectValue (__id);
				return global::Android.Runtime.JavaArray<byte>.FromJniHandle (__v.Handle, JniHandleOwnership.TransferLocalRef);
			}
			set {
				const string __id = "publicPublicExponent.[B";

				IntPtr native_value = global::Android.Runtime.JavaArray<byte>.ToLocalJniHandle (value);
				try {
					_members.StaticFields.SetValue (__id, new JniObjectReference (native_value));
				} finally {
					global::Android.Runtime.JNIEnv.DeleteLocalRef (native_value);
				}
			}
		}

		// Metadata.xml XPath field reference: path="/api/package[@name='com.vanstone.utils']/class[@name='RSAUtils']/field[@name='SIGNATURE_INSTANCE']"
		[Register ("SIGNATURE_INSTANCE")]
		public const string SignatureInstance = (string) "SHA1WithRSA";

		static readonly JniPeerMembers _members = new XAPeerMembers ("com/vanstone/utils/RSAUtils", typeof (RSAUtils));

		internal static IntPtr class_ref {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		public override global::Java.Interop.JniPeerMembers JniPeerMembers {
			get { return _members; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override IntPtr ThresholdClass {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override global::System.Type ThresholdType {
			get { return _members.ManagedPeerType; }
		}

		protected RSAUtils (IntPtr javaReference, JniHandleOwnership transfer) : base (javaReference, transfer)
		{
		}

		// Metadata.xml XPath constructor reference: path="/api/package[@name='com.vanstone.utils']/class[@name='RSAUtils']/constructor[@name='RSAUtils' and count(parameter)=0]"
		[Register (".ctor", "()V", "")]
		public unsafe RSAUtils () : base (IntPtr.Zero, JniHandleOwnership.DoNotTransfer)
		{
			const string __id = "()V";

			if (((global::Java.Lang.Object) this).Handle != IntPtr.Zero)
				return;

			try {
				var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), null);
				SetHandle (__r.Handle, JniHandleOwnership.TransferLocalRef);
				_members.InstanceMethods.FinishCreateInstance (__id, this, null);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='RSAUtils']/method[@name='RSAEnAndDe_Api' and count(parameter)=4 and parameter[1][@type='int'] and parameter[2][@type='byte[]'] and parameter[3][@type='byte[]'] and parameter[4][@type='byte[]']]"
		[Register ("RSAEnAndDe_Api", "(I[B[B[B)I", "")]
		public static unsafe int RSAEnAndDe_Api (int mode, byte[]? Key, byte[]? content, byte[]? outdata)
		{
			const string __id = "RSAEnAndDe_Api.(I[B[B[B)I";
			IntPtr native_Key = JNIEnv.NewArray (Key);
			IntPtr native_content = JNIEnv.NewArray (content);
			IntPtr native_outdata = JNIEnv.NewArray (outdata);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [4];
				__args [0] = new JniArgumentValue (mode);
				__args [1] = new JniArgumentValue (native_Key);
				__args [2] = new JniArgumentValue (native_content);
				__args [3] = new JniArgumentValue (native_outdata);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (Key != null) {
					JNIEnv.CopyArray (native_Key, Key);
					JNIEnv.DeleteLocalRef (native_Key);
				}
				if (content != null) {
					JNIEnv.CopyArray (native_content, content);
					JNIEnv.DeleteLocalRef (native_content);
				}
				if (outdata != null) {
					JNIEnv.CopyArray (native_outdata, outdata);
					JNIEnv.DeleteLocalRef (native_outdata);
				}
				global::System.GC.KeepAlive (Key);
				global::System.GC.KeepAlive (content);
				global::System.GC.KeepAlive (outdata);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='RSAUtils']/method[@name='RSASign_Api' and count(parameter)=3 and parameter[1][@type='byte[]'] and parameter[2][@type='byte[]'] and parameter[3][@type='byte[]']]"
		[Register ("RSASign_Api", "([B[B[B)I", "")]
		public static unsafe int RSASign_Api (byte[]? privateKey, byte[]? content, byte[]? outdata)
		{
			const string __id = "RSASign_Api.([B[B[B)I";
			IntPtr native_privateKey = JNIEnv.NewArray (privateKey);
			IntPtr native_content = JNIEnv.NewArray (content);
			IntPtr native_outdata = JNIEnv.NewArray (outdata);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (native_privateKey);
				__args [1] = new JniArgumentValue (native_content);
				__args [2] = new JniArgumentValue (native_outdata);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (privateKey != null) {
					JNIEnv.CopyArray (native_privateKey, privateKey);
					JNIEnv.DeleteLocalRef (native_privateKey);
				}
				if (content != null) {
					JNIEnv.CopyArray (native_content, content);
					JNIEnv.DeleteLocalRef (native_content);
				}
				if (outdata != null) {
					JNIEnv.CopyArray (native_outdata, outdata);
					JNIEnv.DeleteLocalRef (native_outdata);
				}
				global::System.GC.KeepAlive (privateKey);
				global::System.GC.KeepAlive (content);
				global::System.GC.KeepAlive (outdata);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='RSAUtils']/method[@name='RSAVerify_Api' and count(parameter)=3 and parameter[1][@type='byte[]'] and parameter[2][@type='byte[]'] and parameter[3][@type='byte[]']]"
		[Register ("RSAVerify_Api", "([B[B[B)I", "")]
		public static unsafe int RSAVerify_Api (byte[]? publicKey, byte[]? content, byte[]? sign)
		{
			const string __id = "RSAVerify_Api.([B[B[B)I";
			IntPtr native_publicKey = JNIEnv.NewArray (publicKey);
			IntPtr native_content = JNIEnv.NewArray (content);
			IntPtr native_sign = JNIEnv.NewArray (sign);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (native_publicKey);
				__args [1] = new JniArgumentValue (native_content);
				__args [2] = new JniArgumentValue (native_sign);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (publicKey != null) {
					JNIEnv.CopyArray (native_publicKey, publicKey);
					JNIEnv.DeleteLocalRef (native_publicKey);
				}
				if (content != null) {
					JNIEnv.CopyArray (native_content, content);
					JNIEnv.DeleteLocalRef (native_content);
				}
				if (sign != null) {
					JNIEnv.CopyArray (native_sign, sign);
					JNIEnv.DeleteLocalRef (native_sign);
				}
				global::System.GC.KeepAlive (publicKey);
				global::System.GC.KeepAlive (content);
				global::System.GC.KeepAlive (sign);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='RSAUtils']/method[@name='bigIntegerToByteArray' and count(parameter)=1 and parameter[1][@type='java.math.BigInteger']]"
		[Register ("bigIntegerToByteArray", "(Ljava/math/BigInteger;)[B", "")]
		public static unsafe byte[]? BigIntegerToByteArray (global::Java.Math.BigInteger? bigInteger)
		{
			const string __id = "bigIntegerToByteArray.(Ljava/math/BigInteger;)[B";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue ((bigInteger == null) ? IntPtr.Zero : ((global::Java.Lang.Object) bigInteger).Handle);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return (byte[]?) JNIEnv.GetArray (__rm.Handle, JniHandleOwnership.TransferLocalRef, typeof (byte));
			} finally {
				global::System.GC.KeepAlive (bigInteger);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='RSAUtils']/method[@name='bytesToOneHexString' and count(parameter)=1 and parameter[1][@type='byte[]']]"
		[Register ("bytesToOneHexString", "([B)Ljava/lang/String;", "")]
		public static unsafe string? BytesToOneHexString (byte[]? bArray)
		{
			const string __id = "bytesToOneHexString.([B)Ljava/lang/String;";
			IntPtr native_bArray = JNIEnv.NewArray (bArray);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_bArray);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				if (bArray != null) {
					JNIEnv.CopyArray (native_bArray, bArray);
					JNIEnv.DeleteLocalRef (native_bArray);
				}
				global::System.GC.KeepAlive (bArray);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='RSAUtils']/method[@name='decryptByPrivateKey' and count(parameter)=2 and parameter[1][@type='byte[]'] and parameter[2][@type='java.lang.String']]"
		[Register ("decryptByPrivateKey", "([BLjava/lang/String;)[B", "")]
		public static unsafe byte[]? DecryptByPrivateKey (byte[]? content, string? privateKey)
		{
			const string __id = "decryptByPrivateKey.([BLjava/lang/String;)[B";
			IntPtr native_content = JNIEnv.NewArray (content);
			IntPtr native_privateKey = JNIEnv.NewString ((string?)privateKey);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_content);
				__args [1] = new JniArgumentValue (native_privateKey);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return (byte[]?) JNIEnv.GetArray (__rm.Handle, JniHandleOwnership.TransferLocalRef, typeof (byte));
			} finally {
				if (content != null) {
					JNIEnv.CopyArray (native_content, content);
					JNIEnv.DeleteLocalRef (native_content);
				}
				JNIEnv.DeleteLocalRef (native_privateKey);
				global::System.GC.KeepAlive (content);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='RSAUtils']/method[@name='encryptByPublicKey' and count(parameter)=2 and parameter[1][@type='byte[]'] and parameter[2][@type='java.lang.String']]"
		[Register ("encryptByPublicKey", "([BLjava/lang/String;)[B", "")]
		public static unsafe byte[]? EncryptByPublicKey (byte[]? content, string? publicKey)
		{
			const string __id = "encryptByPublicKey.([BLjava/lang/String;)[B";
			IntPtr native_content = JNIEnv.NewArray (content);
			IntPtr native_publicKey = JNIEnv.NewString ((string?)publicKey);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_content);
				__args [1] = new JniArgumentValue (native_publicKey);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return (byte[]?) JNIEnv.GetArray (__rm.Handle, JniHandleOwnership.TransferLocalRef, typeof (byte));
			} finally {
				if (content != null) {
					JNIEnv.CopyArray (native_content, content);
					JNIEnv.DeleteLocalRef (native_content);
				}
				JNIEnv.DeleteLocalRef (native_publicKey);
				global::System.GC.KeepAlive (content);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='RSAUtils']/method[@name='getKeyPair' and count(parameter)=1 and parameter[1][@type='int']]"
		[Register ("getKeyPair", "(I)I", "")]
		public static unsafe int GetKeyPair (int keysize)
		{
			const string __id = "getKeyPair.(I)I";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (keysize);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='RSAUtils']/method[@name='getPrivateKey' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
		[Register ("getPrivateKey", "(Ljava/lang/String;)Ljava/security/PrivateKey;", "")]
		public static unsafe global::Java.Security.IPrivateKey? GetPrivateKey (string? privateKey)
		{
			const string __id = "getPrivateKey.(Ljava/lang/String;)Ljava/security/PrivateKey;";
			IntPtr native_privateKey = JNIEnv.NewString ((string?)privateKey);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_privateKey);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return global::Java.Lang.Object.GetObject<global::Java.Security.IPrivateKey> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				JNIEnv.DeleteLocalRef (native_privateKey);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='RSAUtils']/method[@name='getPublicKey' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
		[Register ("getPublicKey", "(Ljava/lang/String;)Ljava/security/PublicKey;", "")]
		public static unsafe global::Java.Security.IPublicKey? GetPublicKey (string? publicKey)
		{
			const string __id = "getPublicKey.(Ljava/lang/String;)Ljava/security/PublicKey;";
			IntPtr native_publicKey = JNIEnv.NewString ((string?)publicKey);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_publicKey);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return global::Java.Lang.Object.GetObject<global::Java.Security.IPublicKey> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				JNIEnv.DeleteLocalRef (native_publicKey);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='RSAUtils']/method[@name='sign' and count(parameter)=2 and parameter[1][@type='byte[]'] and parameter[2][@type='java.lang.String']]"
		[Register ("sign", "([BLjava/lang/String;)[B", "")]
		public static unsafe byte[]? Sign (byte[]? content, string? privateKey)
		{
			const string __id = "sign.([BLjava/lang/String;)[B";
			IntPtr native_content = JNIEnv.NewArray (content);
			IntPtr native_privateKey = JNIEnv.NewString ((string?)privateKey);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_content);
				__args [1] = new JniArgumentValue (native_privateKey);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return (byte[]?) JNIEnv.GetArray (__rm.Handle, JniHandleOwnership.TransferLocalRef, typeof (byte));
			} finally {
				if (content != null) {
					JNIEnv.CopyArray (native_content, content);
					JNIEnv.DeleteLocalRef (native_content);
				}
				JNIEnv.DeleteLocalRef (native_privateKey);
				global::System.GC.KeepAlive (content);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='RSAUtils']/method[@name='verify' and count(parameter)=3 and parameter[1][@type='byte[]'] and parameter[2][@type='byte[]'] and parameter[3][@type='java.lang.String']]"
		[Register ("verify", "([B[BLjava/lang/String;)Z", "")]
		public static unsafe bool Verify (byte[]? content, byte[]? sign, string? publicKey)
		{
			const string __id = "verify.([B[BLjava/lang/String;)Z";
			IntPtr native_content = JNIEnv.NewArray (content);
			IntPtr native_sign = JNIEnv.NewArray (sign);
			IntPtr native_publicKey = JNIEnv.NewString ((string?)publicKey);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (native_content);
				__args [1] = new JniArgumentValue (native_sign);
				__args [2] = new JniArgumentValue (native_publicKey);
				var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, __args);
				return __rm;
			} finally {
				if (content != null) {
					JNIEnv.CopyArray (native_content, content);
					JNIEnv.DeleteLocalRef (native_content);
				}
				if (sign != null) {
					JNIEnv.CopyArray (native_sign, sign);
					JNIEnv.DeleteLocalRef (native_sign);
				}
				JNIEnv.DeleteLocalRef (native_publicKey);
				global::System.GC.KeepAlive (content);
				global::System.GC.KeepAlive (sign);
			}
		}

	}
}
