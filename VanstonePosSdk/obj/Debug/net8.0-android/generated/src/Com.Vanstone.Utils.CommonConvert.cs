//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable restore
using System;
using System.Collections.Generic;
using Android.Runtime;
using Java.Interop;

namespace Com.Vanstone.Utils {

	// Metadata.xml XPath class reference: path="/api/package[@name='com.vanstone.utils']/class[@name='CommonConvert']"
	[global::Android.Runtime.Register ("com/vanstone/utils/CommonConvert", DoNotGenerateAcw=true)]
	public partial class CommonConvert : global::Java.Lang.Object {

		// Metadata.xml XPath field reference: path="/api/package[@name='com.vanstone.utils']/class[@name='CommonConvert']/field[@name='ALIGN_LEFT']"
		[Register ("ALIGN_LEFT")]
		public static string? AlignLeft {
			get {
				const string __id = "ALIGN_LEFT.Ljava/lang/String;";

				var __v = _members.StaticFields.GetObjectValue (__id);
				return JNIEnv.GetString (__v.Handle, JniHandleOwnership.TransferLocalRef);
			}
			set {
				const string __id = "ALIGN_LEFT.Ljava/lang/String;";

				IntPtr native_value = JNIEnv.NewString ((string?)value);
				try {
					_members.StaticFields.SetValue (__id, new JniObjectReference (native_value));
				} finally {
					JNIEnv.DeleteLocalRef (native_value);
				}
			}
		}


		// Metadata.xml XPath field reference: path="/api/package[@name='com.vanstone.utils']/class[@name='CommonConvert']/field[@name='ALIGN_RIGHT']"
		[Register ("ALIGN_RIGHT")]
		public static string? AlignRight {
			get {
				const string __id = "ALIGN_RIGHT.Ljava/lang/String;";

				var __v = _members.StaticFields.GetObjectValue (__id);
				return JNIEnv.GetString (__v.Handle, JniHandleOwnership.TransferLocalRef);
			}
			set {
				const string __id = "ALIGN_RIGHT.Ljava/lang/String;";

				IntPtr native_value = JNIEnv.NewString ((string?)value);
				try {
					_members.StaticFields.SetValue (__id, new JniObjectReference (native_value));
				} finally {
					JNIEnv.DeleteLocalRef (native_value);
				}
			}
		}


		// Metadata.xml XPath field reference: path="/api/package[@name='com.vanstone.utils']/class[@name='CommonConvert']/field[@name='LINE_SEPARATOR']"
		[Register ("LINE_SEPARATOR")]
		public static string? LineSeparator {
			get {
				const string __id = "LINE_SEPARATOR.Ljava/lang/String;";

				var __v = _members.StaticFields.GetObjectValue (__id);
				return JNIEnv.GetString (__v.Handle, JniHandleOwnership.TransferLocalRef);
			}
		}

		static readonly JniPeerMembers _members = new XAPeerMembers ("com/vanstone/utils/CommonConvert", typeof (CommonConvert));

		internal static IntPtr class_ref {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		public override global::Java.Interop.JniPeerMembers JniPeerMembers {
			get { return _members; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override IntPtr ThresholdClass {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override global::System.Type ThresholdType {
			get { return _members.ManagedPeerType; }
		}

		protected CommonConvert (IntPtr javaReference, JniHandleOwnership transfer) : base (javaReference, transfer)
		{
		}

		// Metadata.xml XPath constructor reference: path="/api/package[@name='com.vanstone.utils']/class[@name='CommonConvert']/constructor[@name='CommonConvert' and count(parameter)=0]"
		[Register (".ctor", "()V", "")]
		public unsafe CommonConvert () : base (IntPtr.Zero, JniHandleOwnership.DoNotTransfer)
		{
			const string __id = "()V";

			if (((global::Java.Lang.Object) this).Handle != IntPtr.Zero)
				return;

			try {
				var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), null);
				SetHandle (__r.Handle, JniHandleOwnership.TransferLocalRef);
				_members.InstanceMethods.FinishCreateInstance (__id, this, null);
			} finally {
			}
		}

		public static unsafe string? Encoding {
			// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='CommonConvert']/method[@name='getEncoding' and count(parameter)=0]"
			[Register ("getEncoding", "()Ljava/lang/String;", "")]
			get {
				const string __id = "getEncoding.()Ljava/lang/String;";
				try {
					var __rm = _members.StaticMethods.InvokeObjectMethod (__id, null);
					return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
				} finally {
				}
			}
			// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='CommonConvert']/method[@name='setEncoding' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
			[Register ("setEncoding", "(Ljava/lang/String;)V", "")]
			set {
				const string __id = "setEncoding.(Ljava/lang/String;)V";
				IntPtr native_value = JNIEnv.NewString ((string?)value);
				try {
					JniArgumentValue* __args = stackalloc JniArgumentValue [1];
					__args [0] = new JniArgumentValue (native_value);
					_members.StaticMethods.InvokeVoidMethod (__id, __args);
				} finally {
					JNIEnv.DeleteLocalRef (native_value);
				}
			}
		}

		public static unsafe string? Null {
			// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='CommonConvert']/method[@name='getNull' and count(parameter)=0]"
			[Register ("getNull", "()Ljava/lang/String;", "")]
			get {
				const string __id = "getNull.()Ljava/lang/String;";
				try {
					var __rm = _members.StaticMethods.InvokeObjectMethod (__id, null);
					return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
				} finally {
				}
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='CommonConvert']/method[@name='BCDFToAmtConvert' and count(parameter)=1 and parameter[1][@type='byte[]']]"
		[Register ("BCDFToAmtConvert", "([B)Ljava/lang/String;", "")]
		public static unsafe string? BCDFToAmtConvert (byte[]? pSrc)
		{
			const string __id = "BCDFToAmtConvert.([B)Ljava/lang/String;";
			IntPtr native_pSrc = JNIEnv.NewArray (pSrc);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_pSrc);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				if (pSrc != null) {
					JNIEnv.CopyArray (native_pSrc, pSrc);
					JNIEnv.DeleteLocalRef (native_pSrc);
				}
				global::System.GC.KeepAlive (pSrc);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='CommonConvert']/method[@name='BytesToString' and count(parameter)=1 and parameter[1][@type='byte[]']]"
		[Register ("BytesToString", "([B)Ljava/lang/String;", "")]
		public static unsafe string? BytesToString (byte[]? buf)
		{
			const string __id = "BytesToString.([B)Ljava/lang/String;";
			IntPtr native_buf = JNIEnv.NewArray (buf);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_buf);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				if (buf != null) {
					JNIEnv.CopyArray (native_buf, buf);
					JNIEnv.DeleteLocalRef (native_buf);
				}
				global::System.GC.KeepAlive (buf);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='CommonConvert']/method[@name='FillStr' and count(parameter)=3 and parameter[1][@type='int'] and parameter[2][@type='char'] and parameter[3][@type='int']]"
		[Register ("FillStr", "(ICI)[B", "")]
		public static unsafe byte[]? FillStr (int desc, char ch, int len)
		{
			const string __id = "FillStr.(ICI)[B";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (desc);
				__args [1] = new JniArgumentValue (ch);
				__args [2] = new JniArgumentValue (len);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return (byte[]?) JNIEnv.GetArray (__rm.Handle, JniHandleOwnership.TransferLocalRef, typeof (byte));
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='CommonConvert']/method[@name='FillStr' and count(parameter)=3 and parameter[1][@type='java.lang.String'] and parameter[2][@type='char'] and parameter[3][@type='int']]"
		[Register ("FillStr", "(Ljava/lang/String;CI)[B", "")]
		public static unsafe byte[]? FillStr (string? desc, char ch, int len)
		{
			const string __id = "FillStr.(Ljava/lang/String;CI)[B";
			IntPtr native_desc = JNIEnv.NewString ((string?)desc);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (native_desc);
				__args [1] = new JniArgumentValue (ch);
				__args [2] = new JniArgumentValue (len);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return (byte[]?) JNIEnv.GetArray (__rm.Handle, JniHandleOwnership.TransferLocalRef, typeof (byte));
			} finally {
				JNIEnv.DeleteLocalRef (native_desc);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='CommonConvert']/method[@name='Gbk2Utf' and count(parameter)=1 and parameter[1][@type='byte[]']]"
		[Register ("Gbk2Utf", "([B)[B", "")]
		public static unsafe byte[]? Gbk2Utf (byte[]? buf)
		{
			const string __id = "Gbk2Utf.([B)[B";
			IntPtr native_buf = JNIEnv.NewArray (buf);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_buf);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return (byte[]?) JNIEnv.GetArray (__rm.Handle, JniHandleOwnership.TransferLocalRef, typeof (byte));
			} finally {
				if (buf != null) {
					JNIEnv.CopyArray (native_buf, buf);
					JNIEnv.DeleteLocalRef (native_buf);
				}
				global::System.GC.KeepAlive (buf);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='CommonConvert']/method[@name='StringFToAmtConvert' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
		[Register ("StringFToAmtConvert", "(Ljava/lang/String;)Ljava/lang/String;", "")]
		public static unsafe string? StringFToAmtConvert (string? desc)
		{
			const string __id = "StringFToAmtConvert.(Ljava/lang/String;)Ljava/lang/String;";
			IntPtr native_desc = JNIEnv.NewString ((string?)desc);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_desc);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				JNIEnv.DeleteLocalRef (native_desc);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='CommonConvert']/method[@name='StringToBytes' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
		[Register ("StringToBytes", "(Ljava/lang/String;)[B", "")]
		public static unsafe byte[]? StringToBytes (string? str)
		{
			const string __id = "StringToBytes.(Ljava/lang/String;)[B";
			IntPtr native_str = JNIEnv.NewString ((string?)str);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_str);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return (byte[]?) JNIEnv.GetArray (__rm.Handle, JniHandleOwnership.TransferLocalRef, typeof (byte));
			} finally {
				JNIEnv.DeleteLocalRef (native_str);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='CommonConvert']/method[@name='StringToBytes' and count(parameter)=2 and parameter[1][@type='java.lang.String'] and parameter[2][@type='java.lang.String']]"
		[Register ("StringToBytes", "(Ljava/lang/String;Ljava/lang/String;)[B", "")]
		public static unsafe byte[]? StringToBytes (string? str, string? encoding)
		{
			const string __id = "StringToBytes.(Ljava/lang/String;Ljava/lang/String;)[B";
			IntPtr native_str = JNIEnv.NewString ((string?)str);
			IntPtr native_encoding = JNIEnv.NewString ((string?)encoding);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_str);
				__args [1] = new JniArgumentValue (native_encoding);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return (byte[]?) JNIEnv.GetArray (__rm.Handle, JniHandleOwnership.TransferLocalRef, typeof (byte));
			} finally {
				JNIEnv.DeleteLocalRef (native_str);
				JNIEnv.DeleteLocalRef (native_encoding);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='CommonConvert']/method[@name='Utf2Gbk' and count(parameter)=1 and parameter[1][@type='byte[]']]"
		[Register ("Utf2Gbk", "([B)Ljava/lang/String;", "")]
		public static unsafe string? Utf2Gbk (byte[]? buf)
		{
			const string __id = "Utf2Gbk.([B)Ljava/lang/String;";
			IntPtr native_buf = JNIEnv.NewArray (buf);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_buf);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				if (buf != null) {
					JNIEnv.CopyArray (native_buf, buf);
					JNIEnv.DeleteLocalRef (native_buf);
				}
				global::System.GC.KeepAlive (buf);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='CommonConvert']/method[@name='ascStringToBCD' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
		[Register ("ascStringToBCD", "(Ljava/lang/String;)[B", "")]
		public static unsafe byte[]? AscStringToBCD (string? ascString)
		{
			const string __id = "ascStringToBCD.(Ljava/lang/String;)[B";
			IntPtr native_ascString = JNIEnv.NewString ((string?)ascString);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_ascString);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return (byte[]?) JNIEnv.GetArray (__rm.Handle, JniHandleOwnership.TransferLocalRef, typeof (byte));
			} finally {
				JNIEnv.DeleteLocalRef (native_ascString);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='CommonConvert']/method[@name='ascStringToBCD' and count(parameter)=2 and parameter[1][@type='java.lang.String'] and parameter[2][@type='int']]"
		[Register ("ascStringToBCD", "(Ljava/lang/String;I)[B", "")]
		public static unsafe byte[]? AscStringToBCD (string? ascString, int len)
		{
			const string __id = "ascStringToBCD.(Ljava/lang/String;I)[B";
			IntPtr native_ascString = JNIEnv.NewString ((string?)ascString);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_ascString);
				__args [1] = new JniArgumentValue (len);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return (byte[]?) JNIEnv.GetArray (__rm.Handle, JniHandleOwnership.TransferLocalRef, typeof (byte));
			} finally {
				JNIEnv.DeleteLocalRef (native_ascString);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='CommonConvert']/method[@name='ascStringToBCD' and count(parameter)=2 and parameter[1][@type='java.lang.String'] and parameter[2][@type='java.lang.String']]"
		[Register ("ascStringToBCD", "(Ljava/lang/String;Ljava/lang/String;)[B", "")]
		public static unsafe byte[]? AscStringToBCD (string? s, string? alignment)
		{
			const string __id = "ascStringToBCD.(Ljava/lang/String;Ljava/lang/String;)[B";
			IntPtr native_s = JNIEnv.NewString ((string?)s);
			IntPtr native_alignment = JNIEnv.NewString ((string?)alignment);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_s);
				__args [1] = new JniArgumentValue (native_alignment);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return (byte[]?) JNIEnv.GetArray (__rm.Handle, JniHandleOwnership.TransferLocalRef, typeof (byte));
			} finally {
				JNIEnv.DeleteLocalRef (native_s);
				JNIEnv.DeleteLocalRef (native_alignment);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='CommonConvert']/method[@name='bcdToASCString' and count(parameter)=1 and parameter[1][@type='byte[]']]"
		[Register ("bcdToASCString", "([B)Ljava/lang/String;", "")]
		public static unsafe string? BcdToASCString (byte[]? bytes)
		{
			const string __id = "bcdToASCString.([B)Ljava/lang/String;";
			IntPtr native_bytes = JNIEnv.NewArray (bytes);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_bytes);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				if (bytes != null) {
					JNIEnv.CopyArray (native_bytes, bytes);
					JNIEnv.DeleteLocalRef (native_bytes);
				}
				global::System.GC.KeepAlive (bytes);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='CommonConvert']/method[@name='bcdToASCString' and count(parameter)=3 and parameter[1][@type='byte[]'] and parameter[2][@type='int'] and parameter[3][@type='int']]"
		[Register ("bcdToASCString", "([BII)Ljava/lang/String;", "")]
		public static unsafe string? BcdToASCString (byte[]? bytes, int offset, int len)
		{
			const string __id = "bcdToASCString.([BII)Ljava/lang/String;";
			IntPtr native_bytes = JNIEnv.NewArray (bytes);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (native_bytes);
				__args [1] = new JniArgumentValue (offset);
				__args [2] = new JniArgumentValue (len);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				if (bytes != null) {
					JNIEnv.CopyArray (native_bytes, bytes);
					JNIEnv.DeleteLocalRef (native_bytes);
				}
				global::System.GC.KeepAlive (bytes);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='CommonConvert']/method[@name='bcdToASCString' and count(parameter)=5 and parameter[1][@type='byte[]'] and parameter[2][@type='int'] and parameter[3][@type='int'] and parameter[4][@type='int'] and parameter[5][@type='java.lang.String']]"
		[Register ("bcdToASCString", "([BIIILjava/lang/String;)Ljava/lang/String;", "")]
		public static unsafe string? BcdToASCString (byte[]? bytes, int offset, int len, int actualLen, string? alignment)
		{
			const string __id = "bcdToASCString.([BIIILjava/lang/String;)Ljava/lang/String;";
			IntPtr native_bytes = JNIEnv.NewArray (bytes);
			IntPtr native_alignment = JNIEnv.NewString ((string?)alignment);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [5];
				__args [0] = new JniArgumentValue (native_bytes);
				__args [1] = new JniArgumentValue (offset);
				__args [2] = new JniArgumentValue (len);
				__args [3] = new JniArgumentValue (actualLen);
				__args [4] = new JniArgumentValue (native_alignment);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				if (bytes != null) {
					JNIEnv.CopyArray (native_bytes, bytes);
					JNIEnv.DeleteLocalRef (native_bytes);
				}
				JNIEnv.DeleteLocalRef (native_alignment);
				global::System.GC.KeepAlive (bytes);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='CommonConvert']/method[@name='bcdToASCString' and count(parameter)=3 and parameter[1][@type='byte[]'] and parameter[2][@type='int'] and parameter[3][@type='java.lang.String']]"
		[Register ("bcdToASCString", "([BILjava/lang/String;)Ljava/lang/String;", "")]
		public static unsafe string? BcdToASCString (byte[]? bytes, int actualLen, string? alignment)
		{
			const string __id = "bcdToASCString.([BILjava/lang/String;)Ljava/lang/String;";
			IntPtr native_bytes = JNIEnv.NewArray (bytes);
			IntPtr native_alignment = JNIEnv.NewString ((string?)alignment);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (native_bytes);
				__args [1] = new JniArgumentValue (actualLen);
				__args [2] = new JniArgumentValue (native_alignment);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				if (bytes != null) {
					JNIEnv.CopyArray (native_bytes, bytes);
					JNIEnv.DeleteLocalRef (native_bytes);
				}
				JNIEnv.DeleteLocalRef (native_alignment);
				global::System.GC.KeepAlive (bytes);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='CommonConvert']/method[@name='bcdToINT' and count(parameter)=1 and parameter[1][@type='byte[]']]"
		[Register ("bcdToINT", "([B)I", "")]
		public static unsafe int BcdToINT (byte[]? data)
		{
			const string __id = "bcdToINT.([B)I";
			IntPtr native_data = JNIEnv.NewArray (data);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_data);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (data != null) {
					JNIEnv.CopyArray (native_data, data);
					JNIEnv.DeleteLocalRef (native_data);
				}
				global::System.GC.KeepAlive (data);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='CommonConvert']/method[@name='binaryStringToBytes' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
		[Register ("binaryStringToBytes", "(Ljava/lang/String;)[B", "")]
		public static unsafe byte[]? BinaryStringToBytes (string? binary)
		{
			const string __id = "binaryStringToBytes.(Ljava/lang/String;)[B";
			IntPtr native_binary = JNIEnv.NewString ((string?)binary);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_binary);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return (byte[]?) JNIEnv.GetArray (__rm.Handle, JniHandleOwnership.TransferLocalRef, typeof (byte));
			} finally {
				JNIEnv.DeleteLocalRef (native_binary);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='CommonConvert']/method[@name='buildByteArray' and count(parameter)=2 and parameter[1][@type='byte[]'] and parameter[2][@type='byte[]']]"
		[Register ("buildByteArray", "([B[B)[B", "")]
		public static unsafe byte[]? BuildByteArray (byte[]? srcArry, byte[]? destArry)
		{
			const string __id = "buildByteArray.([B[B)[B";
			IntPtr native_srcArry = JNIEnv.NewArray (srcArry);
			IntPtr native_destArry = JNIEnv.NewArray (destArry);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_srcArry);
				__args [1] = new JniArgumentValue (native_destArry);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return (byte[]?) JNIEnv.GetArray (__rm.Handle, JniHandleOwnership.TransferLocalRef, typeof (byte));
			} finally {
				if (srcArry != null) {
					JNIEnv.CopyArray (native_srcArry, srcArry);
					JNIEnv.DeleteLocalRef (native_srcArry);
				}
				if (destArry != null) {
					JNIEnv.CopyArray (native_destArry, destArry);
					JNIEnv.DeleteLocalRef (native_destArry);
				}
				global::System.GC.KeepAlive (srcArry);
				global::System.GC.KeepAlive (destArry);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='CommonConvert']/method[@name='byte2HexString' and count(parameter)=1 and parameter[1][@type='byte']]"
		[Register ("byte2HexString", "(B)Ljava/lang/String;", "")]
		public static unsafe string? Byte2HexString (sbyte b)
		{
			const string __id = "byte2HexString.(B)Ljava/lang/String;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (b);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='CommonConvert']/method[@name='bytes2HexString' and count(parameter)=1 and parameter[1][@type='byte[]']]"
		[Register ("bytes2HexString", "([B)Ljava/lang/String;", "")]
		public static unsafe string? Bytes2HexString (byte[]? b)
		{
			const string __id = "bytes2HexString.([B)Ljava/lang/String;";
			IntPtr native_b = JNIEnv.NewArray (b);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_b);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				if (b != null) {
					JNIEnv.CopyArray (native_b, b);
					JNIEnv.DeleteLocalRef (native_b);
				}
				global::System.GC.KeepAlive (b);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='CommonConvert']/method[@name='bytes2HexString' and count(parameter)=3 and parameter[1][@type='byte[]'] and parameter[2][@type='int'] and parameter[3][@type='int']]"
		[Register ("bytes2HexString", "([BII)Ljava/lang/String;", "")]
		public static unsafe string? Bytes2HexString (byte[]? src, int off, int len)
		{
			const string __id = "bytes2HexString.([BII)Ljava/lang/String;";
			IntPtr native_src = JNIEnv.NewArray (src);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (native_src);
				__args [1] = new JniArgumentValue (off);
				__args [2] = new JniArgumentValue (len);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				if (src != null) {
					JNIEnv.CopyArray (native_src, src);
					JNIEnv.DeleteLocalRef (native_src);
				}
				global::System.GC.KeepAlive (src);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='CommonConvert']/method[@name='bytesToHexString' and count(parameter)=1 and parameter[1][@type='byte[]']]"
		[Register ("bytesToHexString", "([B)Ljava/lang/String;", "")]
		public static unsafe string? BytesToHexString (byte[]? bArray)
		{
			const string __id = "bytesToHexString.([B)Ljava/lang/String;";
			IntPtr native_bArray = JNIEnv.NewArray (bArray);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_bArray);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				if (bArray != null) {
					JNIEnv.CopyArray (native_bArray, bArray);
					JNIEnv.DeleteLocalRef (native_bArray);
				}
				global::System.GC.KeepAlive (bArray);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='CommonConvert']/method[@name='bytesToInt' and count(parameter)=1 and parameter[1][@type='byte[]']]"
		[Register ("bytesToInt", "([B)I", "")]
		public static unsafe int BytesToInt (byte[]? data)
		{
			const string __id = "bytesToInt.([B)I";
			IntPtr native_data = JNIEnv.NewArray (data);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_data);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (data != null) {
					JNIEnv.CopyArray (native_data, data);
					JNIEnv.DeleteLocalRef (native_data);
				}
				global::System.GC.KeepAlive (data);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='CommonConvert']/method[@name='bytesToIntValue' and count(parameter)=1 and parameter[1][@type='byte[]']]"
		[Register ("bytesToIntValue", "([B)I", "")]
		public static unsafe int BytesToIntValue (byte[]? array)
		{
			const string __id = "bytesToIntValue.([B)I";
			IntPtr native_array = JNIEnv.NewArray (array);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_array);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (array != null) {
					JNIEnv.CopyArray (native_array, array);
					JNIEnv.DeleteLocalRef (native_array);
				}
				global::System.GC.KeepAlive (array);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='CommonConvert']/method[@name='bytesToLong' and count(parameter)=1 and parameter[1][@type='byte[]']]"
		[Register ("bytesToLong", "([B)J", "")]
		public static unsafe long BytesToLong (byte[]? data)
		{
			const string __id = "bytesToLong.([B)J";
			IntPtr native_data = JNIEnv.NewArray (data);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_data);
				var __rm = _members.StaticMethods.InvokeInt64Method (__id, __args);
				return __rm;
			} finally {
				if (data != null) {
					JNIEnv.CopyArray (native_data, data);
					JNIEnv.DeleteLocalRef (native_data);
				}
				global::System.GC.KeepAlive (data);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='CommonConvert']/method[@name='bytesToShort' and count(parameter)=1 and parameter[1][@type='byte[]']]"
		[Register ("bytesToShort", "([B)S", "")]
		public static unsafe short BytesToShort (byte[]? data)
		{
			const string __id = "bytesToShort.([B)S";
			IntPtr native_data = JNIEnv.NewArray (data);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_data);
				var __rm = _members.StaticMethods.InvokeInt16Method (__id, __args);
				return __rm;
			} finally {
				if (data != null) {
					JNIEnv.CopyArray (native_data, data);
					JNIEnv.DeleteLocalRef (native_data);
				}
				global::System.GC.KeepAlive (data);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='CommonConvert']/method[@name='bytesToString' and count(parameter)=3 and parameter[1][@type='byte[]'] and parameter[2][@type='int'] and parameter[3][@type='int']]"
		[Register ("bytesToString", "([BII)Ljava/lang/String;", "")]
		public static unsafe string? BytesToString (byte[]? buffer, int offset, int len)
		{
			const string __id = "bytesToString.([BII)Ljava/lang/String;";
			IntPtr native_buffer = JNIEnv.NewArray (buffer);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (native_buffer);
				__args [1] = new JniArgumentValue (offset);
				__args [2] = new JniArgumentValue (len);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				if (buffer != null) {
					JNIEnv.CopyArray (native_buffer, buffer);
					JNIEnv.DeleteLocalRef (native_buffer);
				}
				global::System.GC.KeepAlive (buffer);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='CommonConvert']/method[@name='bytesToString' and count(parameter)=4 and parameter[1][@type='byte[]'] and parameter[2][@type='int'] and parameter[3][@type='int'] and parameter[4][@type='java.lang.String']]"
		[Register ("bytesToString", "([BIILjava/lang/String;)Ljava/lang/String;", "")]
		public static unsafe string? BytesToString (byte[]? buffer, int offset, int len, string? charset)
		{
			const string __id = "bytesToString.([BIILjava/lang/String;)Ljava/lang/String;";
			IntPtr native_buffer = JNIEnv.NewArray (buffer);
			IntPtr native_charset = JNIEnv.NewString ((string?)charset);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [4];
				__args [0] = new JniArgumentValue (native_buffer);
				__args [1] = new JniArgumentValue (offset);
				__args [2] = new JniArgumentValue (len);
				__args [3] = new JniArgumentValue (native_charset);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				if (buffer != null) {
					JNIEnv.CopyArray (native_buffer, buffer);
					JNIEnv.DeleteLocalRef (native_buffer);
				}
				JNIEnv.DeleteLocalRef (native_charset);
				global::System.GC.KeepAlive (buffer);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='CommonConvert']/method[@name='bytesToString' and count(parameter)=5 and parameter[1][@type='byte[]'] and parameter[2][@type='int'] and parameter[3][@type='int'] and parameter[4][@type='java.lang.String'] and parameter[5][@type='java.lang.String']]"
		[Register ("bytesToString", "([BIILjava/lang/String;Ljava/lang/String;)Ljava/lang/String;", "")]
		public static unsafe string? BytesToString (byte[]? buffer, int offset, int len, string? charset, string? defaultValue)
		{
			const string __id = "bytesToString.([BIILjava/lang/String;Ljava/lang/String;)Ljava/lang/String;";
			IntPtr native_buffer = JNIEnv.NewArray (buffer);
			IntPtr native_charset = JNIEnv.NewString ((string?)charset);
			IntPtr native_defaultValue = JNIEnv.NewString ((string?)defaultValue);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [5];
				__args [0] = new JniArgumentValue (native_buffer);
				__args [1] = new JniArgumentValue (offset);
				__args [2] = new JniArgumentValue (len);
				__args [3] = new JniArgumentValue (native_charset);
				__args [4] = new JniArgumentValue (native_defaultValue);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				if (buffer != null) {
					JNIEnv.CopyArray (native_buffer, buffer);
					JNIEnv.DeleteLocalRef (native_buffer);
				}
				JNIEnv.DeleteLocalRef (native_charset);
				JNIEnv.DeleteLocalRef (native_defaultValue);
				global::System.GC.KeepAlive (buffer);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='CommonConvert']/method[@name='bytesToString' and count(parameter)=2 and parameter[1][@type='byte[]'] and parameter[2][@type='java.lang.String']]"
		[Register ("bytesToString", "([BLjava/lang/String;)Ljava/lang/String;", "")]
		public static unsafe string? BytesToString (byte[]? buffer, string? charset)
		{
			const string __id = "bytesToString.([BLjava/lang/String;)Ljava/lang/String;";
			IntPtr native_buffer = JNIEnv.NewArray (buffer);
			IntPtr native_charset = JNIEnv.NewString ((string?)charset);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_buffer);
				__args [1] = new JniArgumentValue (native_charset);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				if (buffer != null) {
					JNIEnv.CopyArray (native_buffer, buffer);
					JNIEnv.DeleteLocalRef (native_buffer);
				}
				JNIEnv.DeleteLocalRef (native_charset);
				global::System.GC.KeepAlive (buffer);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='CommonConvert']/method[@name='bytesToStringTerminalByZero' and count(parameter)=3 and parameter[1][@type='byte[]'] and parameter[2][@type='int'] and parameter[3][@type='int']]"
		[Register ("bytesToStringTerminalByZero", "([BII)Ljava/lang/String;", "")]
		public static unsafe string? BytesToStringTerminalByZero (byte[]? buffer, int offset, int len)
		{
			const string __id = "bytesToStringTerminalByZero.([BII)Ljava/lang/String;";
			IntPtr native_buffer = JNIEnv.NewArray (buffer);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (native_buffer);
				__args [1] = new JniArgumentValue (offset);
				__args [2] = new JniArgumentValue (len);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				if (buffer != null) {
					JNIEnv.CopyArray (native_buffer, buffer);
					JNIEnv.DeleteLocalRef (native_buffer);
				}
				global::System.GC.KeepAlive (buffer);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='CommonConvert']/method[@name='containsSeparator' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
		[Register ("containsSeparator", "(Ljava/lang/String;)Z", "")]
		public static unsafe bool ContainsSeparator (string? path)
		{
			const string __id = "containsSeparator.(Ljava/lang/String;)Z";
			IntPtr native_path = JNIEnv.NewString ((string?)path);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_path);
				var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, __args);
				return __rm;
			} finally {
				JNIEnv.DeleteLocalRef (native_path);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='CommonConvert']/method[@name='getCanonicalPath' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
		[Register ("getCanonicalPath", "(Ljava/lang/String;)Ljava/lang/String;", "")]
		public static unsafe string? GetCanonicalPath (string? folderPath)
		{
			const string __id = "getCanonicalPath.(Ljava/lang/String;)Ljava/lang/String;";
			IntPtr native_folderPath = JNIEnv.NewString ((string?)folderPath);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_folderPath);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				JNIEnv.DeleteLocalRef (native_folderPath);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='CommonConvert']/method[@name='getFirstLine' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
		[Register ("getFirstLine", "(Ljava/lang/String;)Ljava/lang/String;", "")]
		public static unsafe string? GetFirstLine (string? @string)
		{
			const string __id = "getFirstLine.(Ljava/lang/String;)Ljava/lang/String;";
			IntPtr native__string = JNIEnv.NewString ((string?)@string);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native__string);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				JNIEnv.DeleteLocalRef (native__string);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='CommonConvert']/method[@name='getFirstLine' and count(parameter)=2 and parameter[1][@type='java.lang.String'] and parameter[2][@type='int']]"
		[Register ("getFirstLine", "(Ljava/lang/String;I)Ljava/lang/String;", "")]
		public static unsafe string? GetFirstLine (string? @string, int maxlength)
		{
			const string __id = "getFirstLine.(Ljava/lang/String;I)Ljava/lang/String;";
			IntPtr native__string = JNIEnv.NewString ((string?)@string);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native__string);
				__args [1] = new JniArgumentValue (maxlength);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				JNIEnv.DeleteLocalRef (native__string);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='CommonConvert']/method[@name='hexDump' and count(parameter)=1 and parameter[1][@type='byte']]"
		[Register ("hexDump", "(B)Ljava/lang/String;", "")]
		public static unsafe string? HexDump (sbyte b)
		{
			const string __id = "hexDump.(B)Ljava/lang/String;";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (b);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='CommonConvert']/method[@name='hexDump' and count(parameter)=1 and parameter[1][@type='byte[]']]"
		[Register ("hexDump", "([B)Ljava/lang/String;", "")]
		public static unsafe string? HexDump (byte[]? bytes)
		{
			const string __id = "hexDump.([B)Ljava/lang/String;";
			IntPtr native_bytes = JNIEnv.NewArray (bytes);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_bytes);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				if (bytes != null) {
					JNIEnv.CopyArray (native_bytes, bytes);
					JNIEnv.DeleteLocalRef (native_bytes);
				}
				global::System.GC.KeepAlive (bytes);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='CommonConvert']/method[@name='hexDump' and count(parameter)=3 and parameter[1][@type='byte[]'] and parameter[2][@type='int'] and parameter[3][@type='int']]"
		[Register ("hexDump", "([BII)Ljava/lang/String;", "")]
		public static unsafe string? HexDump (byte[]? bytes, int offset, int len)
		{
			const string __id = "hexDump.([BII)Ljava/lang/String;";
			IntPtr native_bytes = JNIEnv.NewArray (bytes);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (native_bytes);
				__args [1] = new JniArgumentValue (offset);
				__args [2] = new JniArgumentValue (len);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				if (bytes != null) {
					JNIEnv.CopyArray (native_bytes, bytes);
					JNIEnv.DeleteLocalRef (native_bytes);
				}
				global::System.GC.KeepAlive (bytes);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='CommonConvert']/method[@name='hexStringToByte' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
		[Register ("hexStringToByte", "(Ljava/lang/String;)[B", "")]
		public static unsafe byte[]? HexStringToByte (string? src)
		{
			const string __id = "hexStringToByte.(Ljava/lang/String;)[B";
			IntPtr native_src = JNIEnv.NewString ((string?)src);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_src);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return (byte[]?) JNIEnv.GetArray (__rm.Handle, JniHandleOwnership.TransferLocalRef, typeof (byte));
			} finally {
				JNIEnv.DeleteLocalRef (native_src);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='CommonConvert']/method[@name='intToBCD' and count(parameter)=1 and parameter[1][@type='int']]"
		[Register ("intToBCD", "(I)[B", "")]
		public static unsafe byte[]? IntToBCD (int iVal)
		{
			const string __id = "intToBCD.(I)[B";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (iVal);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return (byte[]?) JNIEnv.GetArray (__rm.Handle, JniHandleOwnership.TransferLocalRef, typeof (byte));
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='CommonConvert']/method[@name='intToBCD' and count(parameter)=2 and parameter[1][@type='int'] and parameter[2][@type='int']]"
		[Register ("intToBCD", "(II)[B", "")]
		public static unsafe byte[]? IntToBCD (int iVal, int len)
		{
			const string __id = "intToBCD.(II)[B";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (iVal);
				__args [1] = new JniArgumentValue (len);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return (byte[]?) JNIEnv.GetArray (__rm.Handle, JniHandleOwnership.TransferLocalRef, typeof (byte));
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='CommonConvert']/method[@name='intToBytes' and count(parameter)=1 and parameter[1][@type='int']]"
		[Register ("intToBytes", "(I)[B", "")]
		public static unsafe byte[]? IntToBytes (int n)
		{
			const string __id = "intToBytes.(I)[B";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (n);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return (byte[]?) JNIEnv.GetArray (__rm.Handle, JniHandleOwnership.TransferLocalRef, typeof (byte));
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='CommonConvert']/method[@name='longToBytes' and count(parameter)=1 and parameter[1][@type='long']]"
		[Register ("longToBytes", "(J)[B", "")]
		public static unsafe byte[]? LongToBytes (long n)
		{
			const string __id = "longToBytes.(J)[B";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (n);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return (byte[]?) JNIEnv.GetArray (__rm.Handle, JniHandleOwnership.TransferLocalRef, typeof (byte));
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='CommonConvert']/method[@name='mac' and count(parameter)=3 and parameter[1][@type='byte[]'] and parameter[2][@type='int'] and parameter[3][@type='int']]"
		[Register ("mac", "([BII)Ljava/lang/String;", "")]
		public static unsafe string? Mac (byte[]? buffer, int offset, int length)
		{
			const string __id = "mac.([BII)Ljava/lang/String;";
			IntPtr native_buffer = JNIEnv.NewArray (buffer);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (native_buffer);
				__args [1] = new JniArgumentValue (offset);
				__args [2] = new JniArgumentValue (length);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				if (buffer != null) {
					JNIEnv.CopyArray (native_buffer, buffer);
					JNIEnv.DeleteLocalRef (native_buffer);
				}
				global::System.GC.KeepAlive (buffer);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='CommonConvert']/method[@name='shortToBytes' and count(parameter)=1 and parameter[1][@type='short']]"
		[Register ("shortToBytes", "(S)[B", "")]
		public static unsafe byte[]? ShortToBytes (short data)
		{
			const string __id = "shortToBytes.(S)[B";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (data);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return (byte[]?) JNIEnv.GetArray (__rm.Handle, JniHandleOwnership.TransferLocalRef, typeof (byte));
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='CommonConvert']/method[@name='trim' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
		[Register ("trim", "(Ljava/lang/String;)Ljava/lang/String;", "")]
		public static unsafe string? Trim (string? str)
		{
			const string __id = "trim.(Ljava/lang/String;)Ljava/lang/String;";
			IntPtr native_str = JNIEnv.NewString ((string?)str);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_str);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				JNIEnv.DeleteLocalRef (native_str);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='CommonConvert']/method[@name='trim' and count(parameter)=2 and parameter[1][@type='java.lang.String'] and parameter[2][@type='char']]"
		[Register ("trim", "(Ljava/lang/String;C)Ljava/lang/String;", "")]
		public static unsafe string? Trim (string? str, char ch)
		{
			const string __id = "trim.(Ljava/lang/String;C)Ljava/lang/String;";
			IntPtr native_str = JNIEnv.NewString ((string?)str);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_str);
				__args [1] = new JniArgumentValue (ch);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				JNIEnv.DeleteLocalRef (native_str);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='CommonConvert']/method[@name='trimLeft' and count(parameter)=2 and parameter[1][@type='java.lang.String'] and parameter[2][@type='char']]"
		[Register ("trimLeft", "(Ljava/lang/String;C)Ljava/lang/String;", "")]
		public static unsafe string? TrimLeft (string? str, char ch)
		{
			const string __id = "trimLeft.(Ljava/lang/String;C)Ljava/lang/String;";
			IntPtr native_str = JNIEnv.NewString ((string?)str);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_str);
				__args [1] = new JniArgumentValue (ch);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				JNIEnv.DeleteLocalRef (native_str);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='CommonConvert']/method[@name='trimRight' and count(parameter)=2 and parameter[1][@type='java.lang.String'] and parameter[2][@type='char']]"
		[Register ("trimRight", "(Ljava/lang/String;C)Ljava/lang/String;", "")]
		public static unsafe string? TrimRight (string? str, char ch)
		{
			const string __id = "trimRight.(Ljava/lang/String;C)Ljava/lang/String;";
			IntPtr native_str = JNIEnv.NewString ((string?)str);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_str);
				__args [1] = new JniArgumentValue (ch);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				JNIEnv.DeleteLocalRef (native_str);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='CommonConvert']/method[@name='trimToEmpty' and count(parameter)=1 and parameter[1][@type='java.lang.String']]"
		[Register ("trimToEmpty", "(Ljava/lang/String;)Ljava/lang/String;", "")]
		public static unsafe string? TrimToEmpty (string? @string)
		{
			const string __id = "trimToEmpty.(Ljava/lang/String;)Ljava/lang/String;";
			IntPtr native__string = JNIEnv.NewString ((string?)@string);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native__string);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				JNIEnv.DeleteLocalRef (native__string);
			}
		}

	}
}
