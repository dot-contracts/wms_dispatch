//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable restore
using System;
using System.Collections.Generic;
using Android.Runtime;
using Java.Interop;

namespace Com.Vanstone.Trans.Api {

	// Metadata.xml XPath class reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='MemCardApi']"
	[global::Android.Runtime.Register ("com/vanstone/trans/api/MemCardApi", DoNotGenerateAcw=true)]
	public partial class MemCardApi : global::Java.Lang.Object {
		static readonly JniPeerMembers _members = new XAPeerMembers ("com/vanstone/trans/api/MemCardApi", typeof (MemCardApi));

		internal static IntPtr class_ref {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		public override global::Java.Interop.JniPeerMembers JniPeerMembers {
			get { return _members; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override IntPtr ThresholdClass {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override global::System.Type ThresholdType {
			get { return _members.ManagedPeerType; }
		}

		protected MemCardApi (IntPtr javaReference, JniHandleOwnership transfer) : base (javaReference, transfer)
		{
		}

		// Metadata.xml XPath constructor reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='MemCardApi']/constructor[@name='MemCardApi' and count(parameter)=0]"
		[Register (".ctor", "()V", "")]
		public unsafe MemCardApi () : base (IntPtr.Zero, JniHandleOwnership.DoNotTransfer)
		{
			const string __id = "()V";

			if (((global::Java.Lang.Object) this).Handle != IntPtr.Zero)
				return;

			try {
				var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), null);
				SetHandle (__r.Handle, JniHandleOwnership.TransferLocalRef);
				_members.InstanceMethods.FinishCreateInstance (__id, this, null);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='MemCardApi']/method[@name='sle4428Close_Api' and count(parameter)=0]"
		[Register ("sle4428Close_Api", "()I", "")]
		public static unsafe int Sle4428Close_Api ()
		{
			const string __id = "sle4428Close_Api.()I";
			try {
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, null);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='MemCardApi']/method[@name='sle4428Open_Api' and count(parameter)=2 and parameter[1][@type='int'] and parameter[2][@type='byte[]']]"
		[Register ("sle4428Open_Api", "(I[B)I", "")]
		public static unsafe int Sle4428Open_Api (int vol, byte[]? atr)
		{
			const string __id = "sle4428Open_Api.(I[B)I";
			IntPtr native_atr = JNIEnv.NewArray (atr);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (vol);
				__args [1] = new JniArgumentValue (native_atr);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (atr != null) {
					JNIEnv.CopyArray (native_atr, atr);
					JNIEnv.DeleteLocalRef (native_atr);
				}
				global::System.GC.KeepAlive (atr);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='MemCardApi']/method[@name='sle4428ReadNoProtect_Api' and count(parameter)=3 and parameter[1][@type='int'] and parameter[2][@type='byte[]'] and parameter[3][@type='int']]"
		[Register ("sle4428ReadNoProtect_Api", "(I[BI)I", "")]
		public static unsafe int Sle4428ReadNoProtect_Api (int addr, byte[]? buf, int len)
		{
			const string __id = "sle4428ReadNoProtect_Api.(I[BI)I";
			IntPtr native_buf = JNIEnv.NewArray (buf);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (addr);
				__args [1] = new JniArgumentValue (native_buf);
				__args [2] = new JniArgumentValue (len);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (buf != null) {
					JNIEnv.CopyArray (native_buf, buf);
					JNIEnv.DeleteLocalRef (native_buf);
				}
				global::System.GC.KeepAlive (buf);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='MemCardApi']/method[@name='sle4428VerifyKey_Api' and count(parameter)=2 and parameter[1][@type='byte'] and parameter[2][@type='byte']]"
		[Register ("sle4428VerifyKey_Api", "(BB)I", "")]
		public static unsafe int Sle4428VerifyKey_Api (sbyte keyF, sbyte keyS)
		{
			const string __id = "sle4428VerifyKey_Api.(BB)I";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (keyF);
				__args [1] = new JniArgumentValue (keyS);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='MemCardApi']/method[@name='sle4428WriteAndCompareProtect_Api' and count(parameter)=4 and parameter[1][@type='int'] and parameter[2][@type='byte[]'] and parameter[3][@type='int'] and parameter[4][@type='byte']]"
		[Register ("sle4428WriteAndCompareProtect_Api", "(I[BIB)I", "")]
		public static unsafe int Sle4428WriteAndCompareProtect_Api (int addr, byte[]? data, int len, sbyte mode)
		{
			const string __id = "sle4428WriteAndCompareProtect_Api.(I[BIB)I";
			IntPtr native_data = JNIEnv.NewArray (data);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [4];
				__args [0] = new JniArgumentValue (addr);
				__args [1] = new JniArgumentValue (native_data);
				__args [2] = new JniArgumentValue (len);
				__args [3] = new JniArgumentValue (mode);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (data != null) {
					JNIEnv.CopyArray (native_data, data);
					JNIEnv.DeleteLocalRef (native_data);
				}
				global::System.GC.KeepAlive (data);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='MemCardApi']/method[@name='sle4428WriteNoProtect_Api' and count(parameter)=3 and parameter[1][@type='int'] and parameter[2][@type='byte[]'] and parameter[3][@type='int']]"
		[Register ("sle4428WriteNoProtect_Api", "(I[BI)I", "")]
		public static unsafe int Sle4428WriteNoProtect_Api (int addr, byte[]? data, int len)
		{
			const string __id = "sle4428WriteNoProtect_Api.(I[BI)I";
			IntPtr native_data = JNIEnv.NewArray (data);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (addr);
				__args [1] = new JniArgumentValue (native_data);
				__args [2] = new JniArgumentValue (len);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (data != null) {
					JNIEnv.CopyArray (native_data, data);
					JNIEnv.DeleteLocalRef (native_data);
				}
				global::System.GC.KeepAlive (data);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='MemCardApi']/method[@name='sle4442Close_Api' and count(parameter)=0]"
		[Register ("sle4442Close_Api", "()I", "")]
		public static unsafe int Sle4442Close_Api ()
		{
			const string __id = "sle4442Close_Api.()I";
			try {
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, null);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='MemCardApi']/method[@name='sle4442ModifyKey_Api' and count(parameter)=2 and parameter[1][@type='byte[]'] and parameter[2][@type='byte[]']]"
		[Register ("sle4442ModifyKey_Api", "([B[B)I", "")]
		public static unsafe int Sle4442ModifyKey_Api (byte[]? oldKey, byte[]? newKey)
		{
			const string __id = "sle4442ModifyKey_Api.([B[B)I";
			IntPtr native_oldKey = JNIEnv.NewArray (oldKey);
			IntPtr native_newKey = JNIEnv.NewArray (newKey);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_oldKey);
				__args [1] = new JniArgumentValue (native_newKey);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (oldKey != null) {
					JNIEnv.CopyArray (native_oldKey, oldKey);
					JNIEnv.DeleteLocalRef (native_oldKey);
				}
				if (newKey != null) {
					JNIEnv.CopyArray (native_newKey, newKey);
					JNIEnv.DeleteLocalRef (native_newKey);
				}
				global::System.GC.KeepAlive (oldKey);
				global::System.GC.KeepAlive (newKey);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='MemCardApi']/method[@name='sle4442Open_Api' and count(parameter)=2 and parameter[1][@type='int'] and parameter[2][@type='byte[]']]"
		[Register ("sle4442Open_Api", "(I[B)I", "")]
		public static unsafe int Sle4442Open_Api (int vol, byte[]? atr)
		{
			const string __id = "sle4442Open_Api.(I[B)I";
			IntPtr native_atr = JNIEnv.NewArray (atr);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (vol);
				__args [1] = new JniArgumentValue (native_atr);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (atr != null) {
					JNIEnv.CopyArray (native_atr, atr);
					JNIEnv.DeleteLocalRef (native_atr);
				}
				global::System.GC.KeepAlive (atr);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='MemCardApi']/method[@name='sle4442Read_Api' and count(parameter)=4 and parameter[1][@type='byte'] and parameter[2][@type='byte'] and parameter[3][@type='byte[]'] and parameter[4][@type='int']]"
		[Register ("sle4442Read_Api", "(BB[BI)I", "")]
		public static unsafe int Sle4442Read_Api (sbyte ctrl, sbyte addr, byte[]? readData, int readLen)
		{
			const string __id = "sle4442Read_Api.(BB[BI)I";
			IntPtr native_readData = JNIEnv.NewArray (readData);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [4];
				__args [0] = new JniArgumentValue (ctrl);
				__args [1] = new JniArgumentValue (addr);
				__args [2] = new JniArgumentValue (native_readData);
				__args [3] = new JniArgumentValue (readLen);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (readData != null) {
					JNIEnv.CopyArray (native_readData, readData);
					JNIEnv.DeleteLocalRef (native_readData);
				}
				global::System.GC.KeepAlive (readData);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='MemCardApi']/method[@name='sle4442RemainCheckTime_Api' and count(parameter)=0]"
		[Register ("sle4442RemainCheckTime_Api", "()I", "")]
		public static unsafe int Sle4442RemainCheckTime_Api ()
		{
			const string __id = "sle4442RemainCheckTime_Api.()I";
			try {
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, null);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='MemCardApi']/method[@name='sle4442Verify_Api' and count(parameter)=1 and parameter[1][@type='byte[]']]"
		[Register ("sle4442Verify_Api", "([B)I", "")]
		public static unsafe int Sle4442Verify_Api (byte[]? password)
		{
			const string __id = "sle4442Verify_Api.([B)I";
			IntPtr native_password = JNIEnv.NewArray (password);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_password);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (password != null) {
					JNIEnv.CopyArray (native_password, password);
					JNIEnv.DeleteLocalRef (native_password);
				}
				global::System.GC.KeepAlive (password);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='MemCardApi']/method[@name='sle4442Write_Api' and count(parameter)=4 and parameter[1][@type='byte'] and parameter[2][@type='byte'] and parameter[3][@type='byte[]'] and parameter[4][@type='int']]"
		[Register ("sle4442Write_Api", "(BB[BI)I", "")]
		public static unsafe int Sle4442Write_Api (sbyte ctrl, sbyte addr, byte[]? writeData, int writeLen)
		{
			const string __id = "sle4442Write_Api.(BB[BI)I";
			IntPtr native_writeData = JNIEnv.NewArray (writeData);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [4];
				__args [0] = new JniArgumentValue (ctrl);
				__args [1] = new JniArgumentValue (addr);
				__args [2] = new JniArgumentValue (native_writeData);
				__args [3] = new JniArgumentValue (writeLen);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (writeData != null) {
					JNIEnv.CopyArray (native_writeData, writeData);
					JNIEnv.DeleteLocalRef (native_writeData);
				}
				global::System.GC.KeepAlive (writeData);
			}
		}

	}
}
