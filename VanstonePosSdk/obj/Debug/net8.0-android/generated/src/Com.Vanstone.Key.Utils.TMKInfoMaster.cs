//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable restore
using System;
using System.Collections.Generic;
using Android.Runtime;
using Java.Interop;

namespace Com.Vanstone.Key.Utils {

	// Metadata.xml XPath class reference: path="/api/package[@name='com.vanstone.key.utils']/class[@name='TMKInfoMaster']"
	[global::Android.Runtime.Register ("com/vanstone/key/utils/TMKInfoMaster", DoNotGenerateAcw=true)]
	public partial class TMKInfoMaster : global::Com.Vanstone.Key.Utils.TMKInfo {
		// Metadata.xml XPath field reference: path="/api/package[@name='com.vanstone.key.utils']/class[@name='TMKInfoMaster']/field[@name='DATA_LEN']"
		[Register ("DATA_LEN")]
		public const int DataLen = (int) 28;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.vanstone.key.utils']/class[@name='TMKInfoMaster']/field[@name='MAX_KEY_LEN']"
		[Register ("MAX_KEY_LEN")]
		public const int MaxKeyLen = (int) 24;

		// Metadata.xml XPath field reference: path="/api/package[@name='com.vanstone.key.utils']/class[@name='TMKInfoMaster']/field[@name='MAX_RESERVED_LEN']"
		[Register ("MAX_RESERVED_LEN")]
		public const int MaxReservedLen = (int) 1;

		static readonly JniPeerMembers _members = new XAPeerMembers ("com/vanstone/key/utils/TMKInfoMaster", typeof (TMKInfoMaster));

		internal static new IntPtr class_ref {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		public override global::Java.Interop.JniPeerMembers JniPeerMembers {
			get { return _members; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override IntPtr ThresholdClass {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override global::System.Type ThresholdType {
			get { return _members.ManagedPeerType; }
		}

		protected TMKInfoMaster (IntPtr javaReference, JniHandleOwnership transfer) : base (javaReference, transfer)
		{
		}

		// Metadata.xml XPath constructor reference: path="/api/package[@name='com.vanstone.key.utils']/class[@name='TMKInfoMaster']/constructor[@name='TMKInfoMaster' and count(parameter)=0]"
		[Register (".ctor", "()V", "")]
		public unsafe TMKInfoMaster () : base (IntPtr.Zero, JniHandleOwnership.DoNotTransfer)
		{
			const string __id = "()V";

			if (((global::Java.Lang.Object) this).Handle != IntPtr.Zero)
				return;

			try {
				var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), null);
				SetHandle (__r.Handle, JniHandleOwnership.TransferLocalRef);
				_members.InstanceMethods.FinishCreateInstance (__id, this, null);
			} finally {
			}
		}

		static Delegate? cb_getKeyIndex;
#pragma warning disable 0169
		static Delegate GetGetKeyIndexHandler ()
		{
			if (cb_getKeyIndex == null)
				cb_getKeyIndex = JNINativeWrapper.CreateDelegate (new _JniMarshal_PP_B (n_GetKeyIndex));
			return cb_getKeyIndex;
		}

		static sbyte n_GetKeyIndex (IntPtr jnienv, IntPtr native__this)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Vanstone.Key.Utils.TMKInfoMaster> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			return __this.KeyIndex;
		}
#pragma warning restore 0169

		static Delegate? cb_setKeyIndex_B;
#pragma warning disable 0169
		static Delegate GetSetKeyIndex_BHandler ()
		{
			if (cb_setKeyIndex_B == null)
				cb_setKeyIndex_B = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPB_V (n_SetKeyIndex_B));
			return cb_setKeyIndex_B;
		}

		static void n_SetKeyIndex_B (IntPtr jnienv, IntPtr native__this, sbyte keyIndex)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Vanstone.Key.Utils.TMKInfoMaster> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			__this.KeyIndex = keyIndex;
		}
#pragma warning restore 0169

		public virtual unsafe sbyte KeyIndex {
			// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.key.utils']/class[@name='TMKInfoMaster']/method[@name='getKeyIndex' and count(parameter)=0]"
			[Register ("getKeyIndex", "()B", "GetGetKeyIndexHandler")]
			get {
				const string __id = "getKeyIndex.()B";
				try {
					var __rm = _members.InstanceMethods.InvokeVirtualSByteMethod (__id, this, null);
					return __rm;
				} finally {
				}
			}
			// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.key.utils']/class[@name='TMKInfoMaster']/method[@name='setKeyIndex' and count(parameter)=1 and parameter[1][@type='byte']]"
			[Register ("setKeyIndex", "(B)V", "GetSetKeyIndex_BHandler")]
			set {
				const string __id = "setKeyIndex.(B)V";
				try {
					JniArgumentValue* __args = stackalloc JniArgumentValue [1];
					__args [0] = new JniArgumentValue (value);
					_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, __args);
				} finally {
				}
			}
		}

		static Delegate? cb_getKeyLen;
#pragma warning disable 0169
		static Delegate GetGetKeyLenHandler ()
		{
			if (cb_getKeyLen == null)
				cb_getKeyLen = JNINativeWrapper.CreateDelegate (new _JniMarshal_PP_B (n_GetKeyLen));
			return cb_getKeyLen;
		}

		static sbyte n_GetKeyLen (IntPtr jnienv, IntPtr native__this)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Vanstone.Key.Utils.TMKInfoMaster> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			return __this.KeyLen;
		}
#pragma warning restore 0169

		static Delegate? cb_setKeyLen_B;
#pragma warning disable 0169
		static Delegate GetSetKeyLen_BHandler ()
		{
			if (cb_setKeyLen_B == null)
				cb_setKeyLen_B = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPB_V (n_SetKeyLen_B));
			return cb_setKeyLen_B;
		}

		static void n_SetKeyLen_B (IntPtr jnienv, IntPtr native__this, sbyte keyLen)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Vanstone.Key.Utils.TMKInfoMaster> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			__this.KeyLen = keyLen;
		}
#pragma warning restore 0169

		public virtual unsafe sbyte KeyLen {
			// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.key.utils']/class[@name='TMKInfoMaster']/method[@name='getKeyLen' and count(parameter)=0]"
			[Register ("getKeyLen", "()B", "GetGetKeyLenHandler")]
			get {
				const string __id = "getKeyLen.()B";
				try {
					var __rm = _members.InstanceMethods.InvokeVirtualSByteMethod (__id, this, null);
					return __rm;
				} finally {
				}
			}
			// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.key.utils']/class[@name='TMKInfoMaster']/method[@name='setKeyLen' and count(parameter)=1 and parameter[1][@type='byte']]"
			[Register ("setKeyLen", "(B)V", "GetSetKeyLen_BHandler")]
			set {
				const string __id = "setKeyLen.(B)V";
				try {
					JniArgumentValue* __args = stackalloc JniArgumentValue [1];
					__args [0] = new JniArgumentValue (value);
					_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, __args);
				} finally {
				}
			}
		}

		static Delegate? cb_getKeyType;
#pragma warning disable 0169
		static Delegate GetGetKeyTypeHandler ()
		{
			if (cb_getKeyType == null)
				cb_getKeyType = JNINativeWrapper.CreateDelegate (new _JniMarshal_PP_B (n_GetKeyType));
			return cb_getKeyType;
		}

		static sbyte n_GetKeyType (IntPtr jnienv, IntPtr native__this)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Vanstone.Key.Utils.TMKInfoMaster> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			return __this.KeyType;
		}
#pragma warning restore 0169

		static Delegate? cb_setKeyType_B;
#pragma warning disable 0169
		static Delegate GetSetKeyType_BHandler ()
		{
			if (cb_setKeyType_B == null)
				cb_setKeyType_B = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPB_V (n_SetKeyType_B));
			return cb_setKeyType_B;
		}

		static void n_SetKeyType_B (IntPtr jnienv, IntPtr native__this, sbyte keyType)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Vanstone.Key.Utils.TMKInfoMaster> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			__this.KeyType = keyType;
		}
#pragma warning restore 0169

		public virtual unsafe sbyte KeyType {
			// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.key.utils']/class[@name='TMKInfoMaster']/method[@name='getKeyType' and count(parameter)=0]"
			[Register ("getKeyType", "()B", "GetGetKeyTypeHandler")]
			get {
				const string __id = "getKeyType.()B";
				try {
					var __rm = _members.InstanceMethods.InvokeVirtualSByteMethod (__id, this, null);
					return __rm;
				} finally {
				}
			}
			// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.key.utils']/class[@name='TMKInfoMaster']/method[@name='setKeyType' and count(parameter)=1 and parameter[1][@type='byte']]"
			[Register ("setKeyType", "(B)V", "GetSetKeyType_BHandler")]
			set {
				const string __id = "setKeyType.(B)V";
				try {
					JniArgumentValue* __args = stackalloc JniArgumentValue [1];
					__args [0] = new JniArgumentValue (value);
					_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, __args);
				} finally {
				}
			}
		}

		static Delegate? cb_getByteArray;
#pragma warning disable 0169
		static Delegate GetGetByteArrayHandler ()
		{
			if (cb_getByteArray == null)
				cb_getByteArray = JNINativeWrapper.CreateDelegate (new _JniMarshal_PP_L (n_GetByteArray));
			return cb_getByteArray;
		}

		static IntPtr n_GetByteArray (IntPtr jnienv, IntPtr native__this)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Vanstone.Key.Utils.TMKInfoMaster> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			return JNIEnv.NewArray (__this.GetByteArray ());
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.key.utils']/class[@name='TMKInfoMaster']/method[@name='getByteArray' and count(parameter)=0]"
		[Register ("getByteArray", "()[B", "GetGetByteArrayHandler")]
		public override unsafe byte[]? GetByteArray ()
		{
			const string __id = "getByteArray.()[B";
			try {
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, null);
				return (byte[]?) JNIEnv.GetArray (__rm.Handle, JniHandleOwnership.TransferLocalRef, typeof (byte));
			} finally {
			}
		}

		static Delegate? cb_getKey;
#pragma warning disable 0169
		static Delegate GetGetKeyHandler ()
		{
			if (cb_getKey == null)
				cb_getKey = JNINativeWrapper.CreateDelegate (new _JniMarshal_PP_L (n_GetKey));
			return cb_getKey;
		}

		static IntPtr n_GetKey (IntPtr jnienv, IntPtr native__this)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Vanstone.Key.Utils.TMKInfoMaster> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			return JNIEnv.NewArray (__this.GetKey ());
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.key.utils']/class[@name='TMKInfoMaster']/method[@name='getKey' and count(parameter)=0]"
		[Register ("getKey", "()[B", "GetGetKeyHandler")]
		public virtual unsafe byte[]? GetKey ()
		{
			const string __id = "getKey.()[B";
			try {
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, null);
				return (byte[]?) JNIEnv.GetArray (__rm.Handle, JniHandleOwnership.TransferLocalRef, typeof (byte));
			} finally {
			}
		}

		static Delegate? cb_getReserved;
#pragma warning disable 0169
		static Delegate GetGetReservedHandler ()
		{
			if (cb_getReserved == null)
				cb_getReserved = JNINativeWrapper.CreateDelegate (new _JniMarshal_PP_L (n_GetReserved));
			return cb_getReserved;
		}

		static IntPtr n_GetReserved (IntPtr jnienv, IntPtr native__this)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Vanstone.Key.Utils.TMKInfoMaster> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			return JNIEnv.NewArray (__this.GetReserved ());
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.key.utils']/class[@name='TMKInfoMaster']/method[@name='getReserved' and count(parameter)=0]"
		[Register ("getReserved", "()[B", "GetGetReservedHandler")]
		public virtual unsafe byte[]? GetReserved ()
		{
			const string __id = "getReserved.()[B";
			try {
				var __rm = _members.InstanceMethods.InvokeVirtualObjectMethod (__id, this, null);
				return (byte[]?) JNIEnv.GetArray (__rm.Handle, JniHandleOwnership.TransferLocalRef, typeof (byte));
			} finally {
			}
		}

		static Delegate? cb_setByteArray_arrayB;
#pragma warning disable 0169
		static Delegate GetSetByteArray_arrayBHandler ()
		{
			if (cb_setByteArray_arrayB == null)
				cb_setByteArray_arrayB = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPL_Z (n_SetByteArray_arrayB));
			return cb_setByteArray_arrayB;
		}

		static bool n_SetByteArray_arrayB (IntPtr jnienv, IntPtr native__this, IntPtr native_data)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Vanstone.Key.Utils.TMKInfoMaster> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			var data = (byte[]?) JNIEnv.GetArray (native_data, JniHandleOwnership.DoNotTransfer, typeof (byte));
			bool __ret = __this.SetByteArray (data);
			if (data != null)
				JNIEnv.CopyArray (data, native_data);
			return __ret;
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.key.utils']/class[@name='TMKInfoMaster']/method[@name='setByteArray' and count(parameter)=1 and parameter[1][@type='byte[]']]"
		[Register ("setByteArray", "([B)Z", "GetSetByteArray_arrayBHandler")]
		public override unsafe bool SetByteArray (byte[]? data)
		{
			const string __id = "setByteArray.([B)Z";
			IntPtr native_data = JNIEnv.NewArray (data);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_data);
				var __rm = _members.InstanceMethods.InvokeVirtualBooleanMethod (__id, this, __args);
				return __rm;
			} finally {
				if (data != null) {
					JNIEnv.CopyArray (native_data, data);
					JNIEnv.DeleteLocalRef (native_data);
				}
				global::System.GC.KeepAlive (data);
			}
		}

		static Delegate? cb_setKey_arrayB;
#pragma warning disable 0169
		static Delegate GetSetKey_arrayBHandler ()
		{
			if (cb_setKey_arrayB == null)
				cb_setKey_arrayB = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPL_V (n_SetKey_arrayB));
			return cb_setKey_arrayB;
		}

		static void n_SetKey_arrayB (IntPtr jnienv, IntPtr native__this, IntPtr native_key)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Vanstone.Key.Utils.TMKInfoMaster> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			var key = (byte[]?) JNIEnv.GetArray (native_key, JniHandleOwnership.DoNotTransfer, typeof (byte));
			__this.SetKey (key);
			if (key != null)
				JNIEnv.CopyArray (key, native_key);
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.key.utils']/class[@name='TMKInfoMaster']/method[@name='setKey' and count(parameter)=1 and parameter[1][@type='byte[]']]"
		[Register ("setKey", "([B)V", "GetSetKey_arrayBHandler")]
		public virtual unsafe void SetKey (byte[]? key)
		{
			const string __id = "setKey.([B)V";
			IntPtr native_key = JNIEnv.NewArray (key);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_key);
				_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, __args);
			} finally {
				if (key != null) {
					JNIEnv.CopyArray (native_key, key);
					JNIEnv.DeleteLocalRef (native_key);
				}
				global::System.GC.KeepAlive (key);
			}
		}

		static Delegate? cb_setReserved_arrayB;
#pragma warning disable 0169
		static Delegate GetSetReserved_arrayBHandler ()
		{
			if (cb_setReserved_arrayB == null)
				cb_setReserved_arrayB = JNINativeWrapper.CreateDelegate (new _JniMarshal_PPL_V (n_SetReserved_arrayB));
			return cb_setReserved_arrayB;
		}

		static void n_SetReserved_arrayB (IntPtr jnienv, IntPtr native__this, IntPtr native_reserved)
		{
			var __this = global::Java.Lang.Object.GetObject<global::Com.Vanstone.Key.Utils.TMKInfoMaster> (jnienv, native__this, JniHandleOwnership.DoNotTransfer)!;
			var reserved = (byte[]?) JNIEnv.GetArray (native_reserved, JniHandleOwnership.DoNotTransfer, typeof (byte));
			__this.SetReserved (reserved);
			if (reserved != null)
				JNIEnv.CopyArray (reserved, native_reserved);
		}
#pragma warning restore 0169

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.key.utils']/class[@name='TMKInfoMaster']/method[@name='setReserved' and count(parameter)=1 and parameter[1][@type='byte[]']]"
		[Register ("setReserved", "([B)V", "GetSetReserved_arrayBHandler")]
		public virtual unsafe void SetReserved (byte[]? reserved)
		{
			const string __id = "setReserved.([B)V";
			IntPtr native_reserved = JNIEnv.NewArray (reserved);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_reserved);
				_members.InstanceMethods.InvokeVirtualVoidMethod (__id, this, __args);
			} finally {
				if (reserved != null) {
					JNIEnv.CopyArray (native_reserved, reserved);
					JNIEnv.DeleteLocalRef (native_reserved);
				}
				global::System.GC.KeepAlive (reserved);
			}
		}

	}
}
