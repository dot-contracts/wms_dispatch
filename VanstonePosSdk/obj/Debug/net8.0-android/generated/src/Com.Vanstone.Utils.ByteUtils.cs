//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable restore
using System;
using System.Collections.Generic;
using Android.Runtime;
using Java.Interop;

namespace Com.Vanstone.Utils {

	// Metadata.xml XPath class reference: path="/api/package[@name='com.vanstone.utils']/class[@name='ByteUtils']"
	[global::Android.Runtime.Register ("com/vanstone/utils/ByteUtils", DoNotGenerateAcw=true)]
	public partial class ByteUtils : global::Java.Lang.Object {

		// Metadata.xml XPath field reference: path="/api/package[@name='com.vanstone.utils']/class[@name='ByteUtils']/field[@name='HEXTAG']"
		[Register ("HEXTAG")]
		public static string? Hextag {
			get {
				const string __id = "HEXTAG.Ljava/lang/String;";

				var __v = _members.StaticFields.GetObjectValue (__id);
				return JNIEnv.GetString (__v.Handle, JniHandleOwnership.TransferLocalRef);
			}
			set {
				const string __id = "HEXTAG.Ljava/lang/String;";

				IntPtr native_value = JNIEnv.NewString ((string?)value);
				try {
					_members.StaticFields.SetValue (__id, new JniObjectReference (native_value));
				} finally {
					JNIEnv.DeleteLocalRef (native_value);
				}
			}
		}


		// Metadata.xml XPath field reference: path="/api/package[@name='com.vanstone.utils']/class[@name='ByteUtils']/field[@name='TOKBUF']"
		[Register ("TOKBUF")]
		public static IList<byte>? Tokbuf {
			get {
				const string __id = "TOKBUF.[B";

				var __v = _members.StaticFields.GetObjectValue (__id);
				return global::Android.Runtime.JavaArray<byte>.FromJniHandle (__v.Handle, JniHandleOwnership.TransferLocalRef);
			}
			set {
				const string __id = "TOKBUF.[B";

				IntPtr native_value = global::Android.Runtime.JavaArray<byte>.ToLocalJniHandle (value);
				try {
					_members.StaticFields.SetValue (__id, new JniObjectReference (native_value));
				} finally {
					global::Android.Runtime.JNIEnv.DeleteLocalRef (native_value);
				}
			}
		}

		static readonly JniPeerMembers _members = new XAPeerMembers ("com/vanstone/utils/ByteUtils", typeof (ByteUtils));

		internal static IntPtr class_ref {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		public override global::Java.Interop.JniPeerMembers JniPeerMembers {
			get { return _members; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override IntPtr ThresholdClass {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override global::System.Type ThresholdType {
			get { return _members.ManagedPeerType; }
		}

		protected ByteUtils (IntPtr javaReference, JniHandleOwnership transfer) : base (javaReference, transfer)
		{
		}

		// Metadata.xml XPath constructor reference: path="/api/package[@name='com.vanstone.utils']/class[@name='ByteUtils']/constructor[@name='ByteUtils' and count(parameter)=0]"
		[Register (".ctor", "()V", "")]
		public unsafe ByteUtils () : base (IntPtr.Zero, JniHandleOwnership.DoNotTransfer)
		{
			const string __id = "()V";

			if (((global::Java.Lang.Object) this).Handle != IntPtr.Zero)
				return;

			try {
				var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), null);
				SetHandle (__r.Handle, JniHandleOwnership.TransferLocalRef);
				_members.InstanceMethods.FinishCreateInstance (__id, this, null);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='ByteUtils']/method[@name='bytesToStructs' and count(parameter)=2 and parameter[1][@type='byte[]'] and parameter[2][@type='com.vanstone.base.interfaces.StructInterface[]']]"
		[Register ("bytesToStructs", "([B[Lcom/vanstone/base/interfaces/StructInterface;)I", "")]
		public static unsafe int BytesToStructs (byte[]? buff, global::Com.Vanstone.Base.Interfaces.IStructInterface[]? sts)
		{
			const string __id = "bytesToStructs.([B[Lcom/vanstone/base/interfaces/StructInterface;)I";
			IntPtr native_buff = JNIEnv.NewArray (buff);
			IntPtr native_sts = JNIEnv.NewArray (sts);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_buff);
				__args [1] = new JniArgumentValue (native_sts);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (buff != null) {
					JNIEnv.CopyArray (native_buff, buff);
					JNIEnv.DeleteLocalRef (native_buff);
				}
				if (sts != null) {
					JNIEnv.CopyArray (native_sts, sts);
					JNIEnv.DeleteLocalRef (native_sts);
				}
				global::System.GC.KeepAlive (buff);
				global::System.GC.KeepAlive (sts);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='ByteUtils']/method[@name='getMax' and count(parameter)=1 and parameter[1][@type='byte[]']]"
		[Register ("getMax", "([B)I", "")]
		public static unsafe int GetMax (byte[]? arr)
		{
			const string __id = "getMax.([B)I";
			IntPtr native_arr = JNIEnv.NewArray (arr);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_arr);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (arr != null) {
					JNIEnv.CopyArray (native_arr, arr);
					JNIEnv.DeleteLocalRef (native_arr);
				}
				global::System.GC.KeepAlive (arr);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='ByteUtils']/method[@name='initStructs' and count(parameter)=1 and parameter[1][@type='com.vanstone.base.interfaces.StructInterface[]']]"
		[Register ("initStructs", "([Lcom/vanstone/base/interfaces/StructInterface;)I", "")]
		public static unsafe int InitStructs (global::Com.Vanstone.Base.Interfaces.IStructInterface[]? sts)
		{
			const string __id = "initStructs.([Lcom/vanstone/base/interfaces/StructInterface;)I";
			IntPtr native_sts = JNIEnv.NewArray (sts);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_sts);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (sts != null) {
					JNIEnv.CopyArray (native_sts, sts);
					JNIEnv.DeleteLocalRef (native_sts);
				}
				global::System.GC.KeepAlive (sts);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='ByteUtils']/method[@name='isByteEmpty' and count(parameter)=1 and parameter[1][@type='byte[]']]"
		[Register ("isByteEmpty", "([B)Z", "")]
		public static unsafe bool IsByteEmpty (byte[]? data)
		{
			const string __id = "isByteEmpty.([B)Z";
			IntPtr native_data = JNIEnv.NewArray (data);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_data);
				var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, __args);
				return __rm;
			} finally {
				if (data != null) {
					JNIEnv.CopyArray (native_data, data);
					JNIEnv.DeleteLocalRef (native_data);
				}
				global::System.GC.KeepAlive (data);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='ByteUtils']/method[@name='isdigit' and count(parameter)=1 and parameter[1][@type='byte']]"
		[Register ("isdigit", "(B)Z", "")]
		public static unsafe bool Isdigit (sbyte data)
		{
			const string __id = "isdigit.(B)Z";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (data);
				var __rm = _members.StaticMethods.InvokeBooleanMethod (__id, __args);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='ByteUtils']/method[@name='memcmp' and count(parameter)=3 and parameter[1][@type='byte[]'] and parameter[2][@type='byte[]'] and parameter[3][@type='int']]"
		[Register ("memcmp", "([B[BI)I", "")]
		public static unsafe int Memcmp (byte[]? data1, byte[]? data2, int len)
		{
			const string __id = "memcmp.([B[BI)I";
			IntPtr native_data1 = JNIEnv.NewArray (data1);
			IntPtr native_data2 = JNIEnv.NewArray (data2);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (native_data1);
				__args [1] = new JniArgumentValue (native_data2);
				__args [2] = new JniArgumentValue (len);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (data1 != null) {
					JNIEnv.CopyArray (native_data1, data1);
					JNIEnv.DeleteLocalRef (native_data1);
				}
				if (data2 != null) {
					JNIEnv.CopyArray (native_data2, data2);
					JNIEnv.DeleteLocalRef (native_data2);
				}
				global::System.GC.KeepAlive (data1);
				global::System.GC.KeepAlive (data2);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='ByteUtils']/method[@name='memcmp' and count(parameter)=5 and parameter[1][@type='byte[]'] and parameter[2][@type='int'] and parameter[3][@type='byte[]'] and parameter[4][@type='int'] and parameter[5][@type='int']]"
		[Register ("memcmp", "([BI[BII)I", "")]
		public static unsafe int Memcmp (byte[]? data1, int pos1, byte[]? data2, int pos2, int len)
		{
			const string __id = "memcmp.([BI[BII)I";
			IntPtr native_data1 = JNIEnv.NewArray (data1);
			IntPtr native_data2 = JNIEnv.NewArray (data2);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [5];
				__args [0] = new JniArgumentValue (native_data1);
				__args [1] = new JniArgumentValue (pos1);
				__args [2] = new JniArgumentValue (native_data2);
				__args [3] = new JniArgumentValue (pos2);
				__args [4] = new JniArgumentValue (len);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (data1 != null) {
					JNIEnv.CopyArray (native_data1, data1);
					JNIEnv.DeleteLocalRef (native_data1);
				}
				if (data2 != null) {
					JNIEnv.CopyArray (native_data2, data2);
					JNIEnv.DeleteLocalRef (native_data2);
				}
				global::System.GC.KeepAlive (data1);
				global::System.GC.KeepAlive (data2);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='ByteUtils']/method[@name='memcmpHex' and count(parameter)=3 and parameter[1][@type='byte[]'] and parameter[2][@type='java.lang.String'] and parameter[3][@type='int']]"
		[Register ("memcmpHex", "([BLjava/lang/String;I)I", "")]
		public static unsafe int MemcmpHex (byte[]? data1, string? dataHex, int len)
		{
			const string __id = "memcmpHex.([BLjava/lang/String;I)I";
			IntPtr native_data1 = JNIEnv.NewArray (data1);
			IntPtr native_dataHex = JNIEnv.NewString ((string?)dataHex);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (native_data1);
				__args [1] = new JniArgumentValue (native_dataHex);
				__args [2] = new JniArgumentValue (len);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (data1 != null) {
					JNIEnv.CopyArray (native_data1, data1);
					JNIEnv.DeleteLocalRef (native_data1);
				}
				JNIEnv.DeleteLocalRef (native_dataHex);
				global::System.GC.KeepAlive (data1);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='ByteUtils']/method[@name='memcpy' and count(parameter)=2 and parameter[1][@type='byte[]'] and parameter[2][@type='byte[]']]"
		[Register ("memcpy", "([B[B)V", "")]
		public static unsafe void Memcpy (byte[]? dest, byte[]? src)
		{
			const string __id = "memcpy.([B[B)V";
			IntPtr native_dest = JNIEnv.NewArray (dest);
			IntPtr native_src = JNIEnv.NewArray (src);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_dest);
				__args [1] = new JniArgumentValue (native_src);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				if (dest != null) {
					JNIEnv.CopyArray (native_dest, dest);
					JNIEnv.DeleteLocalRef (native_dest);
				}
				if (src != null) {
					JNIEnv.CopyArray (native_src, src);
					JNIEnv.DeleteLocalRef (native_src);
				}
				global::System.GC.KeepAlive (dest);
				global::System.GC.KeepAlive (src);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='ByteUtils']/method[@name='memcpy' and count(parameter)=3 and parameter[1][@type='byte[]'] and parameter[2][@type='byte[]'] and parameter[3][@type='int']]"
		[Register ("memcpy", "([B[BI)V", "")]
		public static unsafe void Memcpy (byte[]? dest, byte[]? src, int len)
		{
			const string __id = "memcpy.([B[BI)V";
			IntPtr native_dest = JNIEnv.NewArray (dest);
			IntPtr native_src = JNIEnv.NewArray (src);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (native_dest);
				__args [1] = new JniArgumentValue (native_src);
				__args [2] = new JniArgumentValue (len);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				if (dest != null) {
					JNIEnv.CopyArray (native_dest, dest);
					JNIEnv.DeleteLocalRef (native_dest);
				}
				if (src != null) {
					JNIEnv.CopyArray (native_src, src);
					JNIEnv.DeleteLocalRef (native_src);
				}
				global::System.GC.KeepAlive (dest);
				global::System.GC.KeepAlive (src);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='ByteUtils']/method[@name='memcpy' and count(parameter)=5 and parameter[1][@type='byte[]'] and parameter[2][@type='int'] and parameter[3][@type='byte[]'] and parameter[4][@type='int'] and parameter[5][@type='int']]"
		[Register ("memcpy", "([BI[BII)V", "")]
		public static unsafe void Memcpy (byte[]? dest, int destbegin, byte[]? src, int srcbegin, int len)
		{
			const string __id = "memcpy.([BI[BII)V";
			IntPtr native_dest = JNIEnv.NewArray (dest);
			IntPtr native_src = JNIEnv.NewArray (src);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [5];
				__args [0] = new JniArgumentValue (native_dest);
				__args [1] = new JniArgumentValue (destbegin);
				__args [2] = new JniArgumentValue (native_src);
				__args [3] = new JniArgumentValue (srcbegin);
				__args [4] = new JniArgumentValue (len);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				if (dest != null) {
					JNIEnv.CopyArray (native_dest, dest);
					JNIEnv.DeleteLocalRef (native_dest);
				}
				if (src != null) {
					JNIEnv.CopyArray (native_src, src);
					JNIEnv.DeleteLocalRef (native_src);
				}
				global::System.GC.KeepAlive (dest);
				global::System.GC.KeepAlive (src);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='ByteUtils']/method[@name='memcpy' and count(parameter)=5 and parameter[1][@type='byte[]'] and parameter[2][@type='int'] and parameter[3][@type='java.lang.String'] and parameter[4][@type='int'] and parameter[5][@type='int']]"
		[Register ("memcpy", "([BILjava/lang/String;II)V", "")]
		public static unsafe void Memcpy (byte[]? dest, int destbegin, string? src, int srcbegin, int len)
		{
			const string __id = "memcpy.([BILjava/lang/String;II)V";
			IntPtr native_dest = JNIEnv.NewArray (dest);
			IntPtr native_src = JNIEnv.NewString ((string?)src);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [5];
				__args [0] = new JniArgumentValue (native_dest);
				__args [1] = new JniArgumentValue (destbegin);
				__args [2] = new JniArgumentValue (native_src);
				__args [3] = new JniArgumentValue (srcbegin);
				__args [4] = new JniArgumentValue (len);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				if (dest != null) {
					JNIEnv.CopyArray (native_dest, dest);
					JNIEnv.DeleteLocalRef (native_dest);
				}
				JNIEnv.DeleteLocalRef (native_src);
				global::System.GC.KeepAlive (dest);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='ByteUtils']/method[@name='memcpy' and count(parameter)=2 and parameter[1][@type='byte[]'] and parameter[2][@type='java.lang.String']]"
		[Register ("memcpy", "([BLjava/lang/String;)V", "")]
		public static unsafe void Memcpy (byte[]? dest, string? src)
		{
			const string __id = "memcpy.([BLjava/lang/String;)V";
			IntPtr native_dest = JNIEnv.NewArray (dest);
			IntPtr native_src = JNIEnv.NewString ((string?)src);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_dest);
				__args [1] = new JniArgumentValue (native_src);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				if (dest != null) {
					JNIEnv.CopyArray (native_dest, dest);
					JNIEnv.DeleteLocalRef (native_dest);
				}
				JNIEnv.DeleteLocalRef (native_src);
				global::System.GC.KeepAlive (dest);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='ByteUtils']/method[@name='memcpy' and count(parameter)=3 and parameter[1][@type='byte[]'] and parameter[2][@type='java.lang.String'] and parameter[3][@type='int']]"
		[Register ("memcpy", "([BLjava/lang/String;I)V", "")]
		public static unsafe void Memcpy (byte[]? dest, string? src, int len)
		{
			const string __id = "memcpy.([BLjava/lang/String;I)V";
			IntPtr native_dest = JNIEnv.NewArray (dest);
			IntPtr native_src = JNIEnv.NewString ((string?)src);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (native_dest);
				__args [1] = new JniArgumentValue (native_src);
				__args [2] = new JniArgumentValue (len);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				if (dest != null) {
					JNIEnv.CopyArray (native_dest, dest);
					JNIEnv.DeleteLocalRef (native_dest);
				}
				JNIEnv.DeleteLocalRef (native_src);
				global::System.GC.KeepAlive (dest);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='ByteUtils']/method[@name='memcpyHex' and count(parameter)=3 and parameter[1][@type='byte[]'] and parameter[2][@type='java.lang.String'] and parameter[3][@type='int']]"
		[Register ("memcpyHex", "([BLjava/lang/String;I)V", "")]
		public static unsafe void MemcpyHex (byte[]? buf, string? data, int len)
		{
			const string __id = "memcpyHex.([BLjava/lang/String;I)V";
			IntPtr native_buf = JNIEnv.NewArray (buf);
			IntPtr native_data = JNIEnv.NewString ((string?)data);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (native_buf);
				__args [1] = new JniArgumentValue (native_data);
				__args [2] = new JniArgumentValue (len);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				if (buf != null) {
					JNIEnv.CopyArray (native_buf, buf);
					JNIEnv.DeleteLocalRef (native_buf);
				}
				JNIEnv.DeleteLocalRef (native_data);
				global::System.GC.KeepAlive (buf);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='ByteUtils']/method[@name='memcpyHex' and count(parameter)=5 and parameter[1][@type='byte[]'] and parameter[2][@type='java.lang.String'] and parameter[3][@type='java.lang.String'] and parameter[4][@type='java.lang.String'] and parameter[5][@type='int']]"
		[Register ("memcpyHex", "([BLjava/lang/String;Ljava/lang/String;Ljava/lang/String;I)V", "")]
		public static unsafe void MemcpyHex (byte[]? buf, string? data, string? target, string? replacement, int len)
		{
			const string __id = "memcpyHex.([BLjava/lang/String;Ljava/lang/String;Ljava/lang/String;I)V";
			IntPtr native_buf = JNIEnv.NewArray (buf);
			IntPtr native_data = JNIEnv.NewString ((string?)data);
			IntPtr native_target = JNIEnv.NewString ((string?)target);
			IntPtr native_replacement = JNIEnv.NewString ((string?)replacement);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [5];
				__args [0] = new JniArgumentValue (native_buf);
				__args [1] = new JniArgumentValue (native_data);
				__args [2] = new JniArgumentValue (native_target);
				__args [3] = new JniArgumentValue (native_replacement);
				__args [4] = new JniArgumentValue (len);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				if (buf != null) {
					JNIEnv.CopyArray (native_buf, buf);
					JNIEnv.DeleteLocalRef (native_buf);
				}
				JNIEnv.DeleteLocalRef (native_data);
				JNIEnv.DeleteLocalRef (native_target);
				JNIEnv.DeleteLocalRef (native_replacement);
				global::System.GC.KeepAlive (buf);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='ByteUtils']/method[@name='memmove' and count(parameter)=4 and parameter[1][@type='byte[]'] and parameter[2][@type='int'] and parameter[3][@type='int'] and parameter[4][@type='int']]"
		[Register ("memmove", "([BIII)V", "")]
		public static unsafe void Memmove (byte[]? data, int to, int from, int len)
		{
			const string __id = "memmove.([BIII)V";
			IntPtr native_data = JNIEnv.NewArray (data);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [4];
				__args [0] = new JniArgumentValue (native_data);
				__args [1] = new JniArgumentValue (to);
				__args [2] = new JniArgumentValue (from);
				__args [3] = new JniArgumentValue (len);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				if (data != null) {
					JNIEnv.CopyArray (native_data, data);
					JNIEnv.DeleteLocalRef (native_data);
				}
				global::System.GC.KeepAlive (data);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='ByteUtils']/method[@name='memset' and count(parameter)=3 and parameter[1][@type='byte[]'] and parameter[2][@type='char'] and parameter[3][@type='int']]"
		[Register ("memset", "([BCI)V", "")]
		public static unsafe void Memset (byte[]? data, char ch, int len)
		{
			const string __id = "memset.([BCI)V";
			IntPtr native_data = JNIEnv.NewArray (data);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (native_data);
				__args [1] = new JniArgumentValue (ch);
				__args [2] = new JniArgumentValue (len);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				if (data != null) {
					JNIEnv.CopyArray (native_data, data);
					JNIEnv.DeleteLocalRef (native_data);
				}
				global::System.GC.KeepAlive (data);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='ByteUtils']/method[@name='memset' and count(parameter)=4 and parameter[1][@type='byte[]'] and parameter[2][@type='int'] and parameter[3][@type='char'] and parameter[4][@type='int']]"
		[Register ("memset", "([BICI)V", "")]
		public static unsafe void Memset (byte[]? data, int start, char ch, int len)
		{
			const string __id = "memset.([BICI)V";
			IntPtr native_data = JNIEnv.NewArray (data);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [4];
				__args [0] = new JniArgumentValue (native_data);
				__args [1] = new JniArgumentValue (start);
				__args [2] = new JniArgumentValue (ch);
				__args [3] = new JniArgumentValue (len);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				if (data != null) {
					JNIEnv.CopyArray (native_data, data);
					JNIEnv.DeleteLocalRef (native_data);
				}
				global::System.GC.KeepAlive (data);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='ByteUtils']/method[@name='memset' and count(parameter)=3 and parameter[1][@type='byte[]'] and parameter[2][@type='int'] and parameter[3][@type='int']]"
		[Register ("memset", "([BII)V", "")]
		public static unsafe void Memset (byte[]? data, int ch, int len)
		{
			const string __id = "memset.([BII)V";
			IntPtr native_data = JNIEnv.NewArray (data);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (native_data);
				__args [1] = new JniArgumentValue (ch);
				__args [2] = new JniArgumentValue (len);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				if (data != null) {
					JNIEnv.CopyArray (native_data, data);
					JNIEnv.DeleteLocalRef (native_data);
				}
				global::System.GC.KeepAlive (data);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='ByteUtils']/method[@name='memset' and count(parameter)=4 and parameter[1][@type='byte[]'] and parameter[2][@type='int'] and parameter[3][@type='int'] and parameter[4][@type='int']]"
		[Register ("memset", "([BIII)V", "")]
		public static unsafe void Memset (byte[]? data, int start, int ch, int len)
		{
			const string __id = "memset.([BIII)V";
			IntPtr native_data = JNIEnv.NewArray (data);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [4];
				__args [0] = new JniArgumentValue (native_data);
				__args [1] = new JniArgumentValue (start);
				__args [2] = new JniArgumentValue (ch);
				__args [3] = new JniArgumentValue (len);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				if (data != null) {
					JNIEnv.CopyArray (native_data, data);
					JNIEnv.DeleteLocalRef (native_data);
				}
				global::System.GC.KeepAlive (data);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='ByteUtils']/method[@name='mergeByte' and count(parameter)=2 and parameter[1][@type='byte[]'] and parameter[2][@type='byte[]']]"
		[Register ("mergeByte", "([B[B)[B", "")]
		public static unsafe byte[]? MergeByte (byte[]? begin, byte[]? end)
		{
			const string __id = "mergeByte.([B[B)[B";
			IntPtr native_begin = JNIEnv.NewArray (begin);
			IntPtr native_end = JNIEnv.NewArray (end);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_begin);
				__args [1] = new JniArgumentValue (native_end);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return (byte[]?) JNIEnv.GetArray (__rm.Handle, JniHandleOwnership.TransferLocalRef, typeof (byte));
			} finally {
				if (begin != null) {
					JNIEnv.CopyArray (native_begin, begin);
					JNIEnv.DeleteLocalRef (native_begin);
				}
				if (end != null) {
					JNIEnv.CopyArray (native_end, end);
					JNIEnv.DeleteLocalRef (native_end);
				}
				global::System.GC.KeepAlive (begin);
				global::System.GC.KeepAlive (end);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='ByteUtils']/method[@name='strcat' and count(parameter)=2 and parameter[1][@type='byte[]'] and parameter[2][@type='byte[]']]"
		[Register ("strcat", "([B[B)V", "")]
		public static unsafe void Strcat (byte[]? dest, byte[]? src)
		{
			const string __id = "strcat.([B[B)V";
			IntPtr native_dest = JNIEnv.NewArray (dest);
			IntPtr native_src = JNIEnv.NewArray (src);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_dest);
				__args [1] = new JniArgumentValue (native_src);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				if (dest != null) {
					JNIEnv.CopyArray (native_dest, dest);
					JNIEnv.DeleteLocalRef (native_dest);
				}
				if (src != null) {
					JNIEnv.CopyArray (native_src, src);
					JNIEnv.DeleteLocalRef (native_src);
				}
				global::System.GC.KeepAlive (dest);
				global::System.GC.KeepAlive (src);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='ByteUtils']/method[@name='strcat' and count(parameter)=2 and parameter[1][@type='byte[]'] and parameter[2][@type='java.lang.String']]"
		[Register ("strcat", "([BLjava/lang/String;)V", "")]
		public static unsafe void Strcat (byte[]? dest, string? src)
		{
			const string __id = "strcat.([BLjava/lang/String;)V";
			IntPtr native_dest = JNIEnv.NewArray (dest);
			IntPtr native_src = JNIEnv.NewString ((string?)src);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_dest);
				__args [1] = new JniArgumentValue (native_src);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				if (dest != null) {
					JNIEnv.CopyArray (native_dest, dest);
					JNIEnv.DeleteLocalRef (native_dest);
				}
				JNIEnv.DeleteLocalRef (native_src);
				global::System.GC.KeepAlive (dest);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='ByteUtils']/method[@name='strchr' and count(parameter)=2 and parameter[1][@type='byte[]'] and parameter[2][@type='char']]"
		[Register ("strchr", "([BC)[B", "")]
		public static unsafe byte[]? Strchr (byte[]? buf, char ch)
		{
			const string __id = "strchr.([BC)[B";
			IntPtr native_buf = JNIEnv.NewArray (buf);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_buf);
				__args [1] = new JniArgumentValue (ch);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return (byte[]?) JNIEnv.GetArray (__rm.Handle, JniHandleOwnership.TransferLocalRef, typeof (byte));
			} finally {
				if (buf != null) {
					JNIEnv.CopyArray (native_buf, buf);
					JNIEnv.DeleteLocalRef (native_buf);
				}
				global::System.GC.KeepAlive (buf);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='ByteUtils']/method[@name='strchr' and count(parameter)=3 and parameter[1][@type='byte[]'] and parameter[2][@type='char'] and parameter[3][@type='byte[]']]"
		[Register ("strchr", "([BC[B)[B", "")]
		public static unsafe byte[]? Strchr (byte[]? buf, char ch, byte[]? lenBuf)
		{
			const string __id = "strchr.([BC[B)[B";
			IntPtr native_buf = JNIEnv.NewArray (buf);
			IntPtr native_lenBuf = JNIEnv.NewArray (lenBuf);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (native_buf);
				__args [1] = new JniArgumentValue (ch);
				__args [2] = new JniArgumentValue (native_lenBuf);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return (byte[]?) JNIEnv.GetArray (__rm.Handle, JniHandleOwnership.TransferLocalRef, typeof (byte));
			} finally {
				if (buf != null) {
					JNIEnv.CopyArray (native_buf, buf);
					JNIEnv.DeleteLocalRef (native_buf);
				}
				if (lenBuf != null) {
					JNIEnv.CopyArray (native_lenBuf, lenBuf);
					JNIEnv.DeleteLocalRef (native_lenBuf);
				}
				global::System.GC.KeepAlive (buf);
				global::System.GC.KeepAlive (lenBuf);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='ByteUtils']/method[@name='strcmp' and count(parameter)=2 and parameter[1][@type='byte[]'] and parameter[2][@type='byte[]']]"
		[Register ("strcmp", "([B[B)I", "")]
		public static unsafe int Strcmp (byte[]? data1, byte[]? data2)
		{
			const string __id = "strcmp.([B[B)I";
			IntPtr native_data1 = JNIEnv.NewArray (data1);
			IntPtr native_data2 = JNIEnv.NewArray (data2);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_data1);
				__args [1] = new JniArgumentValue (native_data2);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (data1 != null) {
					JNIEnv.CopyArray (native_data1, data1);
					JNIEnv.DeleteLocalRef (native_data1);
				}
				if (data2 != null) {
					JNIEnv.CopyArray (native_data2, data2);
					JNIEnv.DeleteLocalRef (native_data2);
				}
				global::System.GC.KeepAlive (data1);
				global::System.GC.KeepAlive (data2);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='ByteUtils']/method[@name='strcmp' and count(parameter)=2 and parameter[1][@type='byte[]'] and parameter[2][@type='java.lang.String']]"
		[Register ("strcmp", "([BLjava/lang/String;)I", "")]
		public static unsafe int Strcmp (byte[]? data1, string? data2)
		{
			const string __id = "strcmp.([BLjava/lang/String;)I";
			IntPtr native_data1 = JNIEnv.NewArray (data1);
			IntPtr native_data2 = JNIEnv.NewString ((string?)data2);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_data1);
				__args [1] = new JniArgumentValue (native_data2);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (data1 != null) {
					JNIEnv.CopyArray (native_data1, data1);
					JNIEnv.DeleteLocalRef (native_data1);
				}
				JNIEnv.DeleteLocalRef (native_data2);
				global::System.GC.KeepAlive (data1);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='ByteUtils']/method[@name='strcpy' and count(parameter)=2 and parameter[1][@type='byte[]'] and parameter[2][@type='byte[]']]"
		[Register ("strcpy", "([B[B)V", "")]
		public static unsafe void Strcpy (byte[]? dest, byte[]? src)
		{
			const string __id = "strcpy.([B[B)V";
			IntPtr native_dest = JNIEnv.NewArray (dest);
			IntPtr native_src = JNIEnv.NewArray (src);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_dest);
				__args [1] = new JniArgumentValue (native_src);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				if (dest != null) {
					JNIEnv.CopyArray (native_dest, dest);
					JNIEnv.DeleteLocalRef (native_dest);
				}
				if (src != null) {
					JNIEnv.CopyArray (native_src, src);
					JNIEnv.DeleteLocalRef (native_src);
				}
				global::System.GC.KeepAlive (dest);
				global::System.GC.KeepAlive (src);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='ByteUtils']/method[@name='strcpy' and count(parameter)=3 and parameter[1][@type='byte[]'] and parameter[2][@type='byte[]'] and parameter[3][@type='int']]"
		[Register ("strcpy", "([B[BI)V", "")]
		public static unsafe void Strcpy (byte[]? dest, byte[]? src, int len)
		{
			const string __id = "strcpy.([B[BI)V";
			IntPtr native_dest = JNIEnv.NewArray (dest);
			IntPtr native_src = JNIEnv.NewArray (src);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (native_dest);
				__args [1] = new JniArgumentValue (native_src);
				__args [2] = new JniArgumentValue (len);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				if (dest != null) {
					JNIEnv.CopyArray (native_dest, dest);
					JNIEnv.DeleteLocalRef (native_dest);
				}
				if (src != null) {
					JNIEnv.CopyArray (native_src, src);
					JNIEnv.DeleteLocalRef (native_src);
				}
				global::System.GC.KeepAlive (dest);
				global::System.GC.KeepAlive (src);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='ByteUtils']/method[@name='strcpy' and count(parameter)=5 and parameter[1][@type='byte[]'] and parameter[2][@type='int'] and parameter[3][@type='byte[]'] and parameter[4][@type='int'] and parameter[5][@type='int']]"
		[Register ("strcpy", "([BI[BII)V", "")]
		public static unsafe void Strcpy (byte[]? dest, int destbegin, byte[]? src, int srcbegin, int len)
		{
			const string __id = "strcpy.([BI[BII)V";
			IntPtr native_dest = JNIEnv.NewArray (dest);
			IntPtr native_src = JNIEnv.NewArray (src);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [5];
				__args [0] = new JniArgumentValue (native_dest);
				__args [1] = new JniArgumentValue (destbegin);
				__args [2] = new JniArgumentValue (native_src);
				__args [3] = new JniArgumentValue (srcbegin);
				__args [4] = new JniArgumentValue (len);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				if (dest != null) {
					JNIEnv.CopyArray (native_dest, dest);
					JNIEnv.DeleteLocalRef (native_dest);
				}
				if (src != null) {
					JNIEnv.CopyArray (native_src, src);
					JNIEnv.DeleteLocalRef (native_src);
				}
				global::System.GC.KeepAlive (dest);
				global::System.GC.KeepAlive (src);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='ByteUtils']/method[@name='strcpy' and count(parameter)=5 and parameter[1][@type='byte[]'] and parameter[2][@type='int'] and parameter[3][@type='java.lang.String'] and parameter[4][@type='int'] and parameter[5][@type='int']]"
		[Register ("strcpy", "([BILjava/lang/String;II)V", "")]
		public static unsafe void Strcpy (byte[]? dest, int destbegin, string? src, int srcbegin, int len)
		{
			const string __id = "strcpy.([BILjava/lang/String;II)V";
			IntPtr native_dest = JNIEnv.NewArray (dest);
			IntPtr native_src = JNIEnv.NewString ((string?)src);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [5];
				__args [0] = new JniArgumentValue (native_dest);
				__args [1] = new JniArgumentValue (destbegin);
				__args [2] = new JniArgumentValue (native_src);
				__args [3] = new JniArgumentValue (srcbegin);
				__args [4] = new JniArgumentValue (len);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				if (dest != null) {
					JNIEnv.CopyArray (native_dest, dest);
					JNIEnv.DeleteLocalRef (native_dest);
				}
				JNIEnv.DeleteLocalRef (native_src);
				global::System.GC.KeepAlive (dest);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='ByteUtils']/method[@name='strcpy' and count(parameter)=2 and parameter[1][@type='byte[]'] and parameter[2][@type='java.lang.String']]"
		[Register ("strcpy", "([BLjava/lang/String;)V", "")]
		public static unsafe void Strcpy (byte[]? dest, string? src)
		{
			const string __id = "strcpy.([BLjava/lang/String;)V";
			IntPtr native_dest = JNIEnv.NewArray (dest);
			IntPtr native_src = JNIEnv.NewString ((string?)src);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_dest);
				__args [1] = new JniArgumentValue (native_src);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				if (dest != null) {
					JNIEnv.CopyArray (native_dest, dest);
					JNIEnv.DeleteLocalRef (native_dest);
				}
				JNIEnv.DeleteLocalRef (native_src);
				global::System.GC.KeepAlive (dest);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='ByteUtils']/method[@name='strcpy' and count(parameter)=3 and parameter[1][@type='byte[]'] and parameter[2][@type='java.lang.String'] and parameter[3][@type='int']]"
		[Register ("strcpy", "([BLjava/lang/String;I)V", "")]
		public static unsafe void Strcpy (byte[]? dest, string? src, int len)
		{
			const string __id = "strcpy.([BLjava/lang/String;I)V";
			IntPtr native_dest = JNIEnv.NewArray (dest);
			IntPtr native_src = JNIEnv.NewString ((string?)src);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (native_dest);
				__args [1] = new JniArgumentValue (native_src);
				__args [2] = new JniArgumentValue (len);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				if (dest != null) {
					JNIEnv.CopyArray (native_dest, dest);
					JNIEnv.DeleteLocalRef (native_dest);
				}
				JNIEnv.DeleteLocalRef (native_src);
				global::System.GC.KeepAlive (dest);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='ByteUtils']/method[@name='strlen' and count(parameter)=1 and parameter[1][@type='byte[]']]"
		[Register ("strlen", "([B)I", "")]
		public static unsafe int Strlen (byte[]? buf)
		{
			const string __id = "strlen.([B)I";
			IntPtr native_buf = JNIEnv.NewArray (buf);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_buf);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (buf != null) {
					JNIEnv.CopyArray (native_buf, buf);
					JNIEnv.DeleteLocalRef (native_buf);
				}
				global::System.GC.KeepAlive (buf);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='ByteUtils']/method[@name='strlen' and count(parameter)=2 and parameter[1][@type='byte[]'] and parameter[2][@type='int']]"
		[Register ("strlen", "([BI)I", "")]
		public static unsafe int Strlen (byte[]? buf, int begin)
		{
			const string __id = "strlen.([BI)I";
			IntPtr native_buf = JNIEnv.NewArray (buf);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_buf);
				__args [1] = new JniArgumentValue (begin);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (buf != null) {
					JNIEnv.CopyArray (native_buf, buf);
					JNIEnv.DeleteLocalRef (native_buf);
				}
				global::System.GC.KeepAlive (buf);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='ByteUtils']/method[@name='strncpy' and count(parameter)=3 and parameter[1][@type='byte[]'] and parameter[2][@type='byte[]'] and parameter[3][@type='int']]"
		[Register ("strncpy", "([B[BI)[B", "")]
		public static unsafe byte[]? Strncpy (byte[]? dest, byte[]? src, int num)
		{
			const string __id = "strncpy.([B[BI)[B";
			IntPtr native_dest = JNIEnv.NewArray (dest);
			IntPtr native_src = JNIEnv.NewArray (src);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (native_dest);
				__args [1] = new JniArgumentValue (native_src);
				__args [2] = new JniArgumentValue (num);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return (byte[]?) JNIEnv.GetArray (__rm.Handle, JniHandleOwnership.TransferLocalRef, typeof (byte));
			} finally {
				if (dest != null) {
					JNIEnv.CopyArray (native_dest, dest);
					JNIEnv.DeleteLocalRef (native_dest);
				}
				if (src != null) {
					JNIEnv.CopyArray (native_src, src);
					JNIEnv.DeleteLocalRef (native_src);
				}
				global::System.GC.KeepAlive (dest);
				global::System.GC.KeepAlive (src);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='ByteUtils']/method[@name='strtok' and count(parameter)=2 and parameter[1][@type='byte[]'] and parameter[2][@type='java.lang.String']]"
		[Register ("strtok", "([BLjava/lang/String;)[B", "")]
		public static unsafe byte[]? Strtok (byte[]? buf, string? delim)
		{
			const string __id = "strtok.([BLjava/lang/String;)[B";
			IntPtr native_buf = JNIEnv.NewArray (buf);
			IntPtr native_delim = JNIEnv.NewString ((string?)delim);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_buf);
				__args [1] = new JniArgumentValue (native_delim);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return (byte[]?) JNIEnv.GetArray (__rm.Handle, JniHandleOwnership.TransferLocalRef, typeof (byte));
			} finally {
				if (buf != null) {
					JNIEnv.CopyArray (native_buf, buf);
					JNIEnv.DeleteLocalRef (native_buf);
				}
				JNIEnv.DeleteLocalRef (native_delim);
				global::System.GC.KeepAlive (buf);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='ByteUtils']/method[@name='structsToBytes' and count(parameter)=1 and parameter[1][@type='com.vanstone.base.interfaces.StructInterface[]']]"
		[Register ("structsToBytes", "([Lcom/vanstone/base/interfaces/StructInterface;)[B", "")]
		public static unsafe byte[]? StructsToBytes (global::Com.Vanstone.Base.Interfaces.IStructInterface[]? sts)
		{
			const string __id = "structsToBytes.([Lcom/vanstone/base/interfaces/StructInterface;)[B";
			IntPtr native_sts = JNIEnv.NewArray (sts);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_sts);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return (byte[]?) JNIEnv.GetArray (__rm.Handle, JniHandleOwnership.TransferLocalRef, typeof (byte));
			} finally {
				if (sts != null) {
					JNIEnv.CopyArray (native_sts, sts);
					JNIEnv.DeleteLocalRef (native_sts);
				}
				global::System.GC.KeepAlive (sts);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='ByteUtils']/method[@name='subBytes' and count(parameter)=2 and parameter[1][@type='byte[]'] and parameter[2][@type='int']]"
		[Register ("subBytes", "([BI)[B", "")]
		public static unsafe byte[]? SubBytes (byte[]? src, int begin)
		{
			const string __id = "subBytes.([BI)[B";
			IntPtr native_src = JNIEnv.NewArray (src);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_src);
				__args [1] = new JniArgumentValue (begin);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return (byte[]?) JNIEnv.GetArray (__rm.Handle, JniHandleOwnership.TransferLocalRef, typeof (byte));
			} finally {
				if (src != null) {
					JNIEnv.CopyArray (native_src, src);
					JNIEnv.DeleteLocalRef (native_src);
				}
				global::System.GC.KeepAlive (src);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='ByteUtils']/method[@name='subBytes' and count(parameter)=3 and parameter[1][@type='byte[]'] and parameter[2][@type='int'] and parameter[3][@type='int']]"
		[Register ("subBytes", "([BII)[B", "")]
		public static unsafe byte[]? SubBytes (byte[]? src, int begin, int len)
		{
			const string __id = "subBytes.([BII)[B";
			IntPtr native_src = JNIEnv.NewArray (src);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (native_src);
				__args [1] = new JniArgumentValue (begin);
				__args [2] = new JniArgumentValue (len);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return (byte[]?) JNIEnv.GetArray (__rm.Handle, JniHandleOwnership.TransferLocalRef, typeof (byte));
			} finally {
				if (src != null) {
					JNIEnv.CopyArray (native_src, src);
					JNIEnv.DeleteLocalRef (native_src);
				}
				global::System.GC.KeepAlive (src);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='ByteUtils']/method[@name='subBytesToString' and count(parameter)=2 and parameter[1][@type='byte[]'] and parameter[2][@type='int']]"
		[Register ("subBytesToString", "([BI)Ljava/lang/String;", "")]
		public static unsafe string? SubBytesToString (byte[]? src, int begin)
		{
			const string __id = "subBytesToString.([BI)Ljava/lang/String;";
			IntPtr native_src = JNIEnv.NewArray (src);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_src);
				__args [1] = new JniArgumentValue (begin);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				if (src != null) {
					JNIEnv.CopyArray (native_src, src);
					JNIEnv.DeleteLocalRef (native_src);
				}
				global::System.GC.KeepAlive (src);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.utils']/class[@name='ByteUtils']/method[@name='subBytesToString' and count(parameter)=3 and parameter[1][@type='byte[]'] and parameter[2][@type='int'] and parameter[3][@type='int']]"
		[Register ("subBytesToString", "([BII)Ljava/lang/String;", "")]
		public static unsafe string? SubBytesToString (byte[]? src, int begin, int len)
		{
			const string __id = "subBytesToString.([BII)Ljava/lang/String;";
			IntPtr native_src = JNIEnv.NewArray (src);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (native_src);
				__args [1] = new JniArgumentValue (begin);
				__args [2] = new JniArgumentValue (len);
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, __args);
				return JNIEnv.GetString (__rm.Handle, JniHandleOwnership.TransferLocalRef);
			} finally {
				if (src != null) {
					JNIEnv.CopyArray (native_src, src);
					JNIEnv.DeleteLocalRef (native_src);
				}
				global::System.GC.KeepAlive (src);
			}
		}

	}
}
