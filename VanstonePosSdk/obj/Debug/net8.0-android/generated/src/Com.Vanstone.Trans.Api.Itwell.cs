//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable restore
using System;
using System.Collections.Generic;
using Android.Runtime;
using Java.Interop;

namespace Com.Vanstone.Trans.Api {

	// Metadata.xml XPath class reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='Itwell']"
	[global::Android.Runtime.Register ("com/vanstone/trans/api/Itwell", DoNotGenerateAcw=true)]
	public partial class Itwell : global::Java.Lang.Object {
		static readonly JniPeerMembers _members = new XAPeerMembers ("com/vanstone/trans/api/Itwell", typeof (Itwell));

		internal static IntPtr class_ref {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		public override global::Java.Interop.JniPeerMembers JniPeerMembers {
			get { return _members; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override IntPtr ThresholdClass {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override global::System.Type ThresholdType {
			get { return _members.ManagedPeerType; }
		}

		protected Itwell (IntPtr javaReference, JniHandleOwnership transfer) : base (javaReference, transfer)
		{
		}

		// Metadata.xml XPath constructor reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='Itwell']/constructor[@name='Itwell' and count(parameter)=0]"
		[Register (".ctor", "()V", "")]
		public unsafe Itwell () : base (IntPtr.Zero, JniHandleOwnership.DoNotTransfer)
		{
			const string __id = "()V";

			if (((global::Java.Lang.Object) this).Handle != IntPtr.Zero)
				return;

			try {
				var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), null);
				SetHandle (__r.Handle, JniHandleOwnership.TransferLocalRef);
				_members.InstanceMethods.FinishCreateInstance (__id, this, null);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='Itwell']/method[@name='AddField' and count(parameter)=2 and parameter[1][@type='int'] and parameter[2][@type='byte[]']]"
		[Register ("AddField", "(I[B)V", "")]
		public static unsafe void AddField (int ucFieldNo, byte[]? Bitmap)
		{
			const string __id = "AddField.(I[B)V";
			IntPtr native_Bitmap = JNIEnv.NewArray (Bitmap);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (ucFieldNo);
				__args [1] = new JniArgumentValue (native_Bitmap);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				if (Bitmap != null) {
					JNIEnv.CopyArray (native_Bitmap, Bitmap);
					JNIEnv.DeleteLocalRef (native_Bitmap);
				}
				global::System.GC.KeepAlive (Bitmap);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='Itwell']/method[@name='AssertPrint' and count(parameter)=3 and parameter[1][@type='byte[]'] and parameter[2][@type='int'] and parameter[3][@type='byte[]']]"
		[global::System.Obsolete (@"deprecated")]
		[Register ("AssertPrint", "([BI[B)V", "")]
		public static unsafe void AssertPrint (byte[]? Fpath, int Lineno, byte[]? AssertCode)
		{
			const string __id = "AssertPrint.([BI[B)V";
			IntPtr native_Fpath = JNIEnv.NewArray (Fpath);
			IntPtr native_AssertCode = JNIEnv.NewArray (AssertCode);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (native_Fpath);
				__args [1] = new JniArgumentValue (Lineno);
				__args [2] = new JniArgumentValue (native_AssertCode);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				if (Fpath != null) {
					JNIEnv.CopyArray (native_Fpath, Fpath);
					JNIEnv.DeleteLocalRef (native_Fpath);
				}
				if (AssertCode != null) {
					JNIEnv.CopyArray (native_AssertCode, AssertCode);
					JNIEnv.DeleteLocalRef (native_AssertCode);
				}
				global::System.GC.KeepAlive (Fpath);
				global::System.GC.KeepAlive (AssertCode);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='Itwell']/method[@name='CheckDate' and count(parameter)=1 and parameter[1][@type='byte[]']]"
		[Register ("CheckDate", "([B)I", "")]
		public static unsafe int CheckDate (byte[]? sDate)
		{
			const string __id = "CheckDate.([B)I";
			IntPtr native_sDate = JNIEnv.NewArray (sDate);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_sDate);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (sDate != null) {
					JNIEnv.CopyArray (native_sDate, sDate);
					JNIEnv.DeleteLocalRef (native_sDate);
				}
				global::System.GC.KeepAlive (sDate);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='Itwell']/method[@name='CheckMMYY' and count(parameter)=1 and parameter[1][@type='byte[]']]"
		[Register ("CheckMMYY", "([B)I", "")]
		public static unsafe int CheckMMYY (byte[]? sMMYY)
		{
			const string __id = "CheckMMYY.([B)I";
			IntPtr native_sMMYY = JNIEnv.NewArray (sMMYY);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_sMMYY);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (sMMYY != null) {
					JNIEnv.CopyArray (native_sMMYY, sMMYY);
					JNIEnv.DeleteLocalRef (native_sMMYY);
				}
				global::System.GC.KeepAlive (sMMYY);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='Itwell']/method[@name='CheckYYMM' and count(parameter)=1 and parameter[1][@type='byte[]']]"
		[Register ("CheckYYMM", "([B)I", "")]
		public static unsafe int CheckYYMM (byte[]? sYYMM)
		{
			const string __id = "CheckYYMM.([B)I";
			IntPtr native_sYYMM = JNIEnv.NewArray (sYYMM);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_sYYMM);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (sYYMM != null) {
					JNIEnv.CopyArray (native_sYYMM, sYYMM);
					JNIEnv.DeleteLocalRef (native_sYYMM);
				}
				global::System.GC.KeepAlive (sYYMM);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='Itwell']/method[@name='CommPrintHex' and count(parameter)=3 and parameter[1][@type='byte[]'] and parameter[2][@type='byte[]'] and parameter[3][@type='int']]"
		[global::System.Obsolete (@"deprecated")]
		[Register ("CommPrintHex", "([B[BI)I", "")]
		public static unsafe int CommPrintHex (byte[]? Title, byte[]? Buf, int Length)
		{
			const string __id = "CommPrintHex.([B[BI)I";
			IntPtr native_Title = JNIEnv.NewArray (Title);
			IntPtr native_Buf = JNIEnv.NewArray (Buf);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (native_Title);
				__args [1] = new JniArgumentValue (native_Buf);
				__args [2] = new JniArgumentValue (Length);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (Title != null) {
					JNIEnv.CopyArray (native_Title, Title);
					JNIEnv.DeleteLocalRef (native_Title);
				}
				if (Buf != null) {
					JNIEnv.CopyArray (native_Buf, Buf);
					JNIEnv.DeleteLocalRef (native_Buf);
				}
				global::System.GC.KeepAlive (Title);
				global::System.GC.KeepAlive (Buf);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='Itwell']/method[@name='ConvBcdAmount' and count(parameter)=2 and parameter[1][@type='byte[]'] and parameter[2][@type='byte[]']]"
		[Register ("ConvBcdAmount", "([B[B)I", "")]
		public static unsafe int ConvBcdAmount (byte[]? BcdAmt, byte[]? Amount_ptr)
		{
			const string __id = "ConvBcdAmount.([B[B)I";
			IntPtr native_BcdAmt = JNIEnv.NewArray (BcdAmt);
			IntPtr native_Amount_ptr = JNIEnv.NewArray (Amount_ptr);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_BcdAmt);
				__args [1] = new JniArgumentValue (native_Amount_ptr);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (BcdAmt != null) {
					JNIEnv.CopyArray (native_BcdAmt, BcdAmt);
					JNIEnv.DeleteLocalRef (native_BcdAmt);
				}
				if (Amount_ptr != null) {
					JNIEnv.CopyArray (native_Amount_ptr, Amount_ptr);
					JNIEnv.DeleteLocalRef (native_Amount_ptr);
				}
				global::System.GC.KeepAlive (BcdAmt);
				global::System.GC.KeepAlive (Amount_ptr);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='Itwell']/method[@name='ConvertAmountFormat' and count(parameter)=3 and parameter[1][@type='byte[]'] and parameter[2][@type='byte[]'] and parameter[3][@type='int']]"
		[Register ("ConvertAmountFormat", "([B[BI)I", "")]
		public static unsafe int ConvertAmountFormat (byte[]? @out, byte[]? Amount, int bUndo)
		{
			const string __id = "ConvertAmountFormat.([B[BI)I";
			IntPtr native__out = JNIEnv.NewArray (@out);
			IntPtr native_Amount = JNIEnv.NewArray (Amount);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (native__out);
				__args [1] = new JniArgumentValue (native_Amount);
				__args [2] = new JniArgumentValue (bUndo);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (@out != null) {
					JNIEnv.CopyArray (native__out, @out);
					JNIEnv.DeleteLocalRef (native__out);
				}
				if (Amount != null) {
					JNIEnv.CopyArray (native_Amount, Amount);
					JNIEnv.DeleteLocalRef (native_Amount);
				}
				global::System.GC.KeepAlive (@out);
				global::System.GC.KeepAlive (Amount);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='Itwell']/method[@name='ConvertDisBalanceFormat' and count(parameter)=2 and parameter[1][@type='byte[]'] and parameter[2][@type='byte[]']]"
		[Register ("ConvertDisBalanceFormat", "([B[B)I", "")]
		public static unsafe int ConvertDisBalanceFormat (byte[]? @out, byte[]? Balance)
		{
			const string __id = "ConvertDisBalanceFormat.([B[B)I";
			IntPtr native__out = JNIEnv.NewArray (@out);
			IntPtr native_Balance = JNIEnv.NewArray (Balance);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native__out);
				__args [1] = new JniArgumentValue (native_Balance);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (@out != null) {
					JNIEnv.CopyArray (native__out, @out);
					JNIEnv.DeleteLocalRef (native__out);
				}
				if (Balance != null) {
					JNIEnv.CopyArray (native_Balance, Balance);
					JNIEnv.DeleteLocalRef (native_Balance);
				}
				global::System.GC.KeepAlive (@out);
				global::System.GC.KeepAlive (Balance);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='Itwell']/method[@name='DbgOut_Api' and count(parameter)=6 and parameter[1][@type='byte[]'] and parameter[2][@type='java.lang.String'] and parameter[3][@type='int'] and parameter[4][@type='int'] and parameter[5][@type='int'] and parameter[6][@type='byte[]']]"
		[global::System.Obsolete (@"deprecated")]
		[Register ("DbgOut_Api", "([BLjava/lang/String;III[B)I", "")]
		public static unsafe int DbgOut_Api (byte[]? FileOrPortName, string? Title, int Mode, int BcdOrAsc, int InBufLen, byte[]? pInBuf)
		{
			const string __id = "DbgOut_Api.([BLjava/lang/String;III[B)I";
			IntPtr native_FileOrPortName = JNIEnv.NewArray (FileOrPortName);
			IntPtr native_Title = JNIEnv.NewString ((string?)Title);
			IntPtr native_pInBuf = JNIEnv.NewArray (pInBuf);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [6];
				__args [0] = new JniArgumentValue (native_FileOrPortName);
				__args [1] = new JniArgumentValue (native_Title);
				__args [2] = new JniArgumentValue (Mode);
				__args [3] = new JniArgumentValue (BcdOrAsc);
				__args [4] = new JniArgumentValue (InBufLen);
				__args [5] = new JniArgumentValue (native_pInBuf);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (FileOrPortName != null) {
					JNIEnv.CopyArray (native_FileOrPortName, FileOrPortName);
					JNIEnv.DeleteLocalRef (native_FileOrPortName);
				}
				JNIEnv.DeleteLocalRef (native_Title);
				if (pInBuf != null) {
					JNIEnv.CopyArray (native_pInBuf, pInBuf);
					JNIEnv.DeleteLocalRef (native_pInBuf);
				}
				global::System.GC.KeepAlive (FileOrPortName);
				global::System.GC.KeepAlive (pInBuf);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='Itwell']/method[@name='DbgSet_Api' and count(parameter)=1 and parameter[1][@type='int']]"
		[global::System.Obsolete (@"deprecated")]
		[Register ("DbgSet_Api", "(I)I", "")]
		public static unsafe int DbgSet_Api (int flag)
		{
			const string __id = "DbgSet_Api.(I)I";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (flag);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='Itwell']/method[@name='ErrorPrompt' and count(parameter)=2 and parameter[1][@type='java.lang.String'] and parameter[2][@type='int']]"
		[Register ("ErrorPrompt", "(Ljava/lang/String;I)V", "")]
		public static unsafe void ErrorPrompt (string? ErrPrompt, int TimeOut)
		{
			const string __id = "ErrorPrompt.(Ljava/lang/String;I)V";
			IntPtr native_ErrPrompt = JNIEnv.NewString ((string?)ErrPrompt);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_ErrPrompt);
				__args [1] = new JniArgumentValue (TimeOut);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				JNIEnv.DeleteLocalRef (native_ErrPrompt);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='Itwell']/method[@name='FormBcdToAsc' and count(parameter)=3 and parameter[1][@type='byte[]'] and parameter[2][@type='byte[]'] and parameter[3][@type='int']]"
		[Register ("FormBcdToAsc", "([B[BI)V", "")]
		public static unsafe void FormBcdToAsc (byte[]? sAscBuf, byte[]? sBcdBuf, int iAscLen)
		{
			const string __id = "FormBcdToAsc.([B[BI)V";
			IntPtr native_sAscBuf = JNIEnv.NewArray (sAscBuf);
			IntPtr native_sBcdBuf = JNIEnv.NewArray (sBcdBuf);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (native_sAscBuf);
				__args [1] = new JniArgumentValue (native_sBcdBuf);
				__args [2] = new JniArgumentValue (iAscLen);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				if (sAscBuf != null) {
					JNIEnv.CopyArray (native_sAscBuf, sAscBuf);
					JNIEnv.DeleteLocalRef (native_sAscBuf);
				}
				if (sBcdBuf != null) {
					JNIEnv.CopyArray (native_sBcdBuf, sBcdBuf);
					JNIEnv.DeleteLocalRef (native_sBcdBuf);
				}
				global::System.GC.KeepAlive (sAscBuf);
				global::System.GC.KeepAlive (sBcdBuf);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='Itwell']/method[@name='FormatAMT' and count(parameter)=4 and parameter[1][@type='byte[]'] and parameter[2][@type='byte[]'] and parameter[3][@type='int'] and parameter[4][@type='int']]"
		[Register ("FormatAMT", "([B[BII)V", "")]
		public static unsafe void FormatAMT (byte[]? FormatedAmt, byte[]? Amt, int Sign, int Width)
		{
			const string __id = "FormatAMT.([B[BII)V";
			IntPtr native_FormatedAmt = JNIEnv.NewArray (FormatedAmt);
			IntPtr native_Amt = JNIEnv.NewArray (Amt);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [4];
				__args [0] = new JniArgumentValue (native_FormatedAmt);
				__args [1] = new JniArgumentValue (native_Amt);
				__args [2] = new JniArgumentValue (Sign);
				__args [3] = new JniArgumentValue (Width);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				if (FormatedAmt != null) {
					JNIEnv.CopyArray (native_FormatedAmt, FormatedAmt);
					JNIEnv.DeleteLocalRef (native_FormatedAmt);
				}
				if (Amt != null) {
					JNIEnv.CopyArray (native_Amt, Amt);
					JNIEnv.DeleteLocalRef (native_Amt);
				}
				global::System.GC.KeepAlive (FormatedAmt);
				global::System.GC.KeepAlive (Amt);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='Itwell']/method[@name='Hex2Bin' and count(parameter)=1 and parameter[1][@type='int']]"
		[Register ("Hex2Bin", "(I)I", "")]
		public static unsafe int Hex2Bin (int c)
		{
			const string __id = "Hex2Bin.(I)I";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (c);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='Itwell']/method[@name='IntToBcd' and count(parameter)=3 and parameter[1][@type='byte[]'] and parameter[2][@type='int'] and parameter[3][@type='int']]"
		[Register ("IntToBcd", "([BII)I", "")]
		public static unsafe int IntToBcd (byte[]? sBcdBuf, int iSrcValue, int iBcdLen)
		{
			const string __id = "IntToBcd.([BII)I";
			IntPtr native_sBcdBuf = JNIEnv.NewArray (sBcdBuf);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (native_sBcdBuf);
				__args [1] = new JniArgumentValue (iSrcValue);
				__args [2] = new JniArgumentValue (iBcdLen);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (sBcdBuf != null) {
					JNIEnv.CopyArray (native_sBcdBuf, sBcdBuf);
					JNIEnv.DeleteLocalRef (native_sBcdBuf);
				}
				global::System.GC.KeepAlive (sBcdBuf);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='Itwell']/method[@name='ModemParamDown' and count(parameter)=2 and parameter[1][@type='byte[]'] and parameter[2][@type='int']]"
		[global::System.Obsolete (@"deprecated")]
		[Register ("ModemParamDown", "([BI)V", "")]
		public static unsafe void ModemParamDown (byte[]? Param, int Plen)
		{
			const string __id = "ModemParamDown.([BI)V";
			IntPtr native_Param = JNIEnv.NewArray (Param);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_Param);
				__args [1] = new JniArgumentValue (Plen);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				if (Param != null) {
					JNIEnv.CopyArray (native_Param, Param);
					JNIEnv.DeleteLocalRef (native_Param);
				}
				global::System.GC.KeepAlive (Param);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='Itwell']/method[@name='PrintFormat' and count(parameter)=3 and parameter[1][@type='java.lang.String'] and parameter[2][@type='byte[]'] and parameter[3][@type='int']]"
		[global::System.Obsolete (@"deprecated")]
		[Register ("PrintFormat", "(Ljava/lang/String;[BI)V", "")]
		public static unsafe void PrintFormat (string? Prompt, byte[]? Src, int Len)
		{
			const string __id = "PrintFormat.(Ljava/lang/String;[BI)V";
			IntPtr native_Prompt = JNIEnv.NewString ((string?)Prompt);
			IntPtr native_Src = JNIEnv.NewArray (Src);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (native_Prompt);
				__args [1] = new JniArgumentValue (native_Src);
				__args [2] = new JniArgumentValue (Len);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				JNIEnv.DeleteLocalRef (native_Prompt);
				if (Src != null) {
					JNIEnv.CopyArray (native_Src, Src);
					JNIEnv.DeleteLocalRef (native_Src);
				}
				global::System.GC.KeepAlive (Src);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='Itwell']/method[@name='ProFastKey_Api' and count(parameter)=1 and parameter[1][@type='int']]"
		[global::System.Obsolete (@"deprecated")]
		[Register ("ProFastKey_Api", "(I)I", "")]
		public static unsafe int ProFastKey_Api (int TimerOuts)
		{
			const string __id = "ProFastKey_Api.(I)I";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (TimerOuts);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='Itwell']/method[@name='RcvFileSysOrder' and count(parameter)=0]"
		[global::System.Obsolete (@"deprecated")]
		[Register ("RcvFileSysOrder", "()I", "")]
		public static unsafe int RcvFileSysOrder ()
		{
			const string __id = "RcvFileSysOrder.()I";
			try {
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, null);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='Itwell']/method[@name='ReadPosNo' and count(parameter)=1 and parameter[1][@type='byte[]']]"
		[global::System.Obsolete (@"deprecated")]
		[Register ("ReadPosNo", "([B)I", "")]
		public static unsafe int ReadPosNo (byte[]? posno)
		{
			const string __id = "ReadPosNo.([B)I";
			IntPtr native_posno = JNIEnv.NewArray (posno);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_posno);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (posno != null) {
					JNIEnv.CopyArray (native_posno, posno);
					JNIEnv.DeleteLocalRef (native_posno);
				}
				global::System.GC.KeepAlive (posno);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='Itwell']/method[@name='RemoveField' and count(parameter)=2 and parameter[1][@type='int'] and parameter[2][@type='byte[]']]"
		[Register ("RemoveField", "(I[B)V", "")]
		public static unsafe void RemoveField (int ucFieldNo, byte[]? Bitmap)
		{
			const string __id = "RemoveField.(I[B)V";
			IntPtr native_Bitmap = JNIEnv.NewArray (Bitmap);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (ucFieldNo);
				__args [1] = new JniArgumentValue (native_Bitmap);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				if (Bitmap != null) {
					JNIEnv.CopyArray (native_Bitmap, Bitmap);
					JNIEnv.DeleteLocalRef (native_Bitmap);
				}
				global::System.GC.KeepAlive (Bitmap);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='Itwell']/method[@name='SetMagRecvTime' and count(parameter)=1 and parameter[1][@type='int']]"
		[global::System.Obsolete (@"deprecated")]
		[Register ("SetMagRecvTime", "(I)V", "")]
		public static unsafe void SetMagRecvTime (int Time)
		{
			const string __id = "SetMagRecvTime.(I)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (Time);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='Itwell']/method[@name='U8ToBcd_ITWELL' and count(parameter)=2 and parameter[1][@type='byte[]'] and parameter[2][@type='int']]"
		[Register ("U8ToBcd_ITWELL", "([BI)V", "")]
		public static unsafe void U8ToBcd_ITWELL (byte[]? Bcd, int Src)
		{
			const string __id = "U8ToBcd_ITWELL.([BI)V";
			IntPtr native_Bcd = JNIEnv.NewArray (Bcd);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_Bcd);
				__args [1] = new JniArgumentValue (Src);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				if (Bcd != null) {
					JNIEnv.CopyArray (native_Bcd, Bcd);
					JNIEnv.DeleteLocalRef (native_Bcd);
				}
				global::System.GC.KeepAlive (Bcd);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='Itwell']/method[@name='aabcd_to_asc' and count(parameter)=1 and parameter[1][@type='byte']]"
		[Register ("aabcd_to_asc", "(B)B", "")]
		public static unsafe sbyte Aabcd_to_asc (sbyte ucBcd)
		{
			const string __id = "aabcd_to_asc.(B)B";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (ucBcd);
				var __rm = _members.StaticMethods.InvokeSByteMethod (__id, __args);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='Itwell']/method[@name='copyData' and count(parameter)=4 and parameter[1][@type='byte[]'] and parameter[2][@type='byte[]'] and parameter[3][@type='int'] and parameter[4][@type='int']]"
		[Register ("copyData", "([B[BII)V", "")]
		public static unsafe void CopyData (byte[]? @in, byte[]? @out, int flag, int len)
		{
			const string __id = "copyData.([B[BII)V";
			IntPtr native__in = JNIEnv.NewArray (@in);
			IntPtr native__out = JNIEnv.NewArray (@out);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [4];
				__args [0] = new JniArgumentValue (native__in);
				__args [1] = new JniArgumentValue (native__out);
				__args [2] = new JniArgumentValue (flag);
				__args [3] = new JniArgumentValue (len);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				if (@in != null) {
					JNIEnv.CopyArray (native__in, @in);
					JNIEnv.DeleteLocalRef (native__in);
				}
				if (@out != null) {
					JNIEnv.CopyArray (native__out, @out);
					JNIEnv.DeleteLocalRef (native__out);
				}
				global::System.GC.KeepAlive (@in);
				global::System.GC.KeepAlive (@out);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='Itwell']/method[@name='format_amt' and count(parameter)=3 and parameter[1][@type='byte[]'] and parameter[2][@type='int'] and parameter[3][@type='int']]"
		[Register ("format_amt", "([BII)V", "")]
		public static unsafe void Format_amt (byte[]? Buf, int Amt, int Sign)
		{
			const string __id = "format_amt.([BII)V";
			IntPtr native_Buf = JNIEnv.NewArray (Buf);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (native_Buf);
				__args [1] = new JniArgumentValue (Amt);
				__args [2] = new JniArgumentValue (Sign);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				if (Buf != null) {
					JNIEnv.CopyArray (native_Buf, Buf);
					JNIEnv.DeleteLocalRef (native_Buf);
				}
				global::System.GC.KeepAlive (Buf);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='Itwell']/method[@name='map_test' and count(parameter)=2 and parameter[1][@type='byte[]'] and parameter[2][@type='int']]"
		[Register ("map_test", "([BI)I", "")]
		public static unsafe int Map_test (byte[]? Bitmap, int BitNo)
		{
			const string __id = "map_test.([BI)I";
			IntPtr native_Bitmap = JNIEnv.NewArray (Bitmap);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_Bitmap);
				__args [1] = new JniArgumentValue (BitNo);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (Bitmap != null) {
					JNIEnv.CopyArray (native_Bitmap, Bitmap);
					JNIEnv.DeleteLocalRef (native_Bitmap);
				}
				global::System.GC.KeepAlive (Bitmap);
			}
		}

	}
}
