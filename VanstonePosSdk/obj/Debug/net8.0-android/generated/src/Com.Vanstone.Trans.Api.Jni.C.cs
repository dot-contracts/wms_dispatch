//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable restore
using System;
using System.Collections.Generic;
using Android.Runtime;
using Java.Interop;

namespace Com.Vanstone.Trans.Api.Jni {

	// Metadata.xml XPath class reference: path="/api/package[@name='com.vanstone.trans.api.jni']/class[@name='C']"
	[global::Android.Runtime.Register ("com/vanstone/trans/api/jni/C", DoNotGenerateAcw=true)]
	public partial class C : global::Java.Lang.Object {
		static readonly JniPeerMembers _members = new XAPeerMembers ("com/vanstone/trans/api/jni/C", typeof (C));

		internal static IntPtr class_ref {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		public override global::Java.Interop.JniPeerMembers JniPeerMembers {
			get { return _members; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override IntPtr ThresholdClass {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override global::System.Type ThresholdType {
			get { return _members.ManagedPeerType; }
		}

		protected C (IntPtr javaReference, JniHandleOwnership transfer) : base (javaReference, transfer)
		{
		}

		// Metadata.xml XPath constructor reference: path="/api/package[@name='com.vanstone.trans.api.jni']/class[@name='C']/constructor[@name='C' and count(parameter)=0]"
		[Register (".ctor", "()V", "")]
		public unsafe C () : base (IntPtr.Zero, JniHandleOwnership.DoNotTransfer)
		{
			const string __id = "()V";

			if (((global::Java.Lang.Object) this).Handle != IntPtr.Zero)
				return;

			try {
				var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), null);
				SetHandle (__r.Handle, JniHandleOwnership.TransferLocalRef);
				_members.InstanceMethods.FinishCreateInstance (__id, this, null);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api.jni']/class[@name='C']/method[@name='U16ToU8Arr' and count(parameter)=2 and parameter[1][@type='byte[]'] and parameter[2][@type='int']]"
		[Register ("U16ToU8Arr", "([BI)I", "")]
		public static unsafe int U16ToU8Arr (byte[]? U8Buf, int U16Num)
		{
			const string __id = "U16ToU8Arr.([BI)I";
			IntPtr native_U8Buf = JNIEnv.NewArray (U8Buf);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_U8Buf);
				__args [1] = new JniArgumentValue (U16Num);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (U8Buf != null) {
					JNIEnv.CopyArray (native_U8Buf, U8Buf);
					JNIEnv.DeleteLocalRef (native_U8Buf);
				}
				global::System.GC.KeepAlive (U8Buf);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api.jni']/class[@name='C']/method[@name='U32ToU8Arr' and count(parameter)=2 and parameter[1][@type='byte[]'] and parameter[2][@type='int']]"
		[Register ("U32ToU8Arr", "([BI)I", "")]
		public static unsafe int U32ToU8Arr (byte[]? U8Buf, int U32Num)
		{
			const string __id = "U32ToU8Arr.([BI)I";
			IntPtr native_U8Buf = JNIEnv.NewArray (U8Buf);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native_U8Buf);
				__args [1] = new JniArgumentValue (U32Num);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (U8Buf != null) {
					JNIEnv.CopyArray (native_U8Buf, U8Buf);
					JNIEnv.DeleteLocalRef (native_U8Buf);
				}
				global::System.GC.KeepAlive (U8Buf);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api.jni']/class[@name='C']/method[@name='U8ArrToU32' and count(parameter)=1 and parameter[1][@type='byte[]']]"
		[Register ("U8ArrToU32", "([B)I", "")]
		public static unsafe int U8ArrToU32 (byte[]? Buf)
		{
			const string __id = "U8ArrToU32.([B)I";
			IntPtr native_Buf = JNIEnv.NewArray (Buf);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_Buf);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (Buf != null) {
					JNIEnv.CopyArray (native_Buf, Buf);
					JNIEnv.DeleteLocalRef (native_Buf);
				}
				global::System.GC.KeepAlive (Buf);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api.jni']/class[@name='C']/method[@name='int2lArry' and count(parameter)=2 and parameter[1][@type='byte[]'] and parameter[2][@type='int']]"
		[Register ("int2lArry", "([BI)V", "")]
		public static unsafe void Int2lArry (byte[]? @out, int v)
		{
			const string __id = "int2lArry.([BI)V";
			IntPtr native__out = JNIEnv.NewArray (@out);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native__out);
				__args [1] = new JniArgumentValue (v);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				if (@out != null) {
					JNIEnv.CopyArray (native__out, @out);
					JNIEnv.DeleteLocalRef (native__out);
				}
				global::System.GC.KeepAlive (@out);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api.jni']/class[@name='C']/method[@name='lArry2int' and count(parameter)=1 and parameter[1][@type='byte[]']]"
		[Register ("lArry2int", "([B)I", "")]
		public static unsafe int LArry2int (byte[]? v)
		{
			const string __id = "lArry2int.([B)I";
			IntPtr native_v = JNIEnv.NewArray (v);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_v);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (v != null) {
					JNIEnv.CopyArray (native_v, v);
					JNIEnv.DeleteLocalRef (native_v);
				}
				global::System.GC.KeepAlive (v);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api.jni']/class[@name='C']/method[@name='lArry2short' and count(parameter)=1 and parameter[1][@type='byte[]']]"
		[Register ("lArry2short", "([B)S", "")]
		public static unsafe short LArry2short (byte[]? v)
		{
			const string __id = "lArry2short.([B)S";
			IntPtr native_v = JNIEnv.NewArray (v);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_v);
				var __rm = _members.StaticMethods.InvokeInt16Method (__id, __args);
				return __rm;
			} finally {
				if (v != null) {
					JNIEnv.CopyArray (native_v, v);
					JNIEnv.DeleteLocalRef (native_v);
				}
				global::System.GC.KeepAlive (v);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api.jni']/class[@name='C']/method[@name='s8' and count(parameter)=1 and parameter[1][@type='byte']]"
		[Register ("s8", "(B)I", "")]
		public static unsafe int S8 (sbyte v)
		{
			const string __id = "s8.(B)I";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (v);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api.jni']/class[@name='C']/method[@name='short2lArry' and count(parameter)=2 and parameter[1][@type='byte[]'] and parameter[2][@type='short']]"
		[Register ("short2lArry", "([BS)V", "")]
		public static unsafe void Short2lArry (byte[]? @out, short v)
		{
			const string __id = "short2lArry.([BS)V";
			IntPtr native__out = JNIEnv.NewArray (@out);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (native__out);
				__args [1] = new JniArgumentValue (v);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
				if (@out != null) {
					JNIEnv.CopyArray (native__out, @out);
					JNIEnv.DeleteLocalRef (native__out);
				}
				global::System.GC.KeepAlive (@out);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api.jni']/class[@name='C']/method[@name='sizeof' and count(parameter)=1 and parameter[1][@type='byte[]']]"
		[Register ("sizeof", "([B)I", "")]
		public static unsafe int Sizeof (byte[]? buf)
		{
			const string __id = "sizeof.([B)I";
			IntPtr native_buf = JNIEnv.NewArray (buf);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (native_buf);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				if (buf != null) {
					JNIEnv.CopyArray (native_buf, buf);
					JNIEnv.DeleteLocalRef (native_buf);
				}
				global::System.GC.KeepAlive (buf);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api.jni']/class[@name='C']/method[@name='u8' and count(parameter)=1 and parameter[1][@type='byte']]"
		[Register ("u8", "(B)I", "")]
		public static unsafe int U8 (sbyte v)
		{
			const string __id = "u8.(B)I";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (v);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
			}
		}

	}
}
