//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#nullable restore
using System;
using System.Collections.Generic;
using Android.Runtime;
using Java.Interop;

namespace Com.Vanstone.Trans.Api {

	// Metadata.xml XPath class reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='SignApi']"
	[global::Android.Runtime.Register ("com/vanstone/trans/api/SignApi", DoNotGenerateAcw=true)]
	public partial class SignApi : global::Java.Lang.Object {
		static readonly JniPeerMembers _members = new XAPeerMembers ("com/vanstone/trans/api/SignApi", typeof (SignApi));

		internal static IntPtr class_ref {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		public override global::Java.Interop.JniPeerMembers JniPeerMembers {
			get { return _members; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override IntPtr ThresholdClass {
			get { return _members.JniPeerType.PeerReference.Handle; }
		}

		[global::System.Diagnostics.DebuggerBrowsable (global::System.Diagnostics.DebuggerBrowsableState.Never)]
		[global::System.ComponentModel.EditorBrowsable (global::System.ComponentModel.EditorBrowsableState.Never)]
		protected override global::System.Type ThresholdType {
			get { return _members.ManagedPeerType; }
		}

		protected SignApi (IntPtr javaReference, JniHandleOwnership transfer) : base (javaReference, transfer)
		{
		}

		// Metadata.xml XPath constructor reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='SignApi']/constructor[@name='SignApi' and count(parameter)=0]"
		[Register (".ctor", "()V", "")]
		public unsafe SignApi () : base (IntPtr.Zero, JniHandleOwnership.DoNotTransfer)
		{
			const string __id = "()V";

			if (((global::Java.Lang.Object) this).Handle != IntPtr.Zero)
				return;

			try {
				var __r = _members.InstanceMethods.StartCreateInstance (__id, ((object) this).GetType (), null);
				SetHandle (__r.Handle, JniHandleOwnership.TransferLocalRef);
				_members.InstanceMethods.FinishCreateInstance (__id, this, null);
			} finally {
			}
		}

		public static unsafe global::Android.Graphics.Bitmap? SignBmp_Api {
			// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='SignApi']/method[@name='getSignBmp_Api' and count(parameter)=0]"
			[Register ("getSignBmp_Api", "()Landroid/graphics/Bitmap;", "")]
			get {
				const string __id = "getSignBmp_Api.()Landroid/graphics/Bitmap;";
				try {
					var __rm = _members.StaticMethods.InvokeObjectMethod (__id, null);
					return global::Java.Lang.Object.GetObject<global::Android.Graphics.Bitmap> (__rm.Handle, JniHandleOwnership.TransferLocalRef);
				} finally {
				}
			}
		}

		public static unsafe int SignatureLength_Api {
			// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='SignApi']/method[@name='getSignatureLength_Api' and count(parameter)=0]"
			[Register ("getSignatureLength_Api", "()I", "")]
			get {
				const string __id = "getSignatureLength_Api.()I";
				try {
					var __rm = _members.StaticMethods.InvokeInt32Method (__id, null);
					return __rm;
				} finally {
				}
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='SignApi']/method[@name='getSignatureCompressData_Api' and count(parameter)=0]"
		[Register ("getSignatureCompressData_Api", "()[B", "")]
		public static unsafe byte[]? GetSignatureCompressData_Api ()
		{
			const string __id = "getSignatureCompressData_Api.()[B";
			try {
				var __rm = _members.StaticMethods.InvokeObjectMethod (__id, null);
				return (byte[]?) JNIEnv.GetArray (__rm.Handle, JniHandleOwnership.TransferLocalRef, typeof (byte));
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='SignApi']/method[@name='isToastConfirm' and count(parameter)=1 and parameter[1][@type='boolean']]"
		[Register ("isToastConfirm", "(Z)V", "")]
		public static unsafe void IsToastConfirm (bool isToast)
		{
			const string __id = "isToastConfirm.(Z)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (isToast);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='SignApi']/method[@name='setResignCount' and count(parameter)=1 and parameter[1][@type='int']]"
		[Register ("setResignCount", "(I)V", "")]
		public static unsafe void SetResignCount (int count)
		{
			const string __id = "setResignCount.(I)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (count);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='SignApi']/method[@name='setSignBoardStyle' and count(parameter)=1 and parameter[1][@type='int']]"
		[Register ("setSignBoardStyle", "(I)V", "")]
		public static unsafe void SetSignBoardStyle (int signBoardStyle)
		{
			const string __id = "setSignBoardStyle.(I)V";
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [1];
				__args [0] = new JniArgumentValue (signBoardStyle);
				_members.StaticMethods.InvokeVoidMethod (__id, __args);
			} finally {
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='SignApi']/method[@name='startSign_Api' and count(parameter)=2 and parameter[1][@type='int'] and parameter[2][@type='java.lang.String']]"
		[Register ("startSign_Api", "(ILjava/lang/String;)I", "")]
		public static unsafe int StartSign_Api (int time, string? signcode)
		{
			const string __id = "startSign_Api.(ILjava/lang/String;)I";
			IntPtr native_signcode = JNIEnv.NewString ((string?)signcode);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [2];
				__args [0] = new JniArgumentValue (time);
				__args [1] = new JniArgumentValue (native_signcode);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				JNIEnv.DeleteLocalRef (native_signcode);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='SignApi']/method[@name='startSign_Api' and count(parameter)=3 and parameter[1][@type='int'] and parameter[2][@type='java.lang.String'] and parameter[3][@type='com.vanstone.sign.IStartSignListenner']]"
		[Register ("startSign_Api", "(ILjava/lang/String;Lcom/vanstone/sign/IStartSignListenner;)I", "")]
		public static unsafe int StartSign_Api (int time, string? signcode, global::Com.Vanstone.Sign.IStartSignListenner? iStartSignListenner)
		{
			const string __id = "startSign_Api.(ILjava/lang/String;Lcom/vanstone/sign/IStartSignListenner;)I";
			IntPtr native_signcode = JNIEnv.NewString ((string?)signcode);
			try {
				JniArgumentValue* __args = stackalloc JniArgumentValue [3];
				__args [0] = new JniArgumentValue (time);
				__args [1] = new JniArgumentValue (native_signcode);
				__args [2] = new JniArgumentValue ((iStartSignListenner == null) ? IntPtr.Zero : ((global::Java.Lang.Object) iStartSignListenner).Handle);
				var __rm = _members.StaticMethods.InvokeInt32Method (__id, __args);
				return __rm;
			} finally {
				JNIEnv.DeleteLocalRef (native_signcode);
				global::System.GC.KeepAlive (iStartSignListenner);
			}
		}

		// Metadata.xml XPath method reference: path="/api/package[@name='com.vanstone.trans.api']/class[@name='SignApi']/method[@name='stopSign_Api' and count(parameter)=0]"
		[Register ("stopSign_Api", "()V", "")]
		public static unsafe void StopSign_Api ()
		{
			const string __id = "stopSign_Api.()V";
			try {
				_members.StaticMethods.InvokeVoidMethod (__id, null);
			} finally {
			}
		}

	}
}
