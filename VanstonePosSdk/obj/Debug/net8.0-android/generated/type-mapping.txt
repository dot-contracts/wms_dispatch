com/vanstone/appsdk/api/authface/AuthFaceHandler = Com.Vanstone.Appsdk.Api.Authface.IAuthFaceHandler
  FaceGetFirmwareInfo_Api()Landroid/os/Bundle; = FaceGetFirmwareInfo_Api()
  FaceGetParam_Api()Landroid/os/Bundle; = FaceGetParam_Api()
  FaceSetParam_Api(Landroid/os/Bundle;)V = FaceSetParam_Api(Android.OS.Bundle)
  FaceStartDetect_Api(Landroid/os/Bundle;Lcom/vanstone/appsdk/api/interfaces/IFaceDetecResult;)V = FaceStartDetect_Api(Android.OS.Bundle, Com.Vanstone.Appsdk.Api.Interfaces.IFaceDetecResult)
  FaceStopDetect_Api()V = FaceStopDetect_Api()
com/vanstone/appsdk/api/cards/At24cXXHandler = Com.Vanstone.Appsdk.Api.Cards.IAt24cXXHandler
  checkType_Api()I = CheckType_Api()
  close_Api()I = Close_Api()
  open_Api()I = Open_Api()
  read_Api(I[BI)I = Read_Api(int, byte[], int)
  write_Api(I[BI)I = Write_Api(int, byte[], int)
com/vanstone/appsdk/api/cards/At88scXXHandler = Com.Vanstone.Appsdk.Api.Cards.IAt88scXXHandler
  EarseEzData_Api(III)I = EarseEzData_Api(int, int, int)
  Get1608ConfigZoneData(II[B)I = Get1608ConfigZoneData(int, int, byte[])
  GetEzKey(II[B)I = GetEzKey(int, int, byte[])
  icc102CheckCardType_Api([B)I = Icc102CheckCardType_Api(byte[])
  icc102ReadAppArea_Api(III[B)I = Icc102ReadAppArea_Api(int, int, int, byte[])
  icc102ReadCodeProtectedBlock_Api(II[B)I = Icc102ReadCodeProtectedBlock_Api(int, int, byte[])
  icc102ReadErrorCountBlock_Api([B)I = Icc102ReadErrorCountBlock_Api(byte[])
  icc102ReadMfrsLoneCode_Api()[B = Icc102ReadMfrsLoneCode_Api()
  icc102ReadMfrsShortCode_Api()[B = Icc102ReadMfrsShortCode_Api()
  icc102ReadPwdErrorCount_Api()I = Icc102ReadPwdErrorCount_Api()
  icc102ReadTestBlock_Api()[B = Icc102ReadTestBlock_Api()
  icc102UpdatePwd_Api([B)I = Icc102UpdatePwd_Api(byte[])
  icc102VerifyPwd_Api([B)I = Icc102VerifyPwd_Api(byte[])
  icc102WriteAppArea_Api(BB[B)I = Icc102WriteAppArea_Api(sbyte, sbyte, byte[])
  icc102WriteCardMfrsData_Api([B)I = Icc102WriteCardMfrsData_Api(byte[])
  icc102WriteCodeProtectedBlock_Api(II[B)I = Icc102WriteCodeProtectedBlock_Api(int, int, byte[])
  icc102WriteTestBlock_Api([B)I = Icc102WriteTestBlock_Api(byte[])
  icc1608Certify_Api()I = Icc1608Certify_Api()
  icc1608CheckCardType_Api([B)I = Icc1608CheckCardType_Api(byte[])
  icc1608Read_Api(BB[B)I = Icc1608Read_Api(sbyte, sbyte, byte[])
  icc1608SelectUserArea_Api(B)I = Icc1608SelectUserArea_Api(sbyte)
  icc1608VerifyKey_Api(B[BB)I = Icc1608VerifyKey_Api(sbyte, byte[], sbyte)
  icc1608Write(BB[B)I = Icc1608Write(sbyte, sbyte, byte[])
  IccDetect_Api(I)I = IccDetect_Api(int)
  powerDown_Api()I = PowerDown_Api()
  powerOn_Api()I = PowerOn_Api()
  Verify102EzKey_Api(II[B)I = Verify102EzKey_Api(int, int, byte[])
com/vanstone/appsdk/api/cards/ContactlessHandler = Com.Vanstone.Appsdk.Api.Cards.IContactlessHandler
  cardAAnticollision_Api([B[I)I = CardAAnticollision_Api(byte[], int[])
  cardADeselect_Api()I = CardADeselect_Api()
  cardAPause_Api()I = CardAPause_Api()
  cardARats_Api(I[B)I = CardARats_Api(int, byte[])
  cardAReq_Api([B)I = CardAReq_Api(byte[])
  cardAWakeUp_Api([B)I = CardAWakeUp_Api(byte[])
  closeField_Api()I = CloseField_Api()
  M1Decrement_Api(II)I = M1Decrement_Api(int, int)
  M1Increment_Api(II)I = M1Increment_Api(int, int)
  M1Restore_Api(I)I = M1Restore_Api(int)
  M1Transfer_Api(I)I = M1Transfer_Api(int)
  openField_Api()I = OpenField_Api()
  readSecurityMem_Api(I[BI)I = ReadSecurityMem_Api(int, byte[], int)
  writeSecurityMem_Api(I[BI)I = WriteSecurityMem_Api(int, byte[], int)
com/vanstone/appsdk/api/cards/DesfireHandler = Com.Vanstone.Appsdk.Api.Cards.IDesfireHandler
  DesfireAbortTransaction_Api()I = DesfireAbortTransaction_Api()
  DesfireAuth_Api(I[B)I = DesfireAuth_Api(int, byte[])
  DesfireAuthAes_Api(I[B)I = DesfireAuthAes_Api(int, byte[])
  DesfireAuthIso_Api(I[B)I = DesfireAuthIso_Api(int, byte[])
  DesfireCardCheck_Api(I[B[B)I = DesfireCardCheck_Api(int, byte[], byte[])
  DesfireCardClose_Api()I = DesfireCardClose_Api()
  DesfireCardOpen_Api()I = DesfireCardOpen_Api()
  DesfireChangeAppKey_Api(III[B[BI)I = DesfireChangeAppKey_Api(int, int, int, byte[], byte[], int)
  DesfireChangeFileSettings_Api(IIIIIII)I = DesfireChangeFileSettings_Api(int, int, int, int, int, int, int)
  DesfireChangeKeySetting_Api(I)I = DesfireChangeKeySetting_Api(int)
  DesfireChangePiccMkey_Api(I[BI)I = DesfireChangePiccMkey_Api(int, byte[], int)
  DesfireClearRecordFile_Api(I)I = DesfireClearRecordFile_Api(int)
  DesfireCommitTransaction_Api()I = DesfireCommitTransaction_Api()
  DesfireCreateApp_Api(Landroid/os/Bundle;)I = DesfireCreateApp_Api(Android.OS.Bundle)
  DesfireCreateBackupFile_Api(ILandroid/os/Bundle;)I = DesfireCreateBackupFile_Api(int, Android.OS.Bundle)
  DesfireCreateCyclicrecordFile_Api(ILandroid/os/Bundle;)I = DesfireCreateCyclicrecordFile_Api(int, Android.OS.Bundle)
  DesfireCreateRecordFile_Api(ILandroid/os/Bundle;)I = DesfireCreateRecordFile_Api(int, Android.OS.Bundle)
  DesfireCreateStdFile_Api(ILandroid/os/Bundle;)I = DesfireCreateStdFile_Api(int, Android.OS.Bundle)
  DesfireCreateValueFile_Api(ILandroid/os/Bundle;)I = DesfireCreateValueFile_Api(int, Android.OS.Bundle)
  DesfireCreditValueFile_Api(III)I = DesfireCreditValueFile_Api(int, int, int)
  DesfireDebitValueFile_Api(III)I = DesfireDebitValueFile_Api(int, int, int)
  DesfireDeleteApp_Api([B)I = DesfireDeleteApp_Api(byte[])
  DesfireDeleteFile_Api(I)I = DesfireDeleteFile_Api(int)
  DesfireFormatPicc_Api()I = DesfireFormatPicc_Api()
  DesfireGetAppIds_Api([B)I = DesfireGetAppIds_Api(byte[])
  DesfireGetDFNameInfoList_Api()Ljava/util/List; = DesfireGetDFNameInfoList_Api()
  DesfireGetFileIds_Api([B)I = DesfireGetFileIds_Api(byte[])
  DesfireGetFileSetting_Api(I)Landroid/os/Bundle; = DesfireGetFileSetting_Api(int)
  DesfireGetFreeMemory_Api()I = DesfireGetFreeMemory_Api()
  DesfireGetIsoFIDs_Api([B)I = DesfireGetIsoFIDs_Api(byte[])
  DesfireGetKeySetting_Api([B)I = DesfireGetKeySetting_Api(byte[])
  DesfireGetKeyVersion_Api(I[B)I = DesfireGetKeyVersion_Api(int, byte[])
  DesfireGetUid_Api([B)I = DesfireGetUid_Api(byte[])
  DesfireGetValue_Api(II[I)I = DesfireGetValue_Api(int, int, int[])
  DesfireGetVersion_Api()Landroid/os/Bundle; = DesfireGetVersion_Api()
  DesfireLimitedCreditValue_Api(III)I = DesfireLimitedCreditValue_Api(int, int, int)
  DesfireReadData_Api(CIII[B)I = DesfireReadData_Api(char, int, int, int, byte[])
  DesfireReadRecord_Api(IIIII[B)I = DesfireReadRecord_Api(int, int, int, int, int, byte[])
  DesfireSelectApp_Api([B)I = DesfireSelectApp_Api(byte[])
  DesfireWriteCrecord_Api(IIII[B)I = DesfireWriteCrecord_Api(int, int, int, int, byte[])
  DesfireWriteData_Api(IIII[B)I = DesfireWriteData_Api(int, int, int, int, byte[])
com/vanstone/appsdk/api/cards/ICHandler = Com.Vanstone.Appsdk.Api.Cards.ICHandler
  IcCardSetAutoResp(II)I = IcCardSetAutoResp(int, int)
  IccDetect_Api(I)I = IccDetect_Api(int)
  IccDetectOut_Api(I)I = IccDetectOut_Api(int)
  IccGetCardType_Api()I = IccGetCardType_Api()
  IccInit_Api(II[B[B)I = IccInit_Api(int, int, byte[], byte[])
  IccIsoCommand_Api(ILcom/vanstone/appsdk/api/struct/Apdu;)V = IccIsoCommand_Api(int, Com.Vanstone.Appsdk.Api.Struct.Apdu)
  IccPowerOff_Api(I)V = IccPowerOff_Api(int)
  Mem4442IccGetPwdCount_Api([BI)I = Mem4442IccGetPwdCount_Api(byte[], int)
  MemIccCheck_Api(BBI[BI)I = MemIccCheck_Api(sbyte, sbyte, int, byte[], int)
  MemIccPowerOff_Api(BB)I = MemIccPowerOff_Api(sbyte, sbyte)
  MemIccPowerOn_Api(BB)I = MemIccPowerOn_Api(sbyte, sbyte)
  MemIccPwdProc_Api(BBI[B[B[BI)I = MemIccPwdProc_Api(sbyte, sbyte, int, byte[], byte[], byte[], int)
  MemIccReadData_Api(BBII[BI)I = MemIccReadData_Api(sbyte, sbyte, int, int, byte[], int)
  MemIccWriteData_Api(BB[BII[BI)I = MemIccWriteData_Api(sbyte, sbyte, byte[], int, int, byte[], int)
com/vanstone/appsdk/api/cards/MAGHandler = Com.Vanstone.Appsdk.Api.Cards.IMAGHandler
  getTrackData_Api(I)[B = GetTrackData_Api(int)
  MagClose_Api()I = MagClose_Api()
  MagGetTradCode_Api(I)I = MagGetTradCode_Api(int)
  MagOpen_Api()I = MagOpen_Api()
  MagRead_Api([B[B)I = MagRead_Api(byte[], byte[])
  MagReset_Api()V = MagReset_Api()
  MagSetCheckLrc_Api(Z)I = MagSetCheckLrc_Api(bool)
  MagSwiped_Api()I = MagSwiped_Api()
com/vanstone/appsdk/api/cards/MemCardHandler = Com.Vanstone.Appsdk.Api.Cards.IMemCardHandler
  sle4428Close_Api()I = Sle4428Close_Api()
  sle4428Open_Api(I[B)I = Sle4428Open_Api(int, byte[])
  sle4428ReadNoProtect_Api(I[BI)I = Sle4428ReadNoProtect_Api(int, byte[], int)
  sle4428VerifyKey_Api(BB)I = Sle4428VerifyKey_Api(sbyte, sbyte)
  sle4428WriteAndCompareProtect_Api(I[BIB)I = Sle4428WriteAndCompareProtect_Api(int, byte[], int, sbyte)
  sle4428WriteNoProtect_Api(I[BI)I = Sle4428WriteNoProtect_Api(int, byte[], int)
  sle4442Close_Api()I = Sle4442Close_Api()
  sle4442ModifyKey_Api([B[B)I = Sle4442ModifyKey_Api(byte[], byte[])
  sle4442Open_Api(I[B)I = Sle4442Open_Api(int, byte[])
  sle4442Read_Api(BB[BI)I = Sle4442Read_Api(sbyte, sbyte, byte[], int)
  sle4442RemainCheckTime_Api()I = Sle4442RemainCheckTime_Api()
  sle4442Verify_Api([B)I = Sle4442Verify_Api(byte[])
  sle4442Write_Api(BB[BI)I = Sle4442Write_Api(sbyte, sbyte, byte[], int)
com/vanstone/appsdk/api/cards/PICCHandler = Com.Vanstone.Appsdk.Api.Cards.IPICCHandler
  getIDCardImage()Landroid/graphics/Bitmap; = IDCardImage
  CommCardCommand_Api([BI[B)I = CommCardCommand_Api(byte[], int, byte[])
  getIDCardMsg([B[B[B[B[B[B[B[B[B[B[B[B)I = GetIDCardMsg(byte[], byte[], byte[], byte[], byte[], byte[], byte[], byte[], byte[], byte[], byte[], byte[])
  M1Authority_Api(II[B)I = M1Authority_Api(int, int, byte[])
  M1DecreaseValue_Api(III)I = M1DecreaseValue_Api(int, int, int)
  M1IncreaseValue_Api(III)I = M1IncreaseValue_Api(int, int, int)
  M1ReadBlock_Api(I[B)I = M1ReadBlock_Api(int, byte[])
  M1WriteBlock_Api(I[B)I = M1WriteBlock_Api(int, byte[])
  NFCListenStart_Api()I = NFCListenStart_Api()
  NFCListenStop_Api()I = NFCListenStop_Api()
  NFCPowerControl_Api(Z)I = NFCPowerControl_Api(bool)
  NFCReadUriInfo_Api([B[B[B)I = NFCReadUriInfo_Api(byte[], byte[], byte[])
  NFCWriteUriInfo_Api([B[B[B)I = NFCWriteUriInfo_Api(byte[], byte[], byte[])
  NTAGAuthority_Api([B[B)I = NTAGAuthority_Api(byte[], byte[])
  NTAGFastReadData_Api(II[B)I = NTAGFastReadData_Api(int, int, byte[])
  NTAGGetCardInfo_Api()Landroid/os/Bundle; = NTAGGetCardInfo_Api()
  NTAGReadCount_Api([B)I = NTAGReadCount_Api(byte[])
  NTAGReadData_Api(I[B)I = NTAGReadData_Api(int, byte[])
  NTAGReadSign_Api([B)I = NTAGReadSign_Api(byte[])
  NTAGWriteData_Api(I[B)I = NTAGWriteData_Api(int, byte[])
  PiccCheck_Api(I[B[B)I = PiccCheck_Api(int, byte[], byte[])
  PiccClose_Api()I = PiccClose_Api()
  PiccGetCardInfo_Api([B[B[B[B)I = PiccGetCardInfo_Api(byte[], byte[], byte[], byte[])
  PiccHalt_Api()I = PiccHalt_Api()
  PiccIsoCommand_Api(Lcom/vanstone/appsdk/api/struct/Apdu;)V = PiccIsoCommand_Api(Com.Vanstone.Appsdk.Api.Struct.Apdu)
  PiccIsoCommandType_Api(I[BI[B)I = PiccIsoCommandType_Api(int, byte[], int, byte[])
  PiccOpen_Api()I = PiccOpen_Api()
  PiccRemove_Api()I = PiccRemove_Api()
  PiccRest_Api(I[B)I = PiccRest_Api(int, byte[])
  SidCardCommand_Api([BI[B)I = SidCardCommand_Api(byte[], int, byte[])
com/vanstone/appsdk/api/cashboxdriver/CashBoxHandler = Com.Vanstone.Appsdk.Api.Cashboxdriver.ICashBoxHandler
  CashBoxOpen_Api()I = CashBoxOpen_Api()
com/vanstone/appsdk/api/common/ApnHandler = Com.Vanstone.Appsdk.Api.Common.IApnHandler
  getAllApnList()Ljava/util/List; = AllApnList
  getPreferApn_Api()Lcom/vanstone/appsdk/api/struct/ApnInfo; = PreferApn_Api
  AddApn_Api(Lcom/vanstone/appsdk/api/struct/ApnInfo;)I = AddApn_Api(Com.Vanstone.Appsdk.Api.Struct.ApnInfo)
  ApnOpen()I = ApnOpen()
  DeleteApn(Ljava/lang/String;Ljava/lang/String;)I = DeleteApn(string, string)
  DeleteApn_Api(I)Z = DeleteApn_Api(int)
  getGprsAPNId(Ljava/lang/String;Ljava/lang/String;)Z = GetGprsAPNId(string, string)
  SelectedApn_Api(Ljava/lang/String;)I = SelectedApn_Api(string)
  setDefaultApn(I)I = SetDefaultApn(int)
  updateGprsAPN(Ljava/lang/String;Lcom/vanstone/appsdk/api/struct/ApnInfo;)I = UpdateGprsAPN(string, Com.Vanstone.Appsdk.Api.Struct.ApnInfo)
com/vanstone/appsdk/api/common/CommHandler = Com.Vanstone.Appsdk.Api.Common.ICommHandler
  addApn(Landroid/content/ContentValues;Lcom/vanstone/appsdk/api/interfaces/IAPNOperSer;)V = AddApn(Android.Content.ContentValues, Com.Vanstone.Appsdk.Api.Interfaces.IAPNOperSer)
  EthernetClose(Lcom/vanstone/appsdk/api/interfaces/IEthernetOperSer;)V = EthernetClose(Com.Vanstone.Appsdk.Api.Interfaces.IEthernetOperSer)
  EthernetGetIpConfig(Lcom/vanstone/appsdk/api/interfaces/IEthernetOperSer;)V = EthernetGetIpConfig(Com.Vanstone.Appsdk.Api.Interfaces.IEthernetOperSer)
  EthernetOpen(Lcom/vanstone/appsdk/api/interfaces/IEthernetOperSer;)V = EthernetOpen(Com.Vanstone.Appsdk.Api.Interfaces.IEthernetOperSer)
  EthernetSaveDhcpConfig(Lcom/vanstone/appsdk/api/interfaces/IEthernetOperSer;)V = EthernetSaveDhcpConfig(Com.Vanstone.Appsdk.Api.Interfaces.IEthernetOperSer)
  EthernetSaveStaticConfig(Lcom/vanstone/appsdk/api/interfaces/IEthernetOperSer;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V = EthernetSaveStaticConfig(Com.Vanstone.Appsdk.Api.Interfaces.IEthernetOperSer, string, string, string, string)
  openGPRS(Z)V = OpenGPRS(bool)
com/vanstone/appsdk/api/devinform/DevinformHandler = Com.Vanstone.Appsdk.Api.Devinform.IDevinformHandler
  DevInfoGetAndroidKernelVersion_Api()Ljava/lang/String; = DevInfoGetAndroidKernelVersion_Api()
  DevInfoGetAndroidOSVersion_Api()Ljava/lang/String; = DevInfoGetAndroidOSVersion_Api()
  DevInfoGetFirmwareVersion_Api()Ljava/lang/String; = DevInfoGetFirmwareVersion_Api()
  DevInfoGetHardwareVersion_Api()Ljava/lang/String; = DevInfoGetHardwareVersion_Api()
  DevInfoGetICCID_Api()Ljava/lang/String; = DevInfoGetICCID_Api()
  DevInfoGetIMSI_Api()Ljava/lang/String; = DevInfoGetIMSI_Api()
  DevInfoGetManufacture_Api()Ljava/lang/String; = DevInfoGetManufacture_Api()
  DevInfoGetModel_Api()Ljava/lang/String; = DevInfoGetModel_Api()
  DevInfoGetROMVerion_Api()Ljava/lang/String; = DevInfoGetROMVerion_Api()
  DevInfogetSafeModuleVersion_Api()Ljava/lang/String; = DevInfogetSafeModuleVersion_Api()
  DevInfoGetSerialNo_Api()Ljava/lang/String; = DevInfoGetSerialNo_Api()
  DevInfoGetSETime_Api()J = DevInfoGetSETime_Api()
  DevInfoGetTUSN_Api()Ljava/lang/String; = DevInfoGetTUSN_Api()
  DevInfoUpdateSystemTime_Api(Ljava/lang/String;Ljava/lang/String;)Z = DevInfoUpdateSystemTime_Api(string, string)
com/vanstone/appsdk/api/engine/SdkApiEngine = Com.Vanstone.Appsdk.Api.Engine.ISdkApiEngine
  getApnHandler()Lcom/vanstone/appsdk/api/common/ApnHandler; = ApnHandler
  getAt24cXXHandler()Lcom/vanstone/appsdk/api/cards/At24cXXHandler; = At24cXXHandler
  getAt88scXXHandler()Lcom/vanstone/appsdk/api/cards/At88scXXHandler; = At88scXXHandler
  getAuthFaceHandler()Lcom/vanstone/appsdk/api/authface/AuthFaceHandler; = AuthFaceHandler
  getCashBoxHandler()Lcom/vanstone/appsdk/api/cashboxdriver/CashBoxHandler; = CashBoxHandler
  getCommHandler()Lcom/vanstone/appsdk/api/common/CommHandler; = CommHandler
  getContactlessHandler()Lcom/vanstone/appsdk/api/cards/ContactlessHandler; = ContactlessHandler
  getDesfireHandler()Lcom/vanstone/appsdk/api/cards/DesfireHandler; = DesfireHandler
  getDevinformHandler()Lcom/vanstone/appsdk/api/devinform/DevinformHandler; = DevinformHandler
  getFingerHandler()Lcom/vanstone/appsdk/api/finger/FingerHandler; = FingerHandler
  getFiscalHandler()Lcom/vanstone/appsdk/api/fiscal/FiscalHandler; = FiscalHandler
  getHsmHandler()Lcom/vanstone/appsdk/api/hsm/HsmHandler; = HsmHandler
  getIcHandler()Lcom/vanstone/appsdk/api/cards/ICHandler; = IcHandler
  getIDCardHandler()Lcom/vanstone/appsdk/api/idcard/IDCardHandler; = IDCardHandler
  getIRThermometerHandler()Lcom/vanstone/appsdk/api/IRThermometer/IRThermometerHandler; = IRThermometerHandler
  getLcdHandler()Lcom/vanstone/appsdk/api/lcd/LcdHandler; = LcdHandler
  getLocationHandler()Lcom/vanstone/appsdk/api/location/LocationHandler; = LocationHandler
  getMagHandler()Lcom/vanstone/appsdk/api/cards/MAGHandler; = MagHandler
  getMemCardHandler()Lcom/vanstone/appsdk/api/cards/MemCardHandler; = MemCardHandler
  getNLDeviceScanHandler()Lcom/vanstone/appsdk/api/NLDeviceScan/NLDeviceScanHandler; = NLDeviceScanHandler
  getNumKeyBoardHandler()Lcom/vanstone/appsdk/api/numkeyboard/NumKeyBoardHandler; = NumKeyBoardHandler
  getPedHandler()Lcom/vanstone/appsdk/api/ped/PedHandler; = PedHandler
  getPiccHandler()Lcom/vanstone/appsdk/api/cards/PICCHandler; = PiccHandler
  getPrinterHandler()Lcom/vanstone/appsdk/api/printer/PrinterHandler; = PrinterHandler
  getRs232Handler()Lcom/vanstone/appsdk/api/rs232/Rs232Handler; = Rs232Handler
  getScanExHandler()Lcom/vanstone/appsdk/api/scanEx/ScanExHandler; = ScanExHandler
  getScanHandler()Lcom/vanstone/appsdk/api/scan/ScanHandler; = ScanHandler
  getSerialPortHandler()Lcom/vanstone/appsdk/api/SerialPort/SerialPortHandler; = SerialPortHandler
  getSignHandler()Lcom/vanstone/appsdk/api/sign/SignHandler; = SignHandler
  getSmHandler()Lcom/vanstone/appsdk/api/sm/SmHandler; = SmHandler
  getSystemHandler()Lcom/vanstone/appsdk/api/system/SystemHandler; = SystemHandler
  getTaxControlHandle()Lcom/vanstone/appsdk/api/taxcontrol/TaxControlHandle; = TaxControlHandle
  getWifiProbeHandler()Lcom/vanstone/appsdk/api/wifiprobe/WIFIProbeHandler; = WifiProbeHandler
com/vanstone/appsdk/api/finger/FingerHandler = Com.Vanstone.Appsdk.Api.Finger.IFingerHandler
  FingerCheckIDTemplate_Api(I)I = FingerCheckIDTemplate_Api(int)
  FingerClearCache_Api()V = FingerClearCache_Api()
  FingerClose_Api()I = FingerClose_Api()
  FingerDelete_Api(I)I = FingerDelete_Api(int)
  FingerDeleteAll_Api()I = FingerDeleteAll_Api()
  FingerECharFType_Api(I[BI)I = FingerECharFType_Api(int, byte[], int)
  FingerEnterFp_Api(IIILcom/vanstone/appsdk/api/interfaces/IFingerEntryProcessAIDL;)I = FingerEnterFp_Api(int, int, int, Com.Vanstone.Appsdk.Api.Interfaces.IFingerEntryProcessAIDL)
  FingerEnterFType_Api(IIIILcom/vanstone/appsdk/api/interfaces/IFingerEntryProcessAIDL;)I = FingerEnterFType_Api(int, int, int, int, Com.Vanstone.Appsdk.Api.Interfaces.IFingerEntryProcessAIDL)
  FingerExportChar_Api(I[B)I = FingerExportChar_Api(int, byte[])
  FingerGetBmp_Api([B)[B = FingerGetBmp_Api(byte[])
  FingerGetCount_Api()I = FingerGetCount_Api()
  FingerGetDevInfo_Api([B)I = FingerGetDevInfo_Api(byte[])
  FingerGetDevSN_Api([B)I = FingerGetDevSN_Api(byte[])
  FingerGetFp_Api(IILcom/vanstone/appsdk/api/interfaces/IFingerGetProcessAIDL;)I = FingerGetFp_Api(int, int, Com.Vanstone.Appsdk.Api.Interfaces.IFingerGetProcessAIDL)
  FingerGetNextEmptyID_Api()I = FingerGetNextEmptyID_Api()
  FingerGrabImg_Api(ILcom/vanstone/appsdk/api/interfaces/IFingerGrapImgProcessAIDL;)I = FingerGrabImg_Api(int, Com.Vanstone.Appsdk.Api.Interfaces.IFingerGrapImgProcessAIDL)
  FingerInit_Api(I)V = FingerInit_Api(int)
  FingerIsHas_Api()Z = FingerIsHas_Api()
  FingerOpen_Api()I = FingerOpen_Api()
  FingerUpImage_Api([B)I = FingerUpImage_Api(byte[])
  FingerVerify_Api(ILcom/vanstone/appsdk/api/interfaces/IFingerGrapImgProcessAIDL;)I = FingerVerify_Api(int, Com.Vanstone.Appsdk.Api.Interfaces.IFingerGrapImgProcessAIDL)
  FingerVerifyAll_Api(Lcom/vanstone/appsdk/api/interfaces/IFingerGrapImgProcessAIDL;)I = FingerVerifyAll_Api(Com.Vanstone.Appsdk.Api.Interfaces.IFingerGrapImgProcessAIDL)
  FingerVerifySetTimeout_Api(IILcom/vanstone/appsdk/api/interfaces/IFingerGrapImgProcessAIDL;)I = FingerVerifySetTimeout_Api(int, int, Com.Vanstone.Appsdk.Api.Interfaces.IFingerGrapImgProcessAIDL)
com/vanstone/appsdk/api/fiscal/FiscalHandler = Com.Vanstone.Appsdk.Api.Fiscal.IFiscalHandler
  FiscalAuth_Api()I = FiscalAuth_Api()
  FiscalBindServer_Api()I = FiscalBindServer_Api()
  FiscalCloseDatabase_Api()I = FiscalCloseDatabase_Api()
  FiscalDBRecordCheck_Api()I = FiscalDBRecordCheck_Api()
  FiscalDBRecordClose_Api()I = FiscalDBRecordClose_Api()
  FiscalDBRecordOpen_Api()I = FiscalDBRecordOpen_Api()
  FiscalDBRecordRead_Api(I[I[B[I)I = FiscalDBRecordRead_Api(int, int[], byte[], int[])
  FiscalGetFreeDiskSpace_Api()J = FiscalGetFreeDiskSpace_Api()
  FiscalGetHdVersion_Api([B)I = FiscalGetHdVersion_Api(byte[])
  FiscalGetIdkey_Api(JI)I = FiscalGetIdkey_Api(long, int)
  FiscalGetIds_Api(III[B)I = FiscalGetIds_Api(int, int, int, byte[])
  FiscalGetSoftVersion_Api([B)I = FiscalGetSoftVersion_Api(byte[])
  FiscalGetSysSN_Api([B)I = FiscalGetSysSN_Api(byte[])
  FiscalGetTotalRow_Api()I = FiscalGetTotalRow_Api()
  FiscalOpenDatabase_Api()I = FiscalOpenDatabase_Api()
  FiscalPowerOff_Api()I = FiscalPowerOff_Api()
  FiscalPowerOn_Api()I = FiscalPowerOn_Api()
  FiscalReadDataById_Api(I[B)I = FiscalReadDataById_Api(int, byte[])
  FiscalReadWormFlashData_Api(JJLjava/lang/String;)Z = FiscalReadWormFlashData_Api(long, long, string)
  FiscalUpdateServer_Api([BI)I = FiscalUpdateServer_Api(byte[], int)
  FiscalWriteDataById_Api(I[BJ)I = FiscalWriteDataById_Api(int, byte[], long)
  FiscalWriteWormFlashData_Api(J[BJ)J = FiscalWriteWormFlashData_Api(long, byte[], long)
com/vanstone/appsdk/api/hsm/HsmHandler = Com.Vanstone.Appsdk.Api.Hsm.IHsmHandler
  getFreeSpace_Api()J = FreeSpace_Api
  isTampered_Api()Z = IsTampered_Api
  decrypt_Api(ILjava/lang/String;[B)[B = Decrypt_Api(int, string, byte[])
  deleteCertificate_Api(ILjava/lang/String;)Z = DeleteCertificate_Api(int, string)
  deleteKeyPair_Api(Ljava/lang/String;)Z = DeleteKeyPair_Api(string)
  encrypt_Api(ILjava/lang/String;[B)[B = Encrypt_Api(int, string, byte[])
  generateCSR_Api(Ljava/lang/String;Landroid/os/Bundle;)[B = GenerateCSR_Api(string, Android.OS.Bundle)
  generateKeyPair_Api(Ljava/lang/String;II)Z = GenerateKeyPair_Api(string, int, int)
  generateRandom_Api(I)[B = GenerateRandom_Api(int)
  getCertificate_Api(ILjava/lang/String;I)[B = GetCertificate_Api(int, string, int)
  injectPrivateKey_Api([BI)Z = InjectPrivateKey_Api(byte[], int)
  injectPublicKeyCertificate_Api(Ljava/lang/String;Ljava/lang/String;[BI)Z = InjectPublicKeyCertificate_Api(string, string, byte[], int)
  injectRootCertificate_Api(ILjava/lang/String;[BI)Z = InjectRootCertificate_Api(int, string, byte[], int)
  queryCertificates_Api(I)[Ljava/lang/String; = QueryCertificates_Api(int)
  resetKeyStore_Api()V = ResetKeyStore_Api()
com/vanstone/appsdk/api/idcard/IDCardHandler = Com.Vanstone.Appsdk.Api.Idcard.IDCardHandler
  CloseIdCard_Api()I = CloseIdCard_Api()
  CompareBitMap_Api(Landroid/graphics/Bitmap;Landroid/graphics/Bitmap;Lcom/vanstone/appsdk/api/interfaces/IIDCardResult;)I = CompareBitMap_Api(Android.Graphics.Bitmap, Android.Graphics.Bitmap, Com.Vanstone.Appsdk.Api.Interfaces.IIDCardResult)
  GetInfoIdCard_Api(Landroid/os/Bundle;Lcom/vanstone/appsdk/api/interfaces/IIDCardResult;)I = GetInfoIdCard_Api(Android.OS.Bundle, Com.Vanstone.Appsdk.Api.Interfaces.IIDCardResult)
  OpenIdCard_Api(Lcom/vanstone/appsdk/api/interfaces/IIDCardResult;)I = OpenIdCard_Api(Com.Vanstone.Appsdk.Api.Interfaces.IIDCardResult)
com/vanstone/appsdk/api/interfaces/IAidlLocationCallbackAIDL = Com.Vanstone.Appsdk.Api.Interfaces.IAidlLocationCallbackAIDL
  onError(ILjava/lang/String;)V = OnError(int, string)
  onSuccess(Landroid/os/Bundle;)V = OnSuccess(Android.OS.Bundle)
com/vanstone/appsdk/api/interfaces/IAidlTouchListenerAIDL = Com.Vanstone.Appsdk.Api.Interfaces.IAidlTouchListenerAIDL
  onError(I)V = OnError(int)
  onTouch(I)V = OnTouch(int)
com/vanstone/appsdk/api/interfaces/IApkInstallResultAIDL = Com.Vanstone.Appsdk.Api.Interfaces.IApkInstallResultAIDL
  onInstallFinished(Ljava/lang/String;ILjava/lang/String;)V = OnInstallFinished(string, int, string)
com/vanstone/appsdk/api/interfaces/IApkUnInstallResultAIDL = Com.Vanstone.Appsdk.Api.Interfaces.IApkUnInstallResultAIDL
  onDeleteFinished(Ljava/lang/String;ILjava/lang/String;)V = OnDeleteFinished(string, int, string)
com/vanstone/appsdk/api/interfaces/IAPNOperSer = Com.Vanstone.Appsdk.Api.Interfaces.IAPNOperSer
  setDefaultAPNResult(Z)V = SetDefaultAPNResult(bool)
com/vanstone/appsdk/api/interfaces/IEthernetOperSer = Com.Vanstone.Appsdk.Api.Interfaces.IEthernetOperSer
  EthernetCloseResult(I)V = EthernetCloseResult(int)
  EthernetGetIpConfigResult(Lcom/vanstone/appsdk/api/struct/VsIpConfiguration;)V = EthernetGetIpConfigResult(Com.Vanstone.Appsdk.Api.Struct.VsIpConfiguration)
  EthernetOpenResult(I)V = EthernetOpenResult(int)
  EthernetSaveDhcpConfigResult(I)V = EthernetSaveDhcpConfigResult(int)
  EthernetSaveStaticConfigResult(I)V = EthernetSaveStaticConfigResult(int)
com/vanstone/appsdk/api/interfaces/IFaceDetecResult = Com.Vanstone.Appsdk.Api.Interfaces.IFaceDetecResult
  onError(I)V = OnError(int)
  onPreview([BII)V = OnPreview(byte[], int, int)
  onShowFrame(Landroid/graphics/RectF;II)V = OnShowFrame(Android.Graphics.RectF, int, int)
  onSuccess(Landroid/os/Bundle;)V = OnSuccess(Android.OS.Bundle)
  onTip(I)V = OnTip(int)
com/vanstone/appsdk/api/interfaces/IFingerEntryProcessAIDL = Com.Vanstone.Appsdk.Api.Interfaces.IFingerEntryProcessAIDL
  entryFinger(I)V = EntryFinger(int)
  failed(III)V = Failed(int, int, int)
  putFinger()V = PutFinger()
  removeFinger()V = RemoveFinger()
  success(I)V = Success(int)
  upImg()V = UpImg()
com/vanstone/appsdk/api/interfaces/IFingerGetProcessAIDL = Com.Vanstone.Appsdk.Api.Interfaces.IFingerGetProcessAIDL
  failed(I)V = Failed(int)
  putFinger()V = PutFinger()
  success([BI)V = Success(byte[], int)
  upImg()V = UpImg()
com/vanstone/appsdk/api/interfaces/IFingerGrapImgProcessAIDL = Com.Vanstone.Appsdk.Api.Interfaces.IFingerGrapImgProcessAIDL
  putFinger()V = PutFinger()
com/vanstone/appsdk/api/interfaces/IIDCardResult = Com.Vanstone.Appsdk.Api.Interfaces.IIDCardResult
  onError(Landroid/os/Bundle;)V = OnError(Android.OS.Bundle)
  onSuccess(Landroid/os/Bundle;)V = OnSuccess(Android.OS.Bundle)
com/vanstone/appsdk/api/interfaces/INumKeyBoardCheckAIDL = Com.Vanstone.Appsdk.Api.Interfaces.INumKeyBoardCheckAIDL
  onAttach()V = OnAttach()
com/vanstone/appsdk/api/interfaces/INumKeyBoardListener = Com.Vanstone.Appsdk.Api.Interfaces.INumKeyBoardListener
  onAvailable()V = OnAvailable()
  onDisplayUpdate(Ljava/lang/String;)V = OnDisplayUpdate(string)
  onException(Ljava/lang/String;)V = OnException(string)
  onKeyDown(ILjava/lang/String;)V = OnKeyDown(int, string)
  onKeyUp(ILjava/lang/String;)V = OnKeyUp(int, string)
  onPayRequest(Lcom/vanstone/appsdk/api/interfaces/INumKeyPayRequest;)V = OnPayRequest(Com.Vanstone.Appsdk.Api.Interfaces.INumKeyPayRequest)
  onRelease()V = OnRelease()
com/vanstone/appsdk/api/interfaces/INumKeyPayRequest = Com.Vanstone.Appsdk.Api.Interfaces.INumKeyPayRequest
  getAmount()D = Amount
  displayTransResult(Z)V = DisplayTransResult(bool)
com/vanstone/appsdk/api/interfaces/IScanResult = Com.Vanstone.Appsdk.Api.Interfaces.IScanResult
  onButtonClick(Ljava/lang/String;)V = OnButtonClick(string)
  onScanFailed(ILjava/lang/String;)V = OnScanFailed(int, string)
  onScanSuccessed(Ljava/lang/String;)V = OnScanSuccessed(string)
com/vanstone/appsdk/api/interfaces/ISwitchCallback = Com.Vanstone.Appsdk.Api.Interfaces.ISwitchCallback
  swich(ILjava/lang/String;)V = Swich(int, string)
com/vanstone/appsdk/api/interfaces/ISystemUpdate = Com.Vanstone.Appsdk.Api.Interfaces.ISystemUpdate
  updateAndroidResult(Ljava/lang/String;I)V = UpdateAndroidResult(string, int)
com/vanstone/appsdk/api/interfaces/ITaskCallback = Com.Vanstone.Appsdk.Api.Interfaces.ITaskCallback
  getWifiProbeCallback(Ljava/lang/String;Ljava/lang/String;J)V = GetWifiProbeCallback(string, string, long)
com/vanstone/appsdk/api/interfaces/NLDataListenerResultAIDL = Com.Vanstone.Appsdk.Api.Interfaces.INLDataListenerResultAIDL
  actionRecv([BI)V = ActionRecv(byte[], int)
com/vanstone/appsdk/api/IRThermometer/IRThermometerHandler = Com.Vanstone.Appsdk.Api.IRThermometer.IRThermometerHandler
  CloseIRThermometer_Api()I = CloseIRThermometer_Api()
  GetThermometer_Api(Landroid/os/Bundle;)I = GetThermometer_Api(Android.OS.Bundle)
  OpenIRThermometer_Api()I = OpenIRThermometer_Api()
  SetIRThermometerParams_Api(Landroid/os/Bundle;)I = SetIRThermometerParams_Api(Android.OS.Bundle)
com/vanstone/appsdk/api/lcd/LcdHandler = Com.Vanstone.Appsdk.Api.Lcd.ILcdHandler
  Led_GetStatus_Api(I)Z = Led_GetStatus_Api(int)
  LedLightOff_Api(I)I = LedLightOff_Api(int)
  LedLightOn_Api(I)I = LedLightOn_Api(int)
  LedOper_Api(II)I = LedOper_Api(int, int)
com/vanstone/appsdk/api/location/LocationHandler = Com.Vanstone.Appsdk.Api.Location.ILocationHandler
  getLocationInfo(Landroid/os/Bundle;Lcom/vanstone/appsdk/api/interfaces/IAidlLocationCallbackAIDL;)V = GetLocationInfo(Android.OS.Bundle, Com.Vanstone.Appsdk.Api.Interfaces.IAidlLocationCallbackAIDL)
  LocationCalDistance_Api(DDDD)D = LocationCalDistance_Api(double, double, double, double)
  LocationClrBuff_Api()V = LocationClrBuff_Api()
  LocationGetAddress_Api()Ljava/lang/String; = LocationGetAddress_Api()
  LocationGetCity_Api()Ljava/lang/String; = LocationGetCity_Api()
  LocationGetCoorType_Api()Ljava/lang/String; = LocationGetCoorType_Api()
  LocationGetDistrict_Api()Ljava/lang/String; = LocationGetDistrict_Api()
  LocationGetErrInfo_Api()Ljava/lang/String; = LocationGetErrInfo_Api()
  LocationGetLat_Api()D = LocationGetLat_Api()
  LocationGetLng_Api()D = LocationGetLng_Api()
  LocationGetLocInfo_Api(Landroid/os/Bundle;)V = LocationGetLocInfo_Api(Android.OS.Bundle)
  LocationGetProvince_Api()Ljava/lang/String; = LocationGetProvince_Api()
  LocationLoc_Api(I)Z = LocationLoc_Api(int)
  LocationResult_Api()I = LocationResult_Api()
  LocationSetCoorType_Api(Ljava/lang/String;)V = LocationSetCoorType_Api(string)
  LocationStart_Api()I = LocationStart_Api()
  LocationStop_Api()V = LocationStop_Api()
com/vanstone/appsdk/api/NLDeviceScan/NLDeviceScanHandler = Com.Vanstone.Appsdk.Api.NLDeviceScan.INLDeviceScanHandler
  NLclose_Api()V = NLclose_Api()
  NLgetDeviceInformation_Api()Ljava/lang/String; = NLgetDeviceInformation_Api()
  NLGetSdkVersion_Api()Ljava/lang/String; = NLGetSdkVersion_Api()
  NLOpen_Api(Lcom/vanstone/appsdk/api/interfaces/NLDataListenerResultAIDL;)V = NLOpen_Api(Com.Vanstone.Appsdk.Api.Interfaces.INLDataListenerResultAIDL)
  NLreboot_Api()V = NLreboot_Api()
  NLsetAudio_Api(Z)V = NLsetAudio_Api(bool)
  NLsetScanMode_Api(I)V = NLsetScanMode_Api(int)
  NLsetTimeOut_Api(I)Z = NLsetTimeOut_Api(int)
  NLstartScan_Api()V = NLstartScan_Api()
com/vanstone/appsdk/api/numkeyboard/NumKeyBoardHandler = Com.Vanstone.Appsdk.Api.Numkeyboard.INumKeyBoardHandler
  NumKeyClose_Api()V = NumKeyClose_Api()
  NumKeyDisplayText_Api(Ljava/lang/String;)V = NumKeyDisplayText_Api(string)
  NumKeyOpen_Api(Landroid/os/Bundle;)V = NumKeyOpen_Api(Android.OS.Bundle)
  NumKeyReset_Api()V = NumKeyReset_Api()
  NumKeySetCheckListener_Api(Lcom/vanstone/appsdk/api/interfaces/INumKeyBoardCheckAIDL;)V = NumKeySetCheckListener_Api(Com.Vanstone.Appsdk.Api.Interfaces.INumKeyBoardCheckAIDL)
  NumKeySetKeyboardListener_Api(Lcom/vanstone/appsdk/api/interfaces/INumKeyBoardListener;)V = NumKeySetKeyboardListener_Api(Com.Vanstone.Appsdk.Api.Interfaces.INumKeyBoardListener)
  NumKeyUpdateKeyboardSignal_Api(II)Z = NumKeyUpdateKeyboardSignal_Api(int, int)
com/vanstone/appsdk/api/ped/PedHandler = Com.Vanstone.Appsdk.Api.Ped.IPedHandler
  calAes_Api(II[BI[BI[B)I = CalAes_Api(int, int, byte[], int, byte[], int, byte[])
  calcAesDukpt(BB[BI[BB[B[B)I = CalcAesDukpt(sbyte, sbyte, byte[], int, byte[], sbyte, byte[], byte[])
  calcRSA_Api(B[B[B[B)I = CalcRSA_Api(sbyte, byte[], byte[], byte[])
  calcRSAEx_Api(II[B[B[B)I = CalcRSAEx_Api(int, int, byte[], byte[], byte[])
  calcRSAPri_Api(III[B[B)I = CalcRSAPri_Api(int, int, int, byte[], byte[])
  calcRSAPub_Api(III[B[B)I = CalcRSAPub_Api(int, int, int, byte[], byte[])
  getAesDukptKsn(B[B)I = GetAesDukptKsn(sbyte, byte[])
  getKeyPairHdOrSoftg(I[B[B)I = GetKeyPairHdOrSoftg(int, byte[], byte[])
  getMacAesDukpt(BIB[B[B[B)I = GetMacAesDukpt(sbyte, int, sbyte, byte[], byte[], byte[])
  getPinAESDukptEx(BBB[B[B[B[B)I = GetPinAESDukptEx(sbyte, sbyte, sbyte, byte[], byte[], byte[], byte[])
  getPinDukptEx_Api(BBLjava/lang/String;Ljava/lang/String;[B[B)I = GetPinDukptEx_Api(sbyte, sbyte, string, string, byte[], byte[])
  getRSAKeyPair_Api(III[B)I = GetRSAKeyPair_Api(int, int, int, byte[])
  isKeyExist_Api(II)Z = IsKeyExist_Api(int, int)
  KMS_TR31_DukptWriteTIK_Api(III[B[B[B[BI)I = KMS_TR31_DukptWriteTIK_Api(int, int, int, byte[], byte[], byte[], byte[], int)
  KMS_TR31_MwriteKey_Api(II[B[B[B)I = KMS_TR31_MwriteKey_Api(int, int, byte[], byte[], byte[])
  PEDBigDataMac_Api(II[BI[BI)I = PEDBigDataMac_Api(int, int, byte[], int, byte[], int)
  PedCalcDESDukpt_Api(BB[B[BB[B[B)I = PedCalcDESDukpt_Api(sbyte, sbyte, byte[], byte[], sbyte, byte[], byte[])
  PedCalcSymDukpt_Api(BB[B[BIB[B)I = PedCalcSymDukpt_Api(sbyte, sbyte, byte[], byte[], int, sbyte, byte[])
  PEDDes_Api(III[BI[B)I = PEDDes_Api(int, int, int, byte[], int, byte[])
  PEDDesCBC_Api(III[BI[BI[B)I = PEDDesCBC_Api(int, int, int, byte[], int, byte[], int, byte[])
  PedDukptIncreaseKsn_Api(B)I = PedDukptIncreaseKsn_Api(sbyte)
  PedDukptWriteTIK_Api(BBB[B[BB[B)I = PedDukptWriteTIK_Api(sbyte, sbyte, sbyte, byte[], byte[], sbyte, byte[])
  PedErase_Api(II)Z = PedErase_Api(int, int)
  PedEraseAll_Api()Z = PedEraseAll_Api()
  PEDGetDukpt_Api(Ljava/lang/String;[BI[BIILcom/vanstone/transex/ped/IGetDukptPinListener;)I = PEDGetDukpt_Api(string, byte[], int, byte[], int, int, Com.Vanstone.Transex.Ped.IGetDukptPinListener)
  PedGetDukptKSN_Api(B[B)I = PedGetDukptKSN_Api(sbyte, byte[])
  PEDGetExpress_Api(Ljava/lang/String;[BILcom/vanstone/transex/ped/IGetPinResultListenner;)I = PEDGetExpress_Api(string, byte[], int, Com.Vanstone.Transex.Ped.IGetPinResultListenner)
  PEDGetHdSoft_Api()I = PEDGetHdSoft_Api()
  PEDGetLastError_Api()Ljava/lang/String; = PEDGetLastError_Api()
  PedGetMacDukpt_Api(BB[BI[B[BB)I = PedGetMacDukpt_Api(sbyte, sbyte, byte[], int, byte[], byte[], sbyte)
  PEDGetPwd_Api(Ljava/lang/String;[BI[BIILcom/vanstone/transex/ped/IGetPinResultListenner;)I = PEDGetPwd_Api(string, byte[], int, byte[], int, int, Com.Vanstone.Transex.Ped.IGetPinResultListenner)
  PEDMac_Api(II[BI[BI)I = PEDMac_Api(int, int, byte[], int, byte[], int)
  PEDReadPinPadSn_Api([B)I = PEDReadPinPadSn_Api(byte[])
  PEDSavePinPadSn_Api([B)I = PEDSavePinPadSn_Api(byte[])
  PedSelectPlace_Api(Ljava/lang/String;)I = PedSelectPlace_Api(string)
  PEDSetDesSmHdSoft_Api(II)I = PEDSetDesSmHdSoft_Api(int, int)
  PEDSetHdSoft_Api(I)I = PEDSetHdSoft_Api(int)
  PEDSetKeyType_Api(I)V = PEDSetKeyType_Api(int)
  PEDSnMacOnly_Api([BI[BI)I = PEDSnMacOnly_Api(byte[], int, byte[], int)
  PEDStopPin()I = PEDStopPin()
  PEDWrite21Key_Api(I[B)I = PEDWrite21Key_Api(int, byte[])
  PEDWriteIcBcKey_Api([BIIIII[B)I = PEDWriteIcBcKey_Api(byte[], int, int, int, int, int, byte[])
  PEDWriteIcBcKeyWithType_Api([BIIII)I = PEDWriteIcBcKeyWithType_Api(byte[], int, int, int, int)
  PEDWriteKey_Api(II[BII[B)I = PEDWriteKey_Api(int, int, byte[], int, int, byte[])
  PEDWriteMKey_Api(II[B)I = PEDWriteMKey_Api(int, int, byte[])
  PEDWriteWKey_Api(III[B)I = PEDWriteWKey_Api(int, int, int, byte[])
  RSAEnAndDe_Api(I[B[B[B)I = RSAEnAndDe_Api(int, byte[], byte[], byte[])
  RSASign_Api([B[B[B)I = RSASign_Api(byte[], byte[], byte[])
  RSAVerify_Api([B[B[B)I = RSAVerify_Api(byte[], byte[], byte[])
  setAmountColor(Ljava/lang/String;)V = SetAmountColor(string)
  setAmountFont(Ljava/lang/String;)V = SetAmountFont(string)
  setAmountSize(F)V = SetAmountSize(float)
  setBottomBtnText([Ljava/lang/String;)V = SetBottomBtnText(string[])
  setBottomFont(Ljava/lang/String;)V = SetBottomFont(string)
  setBottomTextColor(Ljava/lang/String;)V = SetBottomTextColor(string)
  setBottomTextSize(F)V = SetBottomTextSize(float)
  setCardNo(Ljava/lang/String;)V = SetCardNo(string)
  setDispAmt(Ljava/lang/String;)V = SetDispAmt(string)
  setNumColor(Ljava/lang/String;)V = SetNumColor(string)
  setNumFont(Ljava/lang/String;)V = SetNumFont(string)
  setNumSize(F)V = SetNumSize(float)
  setPinBoardFixed(Z)V = SetPinBoardFixed(bool)
  setPinBoardKey_Api(Landroid/os/Bundle;)I = SetPinBoardKey_Api(Android.OS.Bundle)
  setPinBoardMsg(Landroid/os/Bundle;)V = SetPinBoardMsg(Android.OS.Bundle)
  setPinBoardSetting(Landroid/os/Bundle;)V = SetPinBoardSetting(Android.OS.Bundle)
  setPinBoardStyle(I)V = SetPinBoardStyle(int)
  setStatusbarColor(Ljava/lang/String;)V = SetStatusbarColor(string)
  setStatusbarHide(Z)V = SetStatusbarHide(bool)
  setTextColor(Ljava/lang/String;)V = SetTextColor(string)
  setTextFont(Ljava/lang/String;)V = SetTextFont(string)
  setTextSize(F)V = SetTextSize(float)
  setTitleBackGroundColor(Ljava/lang/String;)V = SetTitleBackGroundColor(string)
  TR31_WriteKey_Api(I[B[B[B)I = TR31_WriteKey_Api(int, byte[], byte[], byte[])
  writeAesKey(BIBIB[BBB[B)I = WriteAesKey(sbyte, int, sbyte, int, sbyte, byte[], sbyte, sbyte, byte[])
  writeAesTik(BBB[B[BBB[B)I = WriteAesTik(sbyte, sbyte, sbyte, byte[], byte[], sbyte, sbyte, byte[])
  writeDerivedKey(II[BI)I = WriteDerivedKey(int, int, byte[], int)
  writeRSAKey_Api(B[B)I = WriteRSAKey_Api(sbyte, byte[])
  writeRSAKeyEx_Api(II[BI[B[B)I = WriteRSAKeyEx_Api(int, int, byte[], int, byte[], byte[])
com/vanstone/appsdk/api/printer/PrinterHandler = Com.Vanstone.Appsdk.Api.Printer.IPrinterHandler
  GetLang_Api()I = Lang_Api
  GetPrintState()I = PrintState
  printAddBarCode_Api(IIIZLjava/lang/String;)V = PrintAddBarCode_Api(int, int, int, bool, string)
  printAddImage_Api(III[B)V = PrintAddImage_Api(int, int, int, byte[])
  printAddQrCode_Api(IILjava/lang/String;)V = PrintAddQrCode_Api(int, int, string)
  printAddQrCodes_Api(ILjava/lang/String;I)V = PrintAddQrCodes_Api(int, string, int)
  printAddText_Api(IILjava/lang/String;)V = PrintAddText_Api(int, int, string)
  printEnd_Api()I = PrintEnd_Api()
  printerAddBarCode_Api(IIIZLjava/lang/String;Ljava/lang/String;)V = PrinterAddBarCode_Api(int, int, int, bool, string, string)
  printerAddBarCodes_Api(IIZLjava/lang/String;Ljava/lang/String;I)V = PrinterAddBarCodes_Api(int, int, bool, string, string, int)
  printFeedLine_Api(I)V = PrintFeedLine_Api(int)
  printGetTextSize_Api()I = PrintGetTextSize_Api()
  printPaperFeed_Api(I)I = PrintPaperFeed_Api(int)
  printQueryStatus_Api()I = PrintQueryStatus_Api()
  printSetAlign_Api(I)V = PrintSetAlign_Api(int)
  printSetBlodText_Api(Z)V = PrintSetBlodText_Api(bool)
  printSetGray_Api(I)V = PrintSetGray_Api(int)
  printSetInvert_Api(Z)V = PrintSetInvert_Api(bool)
  printSetItalic_Api(F)V = PrintSetItalic_Api(float)
  printSetLineThrough_Api(Z)V = PrintSetLineThrough_Api(bool)
  printSetTextSize_Api(I)I = PrintSetTextSize_Api(int)
  printStartPrint_Api()V = PrintStartPrint_Api()
  PrnCheckPrnData_Api()I = PrnCheckPrnData_Api()
  PrnClose_Api()V = PrnClose_Api()
  PrnClrBuff_Api()V = PrnClrBuff_Api()
  PrnCut_Api()V = PrnCut_Api()
  PrnFontSet_Api(III)V = PrnFontSet_Api(int, int, int)
  PrnGetModuleInfo_Api()Landroid/os/Bundle; = PrnGetModuleInfo_Api()
  PrnGetSupportModule_Api()[Ljava/lang/String; = PrnGetSupportModule_Api()
  PrnHTSet_Api(I)V = PrnHTSet_Api(int)
  PrnLeftIndSet_Api(I)V = PrnLeftIndSet_Api(int)
  PrnLineSpaceSet_Api(II)V = PrnLineSpaceSet_Api(int, int)
  PrnLogo_Api(Landroid/graphics/Bitmap;)I = PrnLogo_Api(Android.Graphics.Bitmap)
  PrnLogoBuf_Api([BI)I = PrnLogoBuf_Api(byte[], int)
  PrnOpen_Api()I = PrnOpen_Api()
  PrnReleaseModule_Api()V = PrnReleaseModule_Api()
  PrnSelectModule_Api(Ljava/lang/String;Landroid/os/Bundle;)I = PrnSelectModule_Api(string, Android.OS.Bundle)
  PrnSetFont_Api(II)I = PrnSetFont_Api(int, int)
  PrnSetGray_Api(I)I = PrnSetGray_Api(int)
  PrnSetParams_Api(Landroid/os/Bundle;)V = PrnSetParams_Api(Android.OS.Bundle)
  PrnSetQuality_Api(I)I = PrnSetQuality_Api(int)
  PrnSpeedSet_Api(I)V = PrnSpeedSet_Api(int)
  PrnStart_Api()I = PrnStart_Api()
  PrnStatus_Api()I = PrnStatus_Api()
  PrnStep_Api(I)I = PrnStep_Api(int)
  PrnStr_Api(Ljava/lang/String;)I = PrnStr_Api(string)
  setFontName_Api(Ljava/lang/String;)I = SetFontName_Api(string)
  SetLang_Api(II)V = SetLang_Api(int, int)
com/vanstone/appsdk/api/rs232/Rs232Handler = Com.Vanstone.Appsdk.Api.Rs232.IRs232Handler
  PortClose_Api(I)I = PortClose_Api(int)
  PortIsBufferEmpty(IZ)I = PortIsBufferEmpty(int, bool)
  PortIsEmpty(I)I = PortIsEmpty(int)
  PortOpen_Api(I)I = PortOpen_Api(int)
  PortRecv_Api(I[BII)I = PortRecv_Api(int, byte[], int, int)
  PortReset_Api(I)I = PortReset_Api(int)
  PortSends_Api(I[BI)I = PortSends_Api(int, byte[], int)
  PortSetBaud_Api(IIIII)I = PortSetBaud_Api(int, int, int, int, int)
com/vanstone/appsdk/api/scan/ScanHandler = Com.Vanstone.Appsdk.Api.Scan.IScanHandler
  ScanClose_Api()I = ScanClose_Api()
  ScanOpen_Api(Landroid/os/Bundle;Lcom/vanstone/appsdk/api/interfaces/IScanResult;)I = ScanOpen_Api(Android.OS.Bundle, Com.Vanstone.Appsdk.Api.Interfaces.IScanResult)
com/vanstone/appsdk/api/scanEx/ScanExHandler = Com.Vanstone.Appsdk.Api.ScanEx.IScanExHandler
  ScanCloseEx_Api()I = ScanCloseEx_Api()
  ScanGetDataEx_Api([BI)I = ScanGetDataEx_Api(byte[], int)
  ScanOpenEx_Api()I = ScanOpenEx_Api()
com/vanstone/appsdk/api/SerialPort/SerialPortHandler = Com.Vanstone.Appsdk.Api.SerialPort.ISerialPortHandler
  available_Api(I)I = Available_Api(int)
  close_Api()I = Close_Api()
  open_Api(II)I = Open_Api(int, int)
  read_Api([BII)I = Read_Api(byte[], int, int)
  write_Api([BII)I = Write_Api(byte[], int, int)
com/vanstone/appsdk/api/sign/SignHandler = Com.Vanstone.Appsdk.Api.Sign.ISignHandler
  getSignatureLength()I = SignatureLength
  getSignBmp()Landroid/graphics/Bitmap; = SignBmp
  getSignatureCompressData()[B = GetSignatureCompressData()
  isToastConfirm(Z)V = IsToastConfirm(bool)
  setResignCount(I)V = SetResignCount(int)
  setSignBoardStyle(I)V = SetSignBoardStyle(int)
  startSign(ILjava/lang/String;Lcom/vanstone/sign/IStartSignListenner;)V = StartSign(int, string, Com.Vanstone.Sign.IStartSignListenner)
  stopSign()V = StopSign()
com/vanstone/appsdk/api/sm/SmHandler = Com.Vanstone.Appsdk.Api.SM.ISmHandler
  gmClose_Api()I = GmClose_Api()
  gmOpen_Api()I = GmOpen_Api()
  Sm1_Api([BI[B[BI)I = Sm1_Api(byte[], int, byte[], byte[], int)
  sm2_Api([BI[BI[B[IB)I = Sm2_Api(byte[], int, byte[], int, byte[], int[], sbyte)
  Sm2ExportPK_Api(I[B)I = Sm2ExportPK_Api(int, byte[])
  Sm2ExportPKAll_Api([B[B[B)I = Sm2ExportPKAll_Api(byte[], byte[], byte[])
  Sm2Sign_Api([BI[B[B[B[BI)I = Sm2Sign_Api(byte[], int, byte[], byte[], byte[], byte[], int)
  SM2Verify_Api([BI[B[B[BI)I = SM2Verify_Api(byte[], int, byte[], byte[], byte[], int)
  SM3Hash_Api([BI[B)I = SM3Hash_Api(byte[], int, byte[])
  Sm4_Api([BI[B[B[BI)I = Sm4_Api(byte[], int, byte[], byte[], byte[], int)
  Sm4Soft_Api([BI[B[BI)I = Sm4Soft_Api(byte[], int, byte[], byte[], int)
  SmGetRand_Api(I[B)I = SmGetRand_Api(int, byte[])
com/vanstone/appsdk/api/struct/AidlTrafficStats = Com.Vanstone.Appsdk.Api.Struct.AidlTrafficStats
  <init>(Landroid/os/Parcel;)V = .ctor(Android.OS.Parcel)
  <init>(Ljava/lang/String;Ljava/lang/String;JJ)V = .ctor(string, string, long, long)
  CREATOR = Creator
  getEndDate()Ljava/lang/String; = EndDate
  getMobileRx()J = MobileRx
  getMobileTx()J = MobileTx
  getStartDate()Ljava/lang/String; = StartDate
  describeContents()I = DescribeContents()
  writeToParcel(Landroid/os/Parcel;I)V = WriteToParcel(Android.OS.Parcel, Android.OS.ParcelableWriteFlags)
com/vanstone/appsdk/api/struct/Apdu = Com.Vanstone.Appsdk.Api.Struct.Apdu
  <init>()V = .ctor()
  Command = Command
  CREATOR = Creator
  DataIn = DataIn
  dataOut = DataOut
  EnableCancel = EnableCancel
  Lc = Lc
  Le = Le
  lenOut = LenOut
  readCardDataOk = ReadCardDataOk
  sWA = SWA
  sWB = SWB
  describeContents()I = DescribeContents()
  readFromParcel(Landroid/os/Parcel;)V = ReadFromParcel(Android.OS.Parcel)
  writeToParcel(Landroid/os/Parcel;I)V = WriteToParcel(Android.OS.Parcel, Android.OS.ParcelableWriteFlags)
com/vanstone/appsdk/api/struct/ApnInfo = Com.Vanstone.Appsdk.Api.Struct.ApnInfo
  <init>()V = .ctor()
  apn = Apn
  apnId = ApnId
  authType = AuthType
  bearer = Bearer
  CREATOR = Creator
  mcc = Mcc
  MMSC = Mmsc
  MMSPort = MMSPort
  MMSProxy = MMSProxy
  mnc = Mnc
  MVNOMatchData = MVNOMatchData
  MVNOType = MVNOType
  name = Name
  password = Password
  port = Port
  protocol = Protocol
  proxy = Proxy
  roamingProtocol = RoamingProtocol
  server = Server
  type = Type
  userName = UserName
  getApn()Ljava/lang/String; = Apn
  setApn(Ljava/lang/String;)V = Apn
  getApnId()I = ApnId
  setApnId(I)V = ApnId
  getAuthType()Ljava/lang/String; = AuthType
  setAuthType(Ljava/lang/String;)V = AuthType
  getBearer()Ljava/lang/String; = Bearer
  setBearer(Ljava/lang/String;)V = Bearer
  getMcc()Ljava/lang/String; = Mcc
  setMcc(Ljava/lang/String;)V = Mcc
  getMMSC()Ljava/lang/String; = MMSC
  setMMSC(Ljava/lang/String;)V = MMSC
  getMMSPort()Ljava/lang/String; = MMSPort
  setMMSPort(Ljava/lang/String;)V = MMSPort
  getMMSProxy()Ljava/lang/String; = MMSProxy
  setMMSProxy(Ljava/lang/String;)V = MMSProxy
  getMnc()Ljava/lang/String; = Mnc
  setMnc(Ljava/lang/String;)V = Mnc
  getMVNOMatchData()Ljava/lang/String; = MVNOMatchData
  setMVNOMatchData(Ljava/lang/String;)V = MVNOMatchData
  getMVNOType()Ljava/lang/String; = MVNOType
  setMVNOType(Ljava/lang/String;)V = MVNOType
  getName()Ljava/lang/String; = Name
  setName(Ljava/lang/String;)V = Name
  getPassword()Ljava/lang/String; = Password
  setPassword(Ljava/lang/String;)V = Password
  getPort()Ljava/lang/String; = Port
  setPort(Ljava/lang/String;)V = Port
  getProtocol()Ljava/lang/String; = Protocol
  setProtocol(Ljava/lang/String;)V = Protocol
  getProxy()Ljava/lang/String; = Proxy
  setProxy(Ljava/lang/String;)V = Proxy
  getRoamingProtocol()Ljava/lang/String; = RoamingProtocol
  setRoamingProtocol(Ljava/lang/String;)V = RoamingProtocol
  getServer()Ljava/lang/String; = Server
  setServer(Ljava/lang/String;)V = Server
  getType()Ljava/lang/String; = Type
  setType(Ljava/lang/String;)V = Type
  getUserName()Ljava/lang/String; = UserName
  setUserName(Ljava/lang/String;)V = UserName
  describeContents()I = DescribeContents()
  readFromParcel(Landroid/os/Parcel;)V = ReadFromParcel(Android.OS.Parcel)
  writeToParcel(Landroid/os/Parcel;I)V = WriteToParcel(Android.OS.Parcel, Android.OS.ParcelableWriteFlags)
com/vanstone/appsdk/api/struct/DFNameInfo = Com.Vanstone.Appsdk.Api.Struct.DFNameInfo
  <init>()V = .ctor()
  AID = Aid
  CREATOR = Creator
  DFName = DFName
  FID = Fid
  LenOfDFName = LenOfDFName
  RFU = Rfu
  getLenOfDFName()B = LenOfDFName
  setLenOfDFName(B)V = LenOfDFName
  describeContents()I = DescribeContents()
  getAID()[B = GetAID()
  getDFName()[B = GetDFName()
  getFID()[B = GetFID()
  getRFU()[B = GetRFU()
  readFromParcel(Landroid/os/Parcel;)V = ReadFromParcel(Android.OS.Parcel)
  setAID([B)V = SetAID(byte[])
  setDFName([B)V = SetDFName(byte[])
  setFID([B)V = SetFID(byte[])
  setRFU([B)V = SetRFU(byte[])
  writeToParcel(Landroid/os/Parcel;I)V = WriteToParcel(Android.OS.Parcel, Android.OS.ParcelableWriteFlags)
com/vanstone/appsdk/api/struct/VsIpConfiguration = Com.Vanstone.Appsdk.Api.Struct.VsIpConfiguration
  <init>()V = .ctor()
  <init>(Landroid/os/Parcel;)V = .ctor(Android.OS.Parcel)
  CREATOR = Creator
  ipAssignment = IpAssignment
  getDnsServers()Ljava/util/ArrayList; = DnsServers
  setDnsServers(Ljava/util/ArrayList;)V = DnsServers
  getGateway()Ljava/net/InetAddress; = Gateway
  setGateway(Ljava/net/InetAddress;)V = Gateway
  getHttpProxy()Landroid/net/ProxyInfo; = HttpProxy
  setHttpProxy(Landroid/net/ProxyInfo;)V = HttpProxy
  getIpAddress()Landroid/net/LinkAddress; = IpAddress
  setIpAddress(Landroid/net/LinkAddress;)V = IpAddress
  describeContents()I = DescribeContents()
  getIpAssignment()Lcom/vanstone/appsdk/api/struct/VsIpConfiguration$IpAssignment; = GetIpAssignment()
  getProxySettings()Lcom/vanstone/appsdk/api/struct/VsIpConfiguration$ProxySettings; = GetProxySettings()
  setIpAssignment(Lcom/vanstone/appsdk/api/struct/VsIpConfiguration$IpAssignment;)V = SetIpAssignment(Com.Vanstone.Appsdk.Api.Struct.VsIpConfiguration.IpAssignment)
  setProxySettings(Lcom/vanstone/appsdk/api/struct/VsIpConfiguration$ProxySettings;)V = SetProxySettings(Com.Vanstone.Appsdk.Api.Struct.VsIpConfiguration.ProxySettings)
  unparcelInetAddress(Landroid/os/Parcel;)Ljava/net/InetAddress; = UnparcelInetAddress(Android.OS.Parcel)
  writeToParcel(Landroid/os/Parcel;I)V = WriteToParcel(Android.OS.Parcel, Android.OS.ParcelableWriteFlags)
com/vanstone/appsdk/api/system/SystemHandler = Com.Vanstone.Appsdk.Api.System.ISystemHandler
  getAdminPassword_Api()Ljava/lang/String; = AdminPassword_Api
  GetAllVersion_Api()Landroid/os/Bundle; = AllVersion_Api
  getAndroidKernelVersion()Ljava/lang/String; = AndroidKernelVersion
  getAntennaState()I = AntennaState
  getAutoTimeState_Api()Z = AutoTimeState_Api
  getAutoTimeZoneState_Api()Z = AutoTimeZoneState_Api
  getCSN()Ljava/lang/String; = CSN
  getDebuggableStatus_Api()Z = DebuggableStatus_Api
  getDefaultDataSIM_Api()Ljava/lang/String; = DefaultDataSIM_Api
  getFirmwareVersion()Ljava/lang/String; = FirmwareVersion
  getHardwareVersion()Ljava/lang/String; = HardwareVersion
  getImei()Ljava/lang/String; = Imei
  isDebug_Api()Z = IsDebug_Api
  getLastShutdownCause_Api()I = LastShutdownCause_Api
  getLifeInform_Api()Landroid/os/Bundle; = LifeInform_Api
  getMachineType_Api()Ljava/lang/String; = MachineType_Api
  getModuleSupport_Api()Landroid/os/Bundle; = ModuleSupport_Api
  getNtpServer_Api()Ljava/lang/String; = NtpServer_Api
  getResumeRechargeValue_Api()Ljava/lang/String; = ResumeRechargeValue_Api
  getROMVersion()Ljava/lang/String; = ROMVersion
  getRootCertName_Api()Ljava/lang/String; = RootCertName_Api
  getRootCertVersion_Api()Ljava/lang/String; = RootCertVersion_Api
  getSettingsPWD_Api()Ljava/lang/String; = SettingsPWD_Api
  getSysgHWDetectionIntent()Landroid/content/Intent; = SysgHWDetectionIntent
  getSysHWMaintainIntent()Landroid/content/Intent; = SysHWMaintainIntent
  getSysOTAVerison_Api()Ljava/lang/String; = SysOTAVerison_Api
  getSystemInform_Api()Landroid/os/Bundle; = SystemInform_Api
  getTimeZone_Api()Ljava/lang/String; = TimeZone_Api
  getUndeletableAppList_Api()Ljava/util/List; = UndeletableAppList_Api
  BackUpByPackage_Api(Ljava/util/List;Ljava/lang/String;)I = BackUpByPackage_Api(System.Collections.Generic.IList<string>, string)
  Beef_Api(II)V = Beef_Api(int, int)
  Beep_Api(I)V = Beep_Api(int)
  catchMainLog_Api(Ljava/lang/String;)Z = CatchMainLog_Api(string)
  CheckModuleStatue_Api(I)I = CheckModuleStatue_Api(int)
  deleteFileInSe_Api(Ljava/lang/String;)I = DeleteFileInSe_Api(string)
  deleteFlashData_Api(II)I = DeleteFlashData_Api(int, int)
  deleteRsakey_Api()Z = DeleteRsakey_Api()
  GateClose_Api()I = GateClose_Api()
  GateOpen_Api()I = GateOpen_Api()
  getFileListInSe_Api(Ljava/util/List;)I = GetFileListInSe_Api(System.Collections.Generic.IList<string>)
  getSmartPosID([B)I = GetSmartPosID(byte[])
  getTrafficStats_Api(Ljava/lang/String;Ljava/lang/String;)Lcom/vanstone/appsdk/api/struct/AidlTrafficStats; = GetTrafficStats_Api(string, string)
  GetVersion_Api([B[B)I = GetVersion_Api(byte[], byte[])
  isdeviceEnabled_Api()Z = IsdeviceEnabled_Api()
  isForeground_Api(Ljava/lang/String;)Z = IsForeground_Api(string)
  IsHandleOnBase_Api()I = IsHandleOnBase_Api()
  readFileFromSE_Api(Ljava/lang/String;[BII)I = ReadFileFromSE_Api(string, byte[], int, int)
  readFlashData_Api(I[B)I = ReadFlashData_Api(int, byte[])
  readNvRamFile_Api(I[BI)I = ReadNvRamFile_Api(int, byte[], int)
  ReadPosSn()Ljava/lang/String; = ReadPosSn()
  readRsaKey_Api([B)I = ReadRsaKey_Api(byte[])
  registerTouchListener_Api(Lcom/vanstone/appsdk/api/interfaces/IAidlTouchListenerAIDL;)Z = RegisterTouchListener_Api(Com.Vanstone.Appsdk.Api.Interfaces.IAidlTouchListenerAIDL)
  RestoreDatda_Api(Ljava/lang/String;)I = RestoreDatda_Api(string)
  RestoreFactory_Api(Z)V = RestoreFactory_Api(bool)
  SetAdbEnable_Api(Z)Z = SetAdbEnable_Api(bool)
  setAdminPassword_Api(Ljava/lang/String;)I = SetAdminPassword_Api(string)
  setApplicationType_Api(Z)V = SetApplicationType_Api(bool)
  setAutoTime_Api(Z)Z = SetAutoTime_Api(bool)
  setAutoTimeZone_Api(Z)Z = SetAutoTimeZone_Api(bool)
  SetBaseBroadcast_Api(Z)V = SetBaseBroadcast_Api(bool)
  SetBluetoothEnable_Api(Z)Z = SetBluetoothEnable_Api(bool)
  setDataEnabled_Api(Z)Z = SetDataEnabled_Api(bool)
  setLauncherApp_Api(Ljava/lang/String;Ljava/lang/String;)Z = SetLauncherApp_Api(string, string)
  setNtpServer_Api(Ljava/lang/String;)Z = SetNtpServer_Api(string)
  SetOtgEnable_Api(Z)Z = SetOtgEnable_Api(bool)
  setResumeRechargeValue_Api(Ljava/lang/String;)Z = SetResumeRechargeValue_Api(string)
  SetSetScreenOffTimeout_Api(I)Z = SetSetScreenOffTimeout_Api(int)
  setSettingsPWD_Api(Ljava/lang/String;)I = SetSettingsPWD_Api(string)
  setSgnCheckEnable_Api(ZLjava/lang/String;)I = SetSgnCheckEnable_Api(bool, string)
  setSmartPosID([B)I = SetSmartPosID(byte[])
  setSystemFunction(Landroid/os/Bundle;)Z = SetSystemFunction(Android.OS.Bundle)
  SetTime_Api(Ljava/lang/String;)I = SetTime_Api(string)
  setTimeZone_Api(Ljava/lang/String;)Z = SetTimeZone_Api(string)
  setTrustedBluetoothMAC_Api(Ljava/lang/String;)Z = SetTrustedBluetoothMAC_Api(string)
  SetWifiAddNetworkEnable_Api(Z)Z = SetWifiAddNetworkEnable_Api(bool)
  silentInstallApk_Api(Ljava/lang/String;Ljava/lang/String;Lcom/vanstone/appsdk/api/interfaces/IApkInstallResultAIDL;)V = SilentInstallApk_Api(string, string, Com.Vanstone.Appsdk.Api.Interfaces.IApkInstallResultAIDL)
  silentUnInstallApk_Api(Ljava/lang/String;Lcom/vanstone/appsdk/api/interfaces/IApkUnInstallResultAIDL;)V = SilentUnInstallApk_Api(string, Com.Vanstone.Appsdk.Api.Interfaces.IApkUnInstallResultAIDL)
  stopBeep_api()V = StopBeep_api()
  stopCatch_Api()Z = StopCatch_Api()
  switchAppEnable_Api(Ljava/lang/String;Z)Z = SwitchAppEnable_Api(string, bool)
  switchChargeOnRS232_Api(Z)Z = SwitchChargeOnRS232_Api(bool)
  switchDefaultDataSIM_Api()Z = SwitchDefaultDataSIM_Api()
  switchGPS_Api(Z)Z = SwitchGPS_Api(bool)
  SystemPowerOff_Api()V = SystemPowerOff_Api()
  SystemReboot_Api()V = SystemReboot_Api()
  unregisterTouchListener_Api(Lcom/vanstone/appsdk/api/interfaces/IAidlTouchListenerAIDL;)Z = UnregisterTouchListener_Api(Com.Vanstone.Appsdk.Api.Interfaces.IAidlTouchListenerAIDL)
  updateSystem_Api(Ljava/lang/String;Lcom/vanstone/appsdk/api/interfaces/ISystemUpdate;)I = UpdateSystem_Api(string, Com.Vanstone.Appsdk.Api.Interfaces.ISystemUpdate)
  validatePermission(Z)V = ValidatePermission(bool)
  writeFileToSE_Api(Ljava/lang/String;[BII)I = WriteFileToSE_Api(string, byte[], int, int)
  writeFlashData_Api(I[B)I = WriteFlashData_Api(int, byte[])
  writeNvRamFile_Api(I[BI)I = WriteNvRamFile_Api(int, byte[], int)
  writeRsaKey_Api([B)Z = WriteRsaKey_Api(byte[])
com/vanstone/appsdk/api/taxcontrol/TaxControlHandle = Com.Vanstone.Appsdk.Api.Taxcontrol.ITaxControlHandle
  TaxControlClosedev_Api()I = TaxControlClosedev_Api()
  TaxControlOpendev_Api()I = TaxControlOpendev_Api()
  TaxControlSenddev_Api([B[B)I = TaxControlSenddev_Api(byte[], byte[])
  TaxControlSenddevWithTimeOut_Api([B[BI)I = TaxControlSenddevWithTimeOut_Api(byte[], byte[], int)
com/vanstone/appsdk/api/wifiprobe/WIFIProbeHandler = Com.Vanstone.Appsdk.Api.Wifiprobe.IWIFIProbeHandler
  WifiProbeClose_Api(Lcom/vanstone/appsdk/api/interfaces/ISwitchCallback;)V = WifiProbeClose_Api(Com.Vanstone.Appsdk.Api.Interfaces.ISwitchCallback)
  WifiProbeCloseInfo_Api(Lcom/vanstone/appsdk/api/interfaces/ISwitchCallback;)V = WifiProbeCloseInfo_Api(Com.Vanstone.Appsdk.Api.Interfaces.ISwitchCallback)
  WifiProbeOpen_Api(Lcom/vanstone/appsdk/api/interfaces/ISwitchCallback;)V = WifiProbeOpen_Api(Com.Vanstone.Appsdk.Api.Interfaces.ISwitchCallback)
  WifiProbeRegister_Api(Lcom/vanstone/appsdk/api/interfaces/ITaskCallback;)V = WifiProbeRegister_Api(Com.Vanstone.Appsdk.Api.Interfaces.ITaskCallback)
  WifiProbeStartInfo_Api(Lcom/vanstone/appsdk/api/interfaces/ISwitchCallback;)V = WifiProbeStartInfo_Api(Com.Vanstone.Appsdk.Api.Interfaces.ISwitchCallback)
  WifiProbeUnregister_Api(Lcom/vanstone/appsdk/api/interfaces/ITaskCallback;)V = WifiProbeUnregister_Api(Com.Vanstone.Appsdk.Api.Interfaces.ITaskCallback)
com/vanstone/appsdk/client/ISdkStatue = Com.Vanstone.Appsdk.Client.ISdkStatue
  sdkInitFailed()V = SdkInitFailed()
  sdkInitSuccessed()V = SdkInitSuccessed()
com/vanstone/appsdk/client/SdkApi = Com.Vanstone.Appsdk.Client.SdkApi
  isServicesBinded = IsServicesBinded
  getApnHandler()Lcom/vanstone/appsdk/api/common/ApnHandler; = ApnHandler
  getAt24cXXHandler()Lcom/vanstone/appsdk/api/cards/At24cXXHandler; = At24cXXHandler
  getAt88scXXHandler()Lcom/vanstone/appsdk/api/cards/At88scXXHandler; = At88scXXHandler
  getAuthFaceHandler()Lcom/vanstone/appsdk/api/authface/AuthFaceHandler; = AuthFaceHandler
  getCommHandler()Lcom/vanstone/appsdk/api/common/CommHandler; = CommHandler
  getContactlessHandler()Lcom/vanstone/appsdk/api/cards/ContactlessHandler; = ContactlessHandler
  getDesfireHandler()Lcom/vanstone/appsdk/api/cards/DesfireHandler; = DesfireHandler
  getDevinformHandler()Lcom/vanstone/appsdk/api/devinform/DevinformHandler; = DevinformHandler
  getFingerHandler()Lcom/vanstone/appsdk/api/finger/FingerHandler; = FingerHandler
  getFiscalHandler()Lcom/vanstone/appsdk/api/fiscal/FiscalHandler; = FiscalHandler
  getHsmHandler()Lcom/vanstone/appsdk/api/hsm/HsmHandler; = HsmHandler
  getIcHandler()Lcom/vanstone/appsdk/api/cards/ICHandler; = IcHandler
  getInstance()Lcom/vanstone/appsdk/client/SdkApi; = Instance
  getLcdHandler()Lcom/vanstone/appsdk/api/lcd/LcdHandler; = LcdHandler
  getLocationHandler()Lcom/vanstone/appsdk/api/location/LocationHandler; = LocationHandler
  getMagHandler()Lcom/vanstone/appsdk/api/cards/MAGHandler; = MagHandler
  getMemCardHandler()Lcom/vanstone/appsdk/api/cards/MemCardHandler; = MemCardHandler
  getNumKeyBoardHandler()Lcom/vanstone/appsdk/api/numkeyboard/NumKeyBoardHandler; = NumKeyBoardHandler
  getPedHandler()Lcom/vanstone/appsdk/api/ped/PedHandler; = PedHandler
  getPiccHandler()Lcom/vanstone/appsdk/api/cards/PICCHandler; = PiccHandler
  getPrinterHandler()Lcom/vanstone/appsdk/api/printer/PrinterHandler; = PrinterHandler
  getRs232Handler()Lcom/vanstone/appsdk/api/rs232/Rs232Handler; = Rs232Handler
  getScanHandler()Lcom/vanstone/appsdk/api/scan/ScanHandler; = ScanHandler
  getSerialPortHandler()Lcom/vanstone/appsdk/api/SerialPort/SerialPortHandler; = SerialPortHandler
  getSignHandler()Lcom/vanstone/appsdk/api/sign/SignHandler; = SignHandler
  getSmHandler()Lcom/vanstone/appsdk/api/sm/SmHandler; = SmHandler
  getSystemHandler()Lcom/vanstone/appsdk/api/system/SystemHandler; = SystemHandler
  getTaxControlHandle()Lcom/vanstone/appsdk/api/taxcontrol/TaxControlHandle; = TaxControlHandle
  getWifiProbeHandler()Lcom/vanstone/appsdk/api/wifiprobe/WIFIProbeHandler; = WifiProbeHandler
  exit()V = Exit()
  init(Landroid/content/Context;Lcom/vanstone/appsdk/client/ISdkStatue;)V = Init(Android.Content.Context, Com.Vanstone.Appsdk.Client.ISdkStatue)
com/vanstone/base/interfaces/Bean = Com.Vanstone.Base.Interfaces.IBean
com/vanstone/base/interfaces/CmdListener = Com.Vanstone.Base.Interfaces.ICmdListener
  cmdAction(ILjava/lang/Object;)V = CmdAction(int, Java.Lang.Object)
com/vanstone/base/interfaces/DataParser = Com.Vanstone.Base.Interfaces.IDataParser
  Bean2Form(Ljava/lang/Object;)V = Bean2Form(Java.Lang.Object)
  Form2Bean(Ljava/lang/Object;)V = Form2Bean(Java.Lang.Object)
  Verify()I = Verify()
com/vanstone/base/interfaces/EventCallback = Com.Vanstone.Base.Interfaces.IEventCallback
  getFirstTextBoxValue()Ljava/lang/String; = FirstTextBoxValue
  getLastTextBoxValue()Ljava/lang/String; = LastTextBoxValue
  DispTitle(Ljava/lang/String;)V = DispTitle(string)
  getTextBoxValue(I)Ljava/lang/String; = GetTextBoxValue(int)
  pageRepaint()V = PageRepaint()
  pageRepaint(Ljava/util/Vector;)V = PageRepaint(Java.Util.Vector)
  sendMessage(Ljava/lang/String;)V = SendMessage(string)
com/vanstone/base/interfaces/ISystemOper = Com.Vanstone.Base.Interfaces.ISystemOper
  updateAndroidResult(Ljava/lang/String;I)V = UpdateAndroidResult(string, int)
com/vanstone/base/interfaces/PedListener = Com.Vanstone.Base.Interfaces.IPedListener
  processCallback([B)V = ProcessCallback(byte[])
com/vanstone/base/interfaces/StructInterface = Com.Vanstone.Base.Interfaces.IStructInterface
  size()I = Size()
  toBean([B)V = ToBean(byte[])
  toBytes()[B = ToBytes()
com/vanstone/compress/CompressFile = Com.Vanstone.Compress.CompressFile
  <init>()V = .ctor()
  main([Ljava/lang/String;)V = Main(string[])
com/vanstone/compress/CompressString = Com.Vanstone.Compress.CompressString
  <init>()V = .ctor()
  compress(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; = Compress(string, string)
  compressBytes(Ljava/lang/String;Ljava/lang/String;)[B = CompressBytes(string, string)
com/vanstone/compress/DecompressFile = Com.Vanstone.Compress.DecompressFile
  <init>()V = .ctor()
  main([Ljava/lang/String;)V = Main(string[])
com/vanstone/compress/DecompressString = Com.Vanstone.Compress.DecompressString
  <init>()V = .ctor()
  decompress(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; = Decompress(string, string)
com/vanstone/key/utils/TMKInfo = Com.Vanstone.Key.Utils.TMKInfo
  <init>()V = .ctor()
  getByteArray()[B = GetByteArray()
  setByteArray([B)Z = SetByteArray(byte[])
com/vanstone/key/utils/TMKInfoMaster = Com.Vanstone.Key.Utils.TMKInfoMaster
  <init>()V = .ctor()
  DATA_LEN = DataLen
  MAX_KEY_LEN = MaxKeyLen
  MAX_RESERVED_LEN = MaxReservedLen
  getKeyIndex()B = KeyIndex
  setKeyIndex(B)V = KeyIndex
  getKeyLen()B = KeyLen
  setKeyLen(B)V = KeyLen
  getKeyType()B = KeyType
  setKeyType(B)V = KeyType
  getByteArray()[B = GetByteArray()
  getKey()[B = GetKey()
  getReserved()[B = GetReserved()
  setByteArray([B)Z = SetByteArray(byte[])
  setKey([B)V = SetKey(byte[])
  setReserved([B)V = SetReserved(byte[])
com/vanstone/keyboard/KeyConverter = Com.Vanstone.Keyboard.KeyConverter
  <init>()V = .ctor()
  keyConverter(I)I = InvokeKeyConverter(int)
com/vanstone/page/widget/body/custom/AMTEditText = Com.Vanstone.Page.Widget.Body.Custom.AMTEditText
  <init>(Landroid/content/Context;Landroid/util/AttributeSet;)V = .ctor(Android.Content.Context, Android.Util.IAttributeSet)
  getMaxLength()I = MaxLength
  setMaxLength(I)V = MaxLength
  getMinlength()I = Minlength
  setMinlength(I)V = Minlength
com/vanstone/page/widget/body/custom/IKeyBoard = Com.Vanstone.Page.Widget.Body.Custom.IKeyBoard
  enter()V = Enter()
  setAmount(Ljava/lang/String;)V = SetAmount(string)
  setDispAmount(Z)V = SetDispAmount(bool)
  setDispMsg(Ljava/lang/String;)V = SetDispMsg(string)
  setDispPwdBox(Z)V = SetDispPwdBox(bool)
  setKeyLen(I)V = SetKeyLen(int)
  setOnKeyBoardListener(Lcom/vanstone/page/widget/body/custom/OnKeyBoardClickListener;)V = SetOnKeyBoardListener(Com.Vanstone.Page.Widget.Body.Custom.IOnKeyBoardClickListener)
com/vanstone/page/widget/body/custom/OnKeyBoardClickListener = Com.Vanstone.Page.Widget.Body.Custom.IOnKeyBoardClickListener
  onCancel()V = OnCancel()
  onEnter(Ljava/lang/String;)V = OnEnter(string)
  onKeyBoardClick(Landroid/view/View;Ljava/lang/String;)V = OnKeyBoardClick(Android.Views.View, string)
  onKeyClick(I)V = OnKeyClick(int)
com/vanstone/page/widget/body/custom/RadioBtn = Com.Vanstone.Page.Widget.Body.Custom.RadioBtn
  <init>()V = .ctor()
  getText()Ljava/lang/String; = Text
  setText(Ljava/lang/String;)V = Text
  getValue()I = Value
  setValue(I)V = Value
com/vanstone/sign/IStartSignListenner = Com.Vanstone.Sign.IStartSignListenner
  onCancle()V = OnCancle()
  onDone([BLandroid/graphics/Bitmap;)V = OnDone(byte[], Android.Graphics.Bitmap)
  onError(ILjava/lang/String;)V = OnError(int, string)
  onTimerOut()V = OnTimerOut()
com/vanstone/trans/api/ApnApi = Com.Vanstone.Trans.Api.ApnApi
  <init>()V = .ctor()
  getAllApnList()Ljava/util/List; = AllApnList
  getAllApnList_Api()Ljava/util/List; = AllApnList_Api
  getPreferApn_Api()Lcom/vanstone/trans/api/struct/ApnInfo; = PreferApn_Api
  getSIMInfo()Ljava/lang/String; = SIMInfo
  AddApn_Api(Lcom/vanstone/trans/api/struct/ApnInfo;)I = AddApn_Api(Com.Vanstone.Trans.Api.Struct.ApnInfo)
  ApnClose()I = ApnClose()
  ApnOpen()I = ApnOpen()
  ApnOpen(Landroid/content/Context;)I = ApnOpen(Android.Content.Context)
  ApnOpen_Api()I = ApnOpen_Api()
  DeleteApn(I)Z = DeleteApn(int)
  DeleteApn(Ljava/lang/String;Ljava/lang/String;)I = DeleteApn(string, string)
  DeleteApn_Api(I)Z = DeleteApn_Api(int)
  DeleteApn_Api(Ljava/lang/String;Ljava/lang/String;)I = DeleteApn_Api(string, string)
  getGprsAPNId(Ljava/lang/String;Ljava/lang/String;)Z = GetGprsAPNId(string, string)
  getGprsAPNId_Api(Ljava/lang/String;Ljava/lang/String;)Z = GetGprsAPNId_Api(string, string)
  SelectedApn_Api(Ljava/lang/String;)I = SelectedApn_Api(string)
  setDefaultApn(I)I = SetDefaultApn(int)
  setDefaultApn_Api(I)I = SetDefaultApn_Api(int)
  updateGprsAPN(Ljava/lang/String;Lcom/vanstone/trans/api/struct/ApnInfo;)I = UpdateGprsAPN(string, Com.Vanstone.Trans.Api.Struct.ApnInfo)
  updateGprsAPN_Api(Ljava/lang/String;Lcom/vanstone/trans/api/struct/ApnInfo;)I = UpdateGprsAPN_Api(string, Com.Vanstone.Trans.Api.Struct.ApnInfo)
com/vanstone/trans/api/AppContext = Com.Vanstone.Trans.Api.AppContext
  <init>()V = .ctor()
  BODYTEXTLIST = Bodytextlist
  Context = Context
  EventCall = EventCall
  KEYCODE = Keycode
  LCDCONTENTLIST = Lcdcontentlist
  PAGEMENU = Pagemenu
  PAGEMENUICON = Pagemenuicon
  PAGESTATUSLIST = Pagestatuslist
  PAGETITLE = Pagetitle
  TEMPSTR = Tempstr
com/vanstone/trans/api/AT24CApi = Com.Vanstone.Trans.Api.AT24CApi
  <init>()V = .ctor()
  AT24C01 = At24c01
  AT24C02 = At24c02
  AT24C04 = At24c04
  AT24C08 = At24c08
  AT24C16 = At24c16
  AT24C64 = At24c64
  checkType_Api()I = CheckType_Api()
  close_Api()I = Close_Api()
  open_Api()I = Open_Api()
  read_Api(I[BI)I = Read_Api(int, byte[], int)
  write_Api(I[BI)I = Write_Api(int, byte[], int)
com/vanstone/trans/api/AT88scApi = Com.Vanstone.Trans.Api.AT88scApi
  <init>()V = .ctor()
  EarseEzData_Api(III)I = EarseEzData_Api(int, int, int)
  Get1608ConfigZoneData(II[B)I = Get1608ConfigZoneData(int, int, byte[])
  GetEzKey(II[B)I = GetEzKey(int, int, byte[])
  icc102CheckCardType_Api([B)I = Icc102CheckCardType_Api(byte[])
  icc102ReadAppArea_Api(III[B)I = Icc102ReadAppArea_Api(int, int, int, byte[])
  icc102ReadCodeProtectedBlock_Api(II[B)I = Icc102ReadCodeProtectedBlock_Api(int, int, byte[])
  icc102ReadErrorCountBlock_Api([B)I = Icc102ReadErrorCountBlock_Api(byte[])
  icc102ReadMfrsLoneCode_Api()[B = Icc102ReadMfrsLoneCode_Api()
  icc102ReadMfrsShortCode_Api()[B = Icc102ReadMfrsShortCode_Api()
  icc102ReadPwdErrorCount_Api()I = Icc102ReadPwdErrorCount_Api()
  icc102ReadTestBlock_Api()[B = Icc102ReadTestBlock_Api()
  icc102UpdatePwd_Api([B)I = Icc102UpdatePwd_Api(byte[])
  icc102VerifyPwd_Api([B)I = Icc102VerifyPwd_Api(byte[])
  icc102WriteAppArea_Api(BB[B)I = Icc102WriteAppArea_Api(sbyte, sbyte, byte[])
  icc102WriteCardMfrsData_Api([B)I = Icc102WriteCardMfrsData_Api(byte[])
  icc102WriteCodeProtectedBlock_Api(II[B)I = Icc102WriteCodeProtectedBlock_Api(int, int, byte[])
  icc102WriteTestBlock_Api([B)I = Icc102WriteTestBlock_Api(byte[])
  icc1608Certify_Api()I = Icc1608Certify_Api()
  icc1608CheckCardType_Api([B)I = Icc1608CheckCardType_Api(byte[])
  icc1608Read_Api(BB[B)I = Icc1608Read_Api(sbyte, sbyte, byte[])
  icc1608SelectUserArea_Api(B)I = Icc1608SelectUserArea_Api(sbyte)
  icc1608VerifyKey_Api(B[BB)I = Icc1608VerifyKey_Api(sbyte, byte[], sbyte)
  icc1608Write_Api(BB[B)I = Icc1608Write_Api(sbyte, sbyte, byte[])
  IccDetect_Api(I)I = IccDetect_Api(int)
  powerDown_Api()I = PowerDown_Api()
  powerOn_Api()I = PowerOn_Api()
  Verify102EzKey_Api(II[B)I = Verify102EzKey_Api(int, int, byte[])
com/vanstone/trans/api/AuthFaceApi = Com.Vanstone.Trans.Api.AuthFaceApi
  <init>()V = .ctor()
  FaceGetFirmwareInfo_Api()Landroid/os/Bundle; = FaceGetFirmwareInfo_Api()
  FaceGetParam_Api()Landroid/os/Bundle; = FaceGetParam_Api()
  FaceSetParam_Api(Landroid/os/Bundle;)V = FaceSetParam_Api(Android.OS.Bundle)
  FaceStartDetect_Api(Landroid/os/Bundle;Lcom/vanstone/trans/api/AuthFaceApi$OnFaceDetectListener;)V = FaceStartDetect_Api(Android.OS.Bundle, Com.Vanstone.Trans.Api.AuthFaceApi.IOnFaceDetectListener)
  FaceStopDetect_Api()V = FaceStopDetect_Api()
com/vanstone/trans/api/BmpOper = Com.Vanstone.Trans.Api.BmpOper
  <init>()V = .ctor()
  BmpTurn240To80([B[B)I = BmpTurn240To80(byte[], byte[])
  ImageLower_Api([B[B)I = ImageLower_Api(byte[], byte[])
com/vanstone/trans/api/body/BodyTextProperty = Com.Vanstone.Trans.Api.Body.BodyTextProperty
  <init>()V = .ctor()
  getAtr()I = Atr
  setAtr(I)V = Atr
  getCol()I = Col
  setCol(I)V = Col
  getColor()I = Color
  setColor(I)V = Color
  getDefaultVal()Ljava/lang/String; = DefaultVal
  setDefaultVal(Ljava/lang/String;)V = DefaultVal
  getHeight()I = Height
  setHeight(I)V = Height
  getIsCheck()I = IsCheck
  setIsCheck(I)V = IsCheck
  isLinesFlag()Z = LinesFlag
  setLinesFlag(Z)V = LinesFlag
  getList()Ljava/util/ArrayList; = List
  setList(Ljava/util/ArrayList;)V = List
  getMaxlen()I = Maxlen
  setMaxlen(I)V = Maxlen
  getMinlen()I = Minlen
  setMinlen(I)V = Minlen
  getObj()Ljava/lang/Object; = Obj
  setObj(Ljava/lang/Object;)V = Obj
  getOrientation()I = Orientation
  setOrientation(I)V = Orientation
  getRandom()I = Random
  setRandom(I)V = Random
  getRow()I = Row
  setRow(I)V = Row
  getStr()Ljava/lang/String; = Str
  setStr(Ljava/lang/String;)V = Str
  getStyle()I = Style
  setStyle(I)V = Style
  getTextStyle()I = TextStyle
  setTextStyle(I)V = TextStyle
  getWidth()I = Width
  setWidth(I)V = Width
com/vanstone/trans/api/BthApi = Com.Vanstone.Trans.Api.BthApi
  <init>()V = .ctor()
  BthCheck_Api(Lcom/vanstone/trans/api/struct/BthConnectInf;)I = BthCheck_Api(Com.Vanstone.Trans.Api.Struct.BthConnectInf)
  BthClose_Api()I = BthClose_Api()
  BthClrBuffer_Api()I = BthClrBuffer_Api()
  BthDisconnect_Api()I = BthDisconnect_Api()
  BthGetConfig_Api(Lcom/vanstone/trans/api/struct/BthConfig;)I = BthGetConfig_Api(Com.Vanstone.Trans.Api.Struct.BthConfig)
  BthOpen_Api()I = BthOpen_Api()
  BthRecvData_Api([BII)I = BthRecvData_Api(byte[], int, int)
  BthSendData_Api([BI)I = BthSendData_Api(byte[], int)
  BthSetConfig_Api(Lcom/vanstone/trans/api/struct/BthConfig;)I = BthSetConfig_Api(Com.Vanstone.Trans.Api.Struct.BthConfig)
com/vanstone/trans/api/BtPrinterApi = Com.Vanstone.Trans.Api.BtPrinterApi
  <init>()V = .ctor()
  blueSocket = BlueSocket
  bufSize = BufSize
  encoding = Encoding
  ENCODING_GBK = EncodingGbk
  ENCODING_UTF8 = EncodingUtf8
  errCode = ErrCode
  errMsg = ErrMsg
  g_MacAddr = GMacAddr
  g_PrnMemBuf = GPrnMemBuf
  g_PrnMemBufLen = GPrnMemBufLen
  lainjie = Lainjie
  LANG_CH = LangCh
  LANG_PERSIAN = LangPersian
  SPP_UUID = SppUuid
  stopTime = StopTime
  PrnAlignSet_Api(I)V = PrnAlignSet_Api(int)
  PrnBarcode_Api(Ljava/lang/String;)V = PrnBarcode_Api(string)
  PrnClose_Api()V = PrnClose_Api()
  PrnClrBuff_Api()V = PrnClrBuff_Api()
  PrnFontSet_Api(III)V = PrnFontSet_Api(int, int, int)
  PrnHTSet_Api(Z)V = PrnHTSet_Api(bool)
  PrnLeftIndSet_Api(I)I = PrnLeftIndSet_Api(int)
  PrnLessen_Api(Z)V = PrnLessen_Api(bool)
  PrnLine_Api(Z)V = PrnLine_Api(bool)
  PrnLineSpaceSet_Api(II)V = PrnLineSpaceSet_Api(int, int)
  PrnLogo_Api(Landroid/graphics/Bitmap;)I = PrnLogo_Api(Android.Graphics.Bitmap)
  PrnLogo_Api(Ljava/lang/String;)I = PrnLogo_Api(string)
  PrnOpen_Api(Ljava/lang/String;)I = PrnOpen_Api(string)
  PrnQrcode_Api(Ljava/lang/String;)V = PrnQrcode_Api(string)
  PrnStart_Api()I = PrnStart_Api()
  PrnStatus_Api()I = PrnStatus_Api()
  PrnStep_Api(I)I = PrnStep_Api(int)
  PrnStr_Api(Ljava/lang/String;)I = PrnStr_Api(string)
  PrnZoom_Api(Z)V = PrnZoom_Api(bool)
  setEncoding(Ljava/lang/String;)V = SetEncoding(string)
  ZoomImage_Api(Landroid/graphics/Bitmap;DD)Landroid/graphics/Bitmap; = ZoomImage_Api(Android.Graphics.Bitmap, double, double)
com/vanstone/trans/api/CommApi = Com.Vanstone.Trans.Api.CommApi
  <init>()V = .ctor()
  ApnUri = ApnUri
  BLUETOOTH = Bluetooth
  CDMA = Cdma
  certInfo = CertInfo
  COM = Com
  CurIp = CurIp
  CurPort = CurPort
  FSK = Fsk
  g_CertIndx = GCertIndx
  g_CertLabel = GCertLabel
  G_CommParam = GCommParam
  g_datLen = GDatLen
  GPRS = Gprs
  G_TelSel = GTelSel
  G_WLSIsCheckFlag = GWLSIsCheckFlag
  LAN = Lan
  LOCAL_CERT_ROOT = LocalCertRoot
  LOCAL_CERT_SUB = LocalCertSub
  LOCAL_CRL = LocalCrl
  MainApnUri = MainApnUri
  MODEM = Modem
  PPP = Ppp
  SSL = Ssl
  SSL_CERT_FOLDER = SslCertFolder
  WIFI = Wifi
  addApn(Landroid/content/Context;Landroid/content/ContentValues;Lcom/vanstone/trans/api/CommApi$IAPNOper;)V = AddApn(Android.Content.Context, Android.Content.ContentValues, Com.Vanstone.Trans.Api.CommApi.IAPNOper)
  addApn_Api(Landroid/content/Context;Landroid/content/ContentValues;Lcom/vanstone/trans/api/CommApi$IAPNOper;)V = AddApn_Api(Android.Content.Context, Android.Content.ContentValues, Com.Vanstone.Trans.Api.CommApi.IAPNOper)
  ApnEnabled(ZI)I = ApnEnabled(bool, int)
  CommCheck(I)I = CommCheck(int)
  CommCheck_Api(I)I = CommCheck_Api(int)
  CommCheck_Api(II)I = CommCheck_Api(int, int)
  CommClose_Api()V = CommClose_Api()
  CommGetCurIpPort_Api([B[B)V = CommGetCurIpPort_Api(byte[], byte[])
  CommModuleInit_Api(Lcom/vanstone/trans/api/struct/CommParaStruc;)I = CommModuleInit_Api(Com.Vanstone.Trans.Api.Struct.CommParaStruc)
  CommParamSet_Api(Lcom/vanstone/trans/api/struct/CommParaStruc;)V = CommParamSet_Api(Com.Vanstone.Trans.Api.Struct.CommParaStruc)
  CommRxd_Api([B[BIII)I = CommRxd_Api(byte[], byte[], int, int, int)
  CommStart_Api()I = CommStart_Api()
  CommTxd_Api([BII)I = CommTxd_Api(byte[], int, int)
  EthernetClose(Landroid/content/Context;Lcom/vanstone/appsdk/api/interfaces/IEthernetOperSer;)V = EthernetClose(Android.Content.Context, Com.Vanstone.Appsdk.Api.Interfaces.IEthernetOperSer)
  EthernetClose_Api(Landroid/content/Context;Lcom/vanstone/appsdk/api/interfaces/IEthernetOperSer;)V = EthernetClose_Api(Android.Content.Context, Com.Vanstone.Appsdk.Api.Interfaces.IEthernetOperSer)
  EthernetGetIpConfig(Landroid/content/Context;Lcom/vanstone/appsdk/api/interfaces/IEthernetOperSer;)V = EthernetGetIpConfig(Android.Content.Context, Com.Vanstone.Appsdk.Api.Interfaces.IEthernetOperSer)
  EthernetGetIpConfig_Api(Landroid/content/Context;Lcom/vanstone/appsdk/api/interfaces/IEthernetOperSer;)V = EthernetGetIpConfig_Api(Android.Content.Context, Com.Vanstone.Appsdk.Api.Interfaces.IEthernetOperSer)
  EthernetOpen(Landroid/content/Context;Lcom/vanstone/appsdk/api/interfaces/IEthernetOperSer;)V = EthernetOpen(Android.Content.Context, Com.Vanstone.Appsdk.Api.Interfaces.IEthernetOperSer)
  EthernetOpen_Api(Landroid/content/Context;Lcom/vanstone/appsdk/api/interfaces/IEthernetOperSer;)V = EthernetOpen_Api(Android.Content.Context, Com.Vanstone.Appsdk.Api.Interfaces.IEthernetOperSer)
  EthernetSaveDhcpConfig(Landroid/content/Context;Lcom/vanstone/appsdk/api/interfaces/IEthernetOperSer;)V = EthernetSaveDhcpConfig(Android.Content.Context, Com.Vanstone.Appsdk.Api.Interfaces.IEthernetOperSer)
  EthernetSaveDhcpConfig_Api(Landroid/content/Context;Lcom/vanstone/appsdk/api/interfaces/IEthernetOperSer;)V = EthernetSaveDhcpConfig_Api(Android.Content.Context, Com.Vanstone.Appsdk.Api.Interfaces.IEthernetOperSer)
  EthernetSaveStaticConfig(Landroid/content/Context;Lcom/vanstone/appsdk/api/interfaces/IEthernetOperSer;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V = EthernetSaveStaticConfig(Android.Content.Context, Com.Vanstone.Appsdk.Api.Interfaces.IEthernetOperSer, string, string, string, string)
  EthernetSaveStaticConfig_Api(Landroid/content/Context;Lcom/vanstone/appsdk/api/interfaces/IEthernetOperSer;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V = EthernetSaveStaticConfig_Api(Android.Content.Context, Com.Vanstone.Appsdk.Api.Interfaces.IEthernetOperSer, string, string, string, string)
  getGprsAPNId(Ljava/lang/String;)Ljava/lang/String; = GetGprsAPNId(string)
  InitComm_Api(Landroid/content/Context;)V = InitComm_Api(Android.Content.Context)
  initWlsComm()V = InitWlsComm()
  openGPRS(Landroid/content/Context;Z)V = OpenGPRS(Android.Content.Context, bool)
  openGPRS_Api(Landroid/content/Context;Z)V = OpenGPRS_Api(Android.Content.Context, bool)
  PreDial_Api()V = PreDial_Api()
  SendModemCfgEx()V = SendModemCfgEx()
  setCurComm()V = SetCurComm()
  setSSLcert(Lcom/vanstone/trans/api/CommApi$CertInfo;)V = SetSSLcert(Com.Vanstone.Trans.Api.CommApi.CertInfo)
  SslGetVer_Api([B)V = SslGetVer_Api(byte[])
  SslSaveCertBuf_Api(II[BI)I = SslSaveCertBuf_Api(int, int, byte[], int)
  SslSelCerts_Api(II)I = SslSelCerts_Api(int, int)
  Wls_BlueConnect()I = Wls_BlueConnect()
  Wls_BluetoothRecv([B[BI)I = Wls_BluetoothRecv(byte[], byte[], int)
  Wls_BluetoothSend([BII)I = Wls_BluetoothSend(byte[], int, int)
com/vanstone/trans/api/constants/CommApiConstants = Com.Vanstone.Trans.Api.Constants.CommApiConstants
  <init>()V = .ctor()
  MDM_BYPHONEBUSY = MdmByphonebusy
  MDM_CALLEEBUSY = MdmCalleebusy
  MDM_COMERR = MdmComerr
  MDM_DIALING = MdmDialing
  MDM_DIALTIMEOUT = MdmDialtimeout
  MDM_DIGITLINE = MdmDigitline
  MDM_EXCMDOVER = MdmExcmdover
  MDM_EXCMDPARAERR = MdmExcmdparaerr
  MDM_HARDERR = MdmHarderr
  MDM_IDLE = MdmIdle
  MDM_INVALIDDATA = MdmInvaliddata
  MDM_NOANSWER = MdmNoanswer
  MDM_NOCARRIER = MdmNocarrier
  MDM_NODIALTONE = MdmNodialtone
  MDM_NOLINE = MdmNoline
  MDM_RESPERR = MdmResperr
  MDM_RXBUFEMPTY = MdmRxbufempty
  MDM_SUCCESS = MdmSuccess
  MDM_SYNCERR = MdmSyncerr
  MDM_TXBUFOVER = MdmTxbufover
  MDM_UNKNOWERR = MdmUnknowerr
  MDM_USERCANCEL = MdmUsercancel
com/vanstone/trans/api/constants/Config = Com.Vanstone.Trans.Api.Constants.Config
  <init>()V = .ctor()
  AMT_STYLE = AmtStyle
  CMD_BAR_HEIGHT = CmdBarHeight
  colWidth = ColWidth
  fontHeight = FontHeight
  halfHeight = HalfHeight
  halfWidth = HalfWidth
  IP_STYLE = IpStyle
  menuFocusFlag = MenuFocusFlag
  NUMBER_STYLE = NumberStyle
  pageSize = PageSize
  PASS_STYLE = PassStyle
  PHONE_STYLE = PhoneStyle
  screenHeight = ScreenHeight
  screenWidth = ScreenWidth
  SPINER_STYLE = SpinerStyle
  STYLE_BUTTON = StyleButton
  STYLE_IMAGE = StyleImage
  STYLE_LINE = StyleLine
  STYLE_PASSWD = StylePasswd
  STYLE_PROGRESSBAR = StyleProgressbar
  STYLE_RADIOBUTTON = StyleRadiobutton
  STYLE_SPINNER = StyleSpinner
  STYLE_TEXT = StyleText
  STYLE_TEXTFIELD = StyleTextfield
  textBoxHeight = TextBoxHeight
  TEXT_PASS_STYLE = TextPassStyle
  TEXT_STYLE = TextStyle
  titleHeight = TitleHeight
  getListPageSize()I = ListPageSize
  setScreenSize(II)V = SetScreenSize(int, int)
com/vanstone/trans/api/constants/CoreDefConstants = Com.Vanstone.Trans.Api.Constants.CoreDefConstants
  <init>()V = .ctor()
  ACCOUT = Accout
  AER = Aer
  ALPHA = Alpha
  BACK = Back
  BE_ON_HOOK = BeOnHook
  BIG = Big
  BLUETOOTH = Bluetooth
  CANCELKEY = Cancelkey
  CARDOPSERR = Cardopserr
  CARDOPSSUC = Cardopssuc
  CDISP = Cdisp
  CDMA = Cdma
  CID = Cid
  CLEAR = Clear
  CLOSE_TIMER = CloseTimer
  COM = Com
  CSR = Csr
  CTRLA = Ctrla
  DAIL_EN = DailEn
  DAIL_FAIL = DailFail
  DAILING = Dailing
  DAIL_OK = DailOk
  DEL = Del
  DEV_IC_NO = DevIcNo
  DEV_MAG_TK1_DIS = DevMagTk1Dis
  DEV_MAG_TK1_EN = DevMagTk1En
  DEV_SIM_NO1 = DevSimNo1
  DEV_SIM_NO2 = DevSimNo2
  DEV_SIM_NO4 = DevSimNo4
  DIALIN = Dialin
  DIALOUT = Dialout
  DIGITAL0 = Digital0
  DIGITAL1 = Digital1
  DIGITAL2 = Digital2
  DIGITAL3 = Digital3
  DIGITAL4 = Digital4
  DIGITAL5 = Digital5
  DIGITAL6 = Digital6
  DIGITAL7 = Digital7
  DIGITAL8 = Digital8
  DIGITAL9 = Digital9
  DOUBLESIZE_PRN = DoublesizePrn
  DOWN = Down
  DOWNLINE = Downline
  ENTER = Enter
  EQU = Equ
  ESC = Esc
  EXICCARD = Exiccard
  EXPICCCARD = Expicccard
  F1 = F1
  F2 = F2
  F3 = F3
  FAILOPR = Failopr
  FALSE = False
  FDISP = Fdisp
  FEED_PAPER = FeedPaper
  FEnd = FEnd
  FLASH = Flash
  FNF = Fnf
  FORMFEED = Formfeed
  FSK = Fsk
  FULLDOT_PRN = FulldotPrn
  FUNCTION = Function
  GPRS = Gprs
  HALFDOT_PRN = HalfdotPrn
  HZ2020_PRN = Hz2020Prn
  INCOL = Incol
  ISF = Isf
  ISL = Isl
  KEYNULL = Keynull
  KEYOK = Keyok
  KEY_REPRINT = KeyReprint
  LAN = Lan
  LANG_CH = LangCh
  LANG_PERSIAN = LangPersian
  LCDCHARWIDTH = Lcdcharwidth
  LCDMAXDISP = Lcdmaxdisp
  LCDWORDWIDTH = Lcdwordwidth
  LDISP = Ldisp
  LEFT = Left
  LINE1 = Line1
  LINE2 = Line2
  LINE3 = Line3
  LINE4 = Line4
  LINE5 = Line5
  LINE6 = Line6
  LINE7 = Line7
  LINE8 = Line8
  LIT = Lit
  LST = Lst
  MAXCHAR_POS = MaxcharPos
  MAXCOL = Maxcol
  MAXROW = Maxrow
  MENU = Menu
  MMI_DATETIME = MmiDatetime
  MMI_DISP = MmiDisp
  MMI_GBCODE = MmiGbcode
  MMI_HEX = MmiHex
  MMI_JNCODE = MmiJncode
  MMI_LEFT = MmiLeft
  MMI_LETTER = MmiLetter
  MMI_MULTTASK = MmiMulttask
  MMI_NOSCRSCAN = MmiNoscrscan
  MMI_NUMBER = MmiNumber
  MMI_POINT = MmiPoint
  MMI_PWD = MmiPwd
  MMI_QWCODE = MmiQwcode
  MMI_SYMBOL = MmiSymbol
  MMI_T9 = MmiT9
  MMI_TIME = MmiTime
  MMI_TRAN_PWD = MmiTranPwd
  MODEM = Modem
  MSG_DISCARD = MsgDiscard
  MSG_HIGH = MsgHigh
  MSG_INIT = MsgInit
  MSG_KEEP = MsgKeep
  MSG_NORMAL = MsgNormal
  MSG_OUT = MsgOut
  MSG_SERVICE = MsgService
  MSG_TERMINAL = MsgTerminal
  NFN = Nfn
  NFS = Nfs
  NNF = Nnf
  NO_CARRY = NoCarry
  NOFDISP = Nofdisp
  NOHOOK = Nohook
  NSD = Nsd
  NULL = Null
  OFF_HOOK = OffHook
  ON_HOOK = OnHook
  OVERLINE = Overline
  PARAMERROR = Paramerror
  PARAMNULL = Paramnull
  PAY = Pay
  PEDICCARD = Pediccard
  PEDPICCCARD = Pedpicccard
  PGDWON = Pgdwon
  PGLEFT = Pgleft
  PGRIGHT = Pgright
  PGUP = Pgup
  PHONEENABLEO = Phoneenableo
  PHONEENABLEW = Phoneenablew
  PHONEFLAG_ENABLE = PhoneflagEnable
  PHONEFLAG_HALT = PhoneflagHalt
  PHONEFLAG_NOHOOK = PhoneflagNohook
  PHONEFLAG_SPK = PhoneflagSpk
  PHONEFLAG_UNENABLE = PhoneflagUnenable
  PHONEFLAG_VACANCY = PhoneflagVacancy
  PHONEINPUTO = Phoneinputo
  PHONELINE_EXT = PhonelineExt
  PHONELINE_FAIL = PhonelineFail
  PHONELINE_NOHALT = PhonelineNohalt
  PHONELINE_NOLINE = PhonelineNoline
  PHONESTATE_CALLDISPLAY = PhonestateCalldisplay
  PHONESTATE_CALLING = PhonestateCalling
  PHONESTATE_CALLING_APP = PhonestateCallingApp
  PHONESTATE_CALL_START = PhonestateCallStart
  PHONESTATE_DIAL_FAILING = PhonestateDialFailing
  PHONESTATE_DIALING = PhonestateDialing
  PHONESTATE_DIAL_SUCCESSFUL = PhonestateDialSuccessful
  PHONESTATE_DTMF_DATA = PhonestateDtmfData
  PHONESTATE_FSK_DATA = PhonestateFskData
  PHONESTATE_HALT = PhonestateHalt
  PHONESTATE_HALT_APP = PhonestateHaltApp
  PHONESTATE_MAY_DIAL = PhonestateMayDial
  PHONESTATE_MENU = PhonestateMenu
  PHONESTATE_MENUNOHOOK = PhonestateMenunohook
  PHONESTATE_NOHOOK = PhonestateNohook
  PHONESTATE_NOHOOK_HALT = PhonestateNohookHalt
  PHONESTATE_OTHAR_HALT = PhonestateOtharHalt
  PHONESTATE_RING = PhonestateRing
  PHONESTATE_RING_VANISH = PhonestateRingVanish
  PHONESTATE_SEVERIN = PhonestateSeverin
  PHONESTATE_TALKING = PhonestateTalking
  PHONESTATE_VACANCY = PhonestateVacancy
  PHONESTATE_WAIT_TALKING = PhonestateWaitTalking
  PHONEUNENABLE = Phoneunenable
  PPP = Ppp
  PRN_BMP = PrnBmp
  PRN_CANCE = PrnCance
  PRN_FEEDING = PrnFeeding
  PRN_FINISH = PrnFinish
  PRN_FREE = PrnFree
  PRN_NO_PAPER = PrnNoPaper
  PRN_OVER_TEMP = PrnOverTemp
  PRN_PRINTING = PrnPrinting
  PRN_THMTYPE0816 = PrnThmtype0816
  PRN_THMTYPE2424 = PrnThmtype2424
  PRN_THMTYPE2448 = PrnThmtype2448
  PRN_THMTYPE4824 = PrnThmtype4824
  PRN_THMTYPE4848 = PrnThmtype4848
  RDISP = Rdisp
  READMAG_ERR = ReadmagErr
  REC_DTMF_DATA = RecDtmfData
  REC_FSK_DATA = RecFskData
  REDIAL = Redial
  RETURNKEY = Returnkey
  RFL = Rfl
  RIGHT = Right
  RING = Ring
  RING_LOSS = RingLoss
  RNE = Rne
  SER = Ser
  SET = Set
  SIDELINE = Sideline
  SMS = Sms
  SOK = Sok
  SSL = Ssl
  START_TIMER = StartTimer
  SUCCESS = Success
  SYSDIRLEN = Sysdirlen
  TAIKING = Taiking
  TEL_MODEM_IDLE = TelModemIdle
  TIMEAUTO = Timeauto
  TIMER_IME_LENGTH = TimerImeLength
  TIMER_IME_MASK = TimerImeMask
  TIMER_IME_MS = TimerImeMs
  TIMER_TQS_LENGTH = TimerTqsLength
  TIMER_TQS_MASK = TimerTqsMask
  TIMER_TQS_MS = TimerTqsMs
  TIMER_USR1_LENGTH = TimerUsr1Length
  TIMER_USR1_MASK = TimerUsr1Mask
  TIMER_USR1_MS = TimerUsr1Ms
  TIMER_USR2_LENGTH = TimerUsr2Length
  TIMER_USR2_MASK = TimerUsr2Mask
  TIMER_USR2_MS = TimerUsr2Ms
  TK1_CHG_LEN = Tk1ChgLen
  TK1_LEN = Tk1Len
  TK1_MIN_LEN = Tk1MinLen
  TK2_CHG_LEN = Tk2ChgLen
  TK2_LEN = Tk2Len
  TK2_MIN_LEN = Tk2MinLen
  TK3_CHG_LEN = Tk3ChgLen
  TK3_LEN = Tk3Len
  TK3_MIN_LEN = Tk3MinLen
  TK_DATA = TkData
  TOPWDPAD = Topwdpad
  TRUE = True
  UP = Up
  WAIT_BE_HOOK = WaitBeHook
  WFL = Wfl
  WIFI = Wifi
com/vanstone/trans/api/constants/EmvLibConstants = Com.Vanstone.Trans.Api.Constants.EmvLibConstants
  <init>()V = .ctor()
  CHINESE = Chinese
  EMV_GET_ADVICESUPPORTINFO = EmvGetAdvicesupportinfo
  EMV_GET_BATCHCAPTUREINFO = EmvGetBatchcaptureinfo
  EMV_GET_POSENTRYMODE = EmvGetPosentrymode
  EMV_OK = EmvOk
  E_NEED_FALLBACK = ENeedFallback
  ENGLISH = English
  ERR_AGAIN = ErrAgain
  ERR_ALLFLASH_TIMEOUT = ErrAllflashTimeout
  ERR_APPBLOCK = ErrAppblock
  ERR_APPEXP = ErrAppexp
  ERR_BLACKLIST = ErrBlacklist
  ERR_CAPKCHECKSUM = ErrCapkchecksum
  ERR_CLNOTALLOWED = ErrClnotallowed
  ERR_CMDNOEXIST = ErrCmdnoexist
  ERR_CMDNOTSUPPORT = ErrCmdnotsupport
  ERR_CONDNOTSATISFIED = ErrCondnotsatisfied
  ERR_CURRFLASH_TIMEOUT = ErrCurrflashTimeout
  ERR_DATA_EXIST = ErrDataExist
  ERR_DENIALFORECC = ErrDenialforecc
  ERR_ECBALANCE_SHORT = ErrEcbalanceShort
  ERR_EMVDATA = ErrEmvdata
  ERR_EMVDENIAL = ErrEmvdenial
  ERR_EMVREADFILE = ErrEmvreadfile
  ERR_EMVRSP = ErrEmvrsp
  ERR_EMVWRITEFILE = ErrEmvwritefile
  ERR_EXCEEDED_CLFLOORLMT = ErrExceededClfloorlmt
  ERR_FILE = ErrFile
  ERR_FLASHED_CARD = ErrFlashedCard
  ERR_FLASH_READCARD = ErrFlashReadcard
  ERR_FLASH_RECOVER_FAIL = ErrFlashRecoverFail
  ERR_GENAC1_6985 = ErrGenac16985
  ERR_GPORSP = ErrGporsp
  ERR_ICCBLOCK = ErrIccblock
  ERR_ICCCMD = ErrIcccmd
  ERR_ICCINSERTED = ErrIccinserted
  ERR_ICCNORECORD = ErrIccnorecord
  ERR_ICCRESET = ErrIccreset
  ERR_KEYEXP = ErrKeyexp
  ERR_LENERR = ErrLenerr
  ERR_MACCHECK = ErrMaccheck
  ERR_MEMERR = ErrMemerr
  ERR_NOAMOUNT = ErrNoamount
  ERR_NOAPP = ErrNoapp
  ERR_NODATA = ErrNodata
  ERR_NOFILE = ErrNofile
  ERR_NOLOGITEM = ErrNologitem
  ERR_NOPIN = ErrNopin
  ERR_NOPINPAD = ErrNopinpad
  ERR_NORECORD = ErrNorecord
  ERR_NOTACCEPT = ErrNotaccept
  ERR_NOTFOUND = ErrNotfound
  ERR_NOTRANSLOG = ErrNotranslog
  ERR_OVERFLOW = ErrOverflow
  ERR_PARAM = ErrParam
  ERR_PINBLOCK = ErrPinblock
  ERR_QPBOCFDDAFAIL = ErrQpbocfddafail
  ERR_READ_LAST_REC = ErrReadLastRec
  ERR_RFNOTAG9F66 = ErrRfnotag9f66
  ERR_RMAC = ErrRmac
  ERR_SEEPHONE = ErrSeephone
  ERR_SELECTNEXT = ErrSelectnext
  ERR_TCUNAVAILABLE = ErrTcunavailable
  ERR_TIMEOUT = ErrTimeout
  ERR_TRANSEXCEEDED = ErrTransexceeded
  ERR_UNIMPL_CB = ErrUnimplCb
  ERR_UNSUPPORTED = ErrUnsupported
  ERR_USECONTACT = ErrUsecontact
  ERR_USEDFLASHED_CARD = ErrUsedflashedCard
  ERR_USERCANCEL = ErrUsercancel
  FULL_MATCH = FullMatch
  LED_ALL = LedAll
  LED_BLUE = LedBlue
  LED_GREEN = LedGreen
  LED_RED = LedRed
  LED_YELLOW = LedYellow
  MAX_APPNAME_LEN = MaxAppnameLen
  MAX_APP_NUM = MaxAppNum
  MAX_CAPK_NUM = MaxCapkNum
  MAX_CAPKREVOKE_NUM = MaxCapkrevokeNum
  ONLINE_ABORT = OnlineAbort
  ONLINE_APPROVE = OnlineApprove
  ONLINE_DENIAL = OnlineDenial
  ONLINE_FAILED = OnlineFailed
  ONLINE_REFER = OnlineRefer
  ONLINE_REFERANDFAIL = OnlineReferandfail
  PART_MATCH = PartMatch
  PATH_ECash = PATHECash
  PATH_JSPEEDY = PathJspeedy
  PATH_MSD = PathMsd
  PATH_PAYPASS = PathPaypass
  PATH_PAYWAVE = PathPaywave
  PATH_PBOC = PathPboc
  PATH_QPBOC = PathQpboc
  pcbCardInQPSBinList = PcbCardInQPSBinList
  pcbfAccountTypeSelect = PcbfAccountTypeSelect
  pcbfAdviceProc = PcbfAdviceProc
  pcbfAppConfirmBeforeSelect = PcbfAppConfirmBeforeSelect
  pcbfDispCardNo = PcbfDispCardNo
  pcbfGetAllAmt = PcbfGetAllAmt
  pcbfGetDateTime = PcbfGetDateTime
  pcbfGetEccSignAndAmt = PcbfGetEccSignAndAmt
  pcbfGetHolderPwd = PcbfGetHolderPwd
  pcbfGetIFDSerialNum = PcbfGetIFDSerialNum
  pcbfGetUnknowTLV = PcbfGetUnknowTLV
  pcbfHandleBeforeGPO = PcbfHandleBeforeGPO
  pcbfInputAmt = PcbfInputAmt
  pcbfReadAndHandleQPbocExData = PcbfReadAndHandleQPbocExData
  pcbfReferProc = PcbfReferProc
  pcbfUpdateQPbocExData = PcbfUpdateQPbocExData
  pcbfVerifyCert = PcbfVerifyCert
  pcbfVerifyPINOK = PcbfVerifyPINOK
  pcbfWaitAppSel = PcbfWaitAppSel
  pcbHandleAfterReadCardNo = PcbHandleAfterReadCardNo
  pcbIoCtrl = PcbIoCtrl
  pcbSpecifyQPSHandle = PcbSpecifyQPSHandle
  REFER_APPROVE = ReferApprove
  REFER_DENIAL = ReferDenial
  TRADE_CHANNEL_AUTO = TradeChannelAuto
  TRADE_CHANNEL_CLPBOC = TradeChannelClpboc
  TRADE_CHANNEL_OFFLINE = TradeChannelOffline
  TRADE_CHANNEL_ONLINE = TradeChannelOnline
  TRAN_TYPE_CASH = TranTypeCash
  TRAN_TYPE_CASHBACK = TranTypeCashback
  TRAN_TYPE_CASH_SAVING = TranTypeCashSaving
  TRAN_TYPE_CREDITS_ADJUST = TranTypeCreditsAdjust
  TRAN_TYPE_DEBITS_ADJUST = TranTypeDebitsAdjust
  TRAN_TYPE_DEPOSITS = TranTypeDeposits
  TRAN_TYPE_GOODS = TranTypeGoods
  TRAN_TYPE_GUARANTEE = TranTypeGuarantee
  TRAN_TYPE_INQUIRY = TranTypeInquiry
  TRAN_TYPE_INQUIRY_UBAL = TranTypeInquiryUbal
  TRAN_TYPE_LOAD = TranTypeLoad
  TRAN_TYPE_NA_LOAD = TranTypeNaLoad
  TRAN_TYPE_PAYMENT = TranTypePayment
  TRAN_TYPE_RETURNS = TranTypeReturns
  TRAN_TYPE_TRANSFER = TranTypeTransfer
  TYPE_ADMINISTRATIVE = TypeAdministrative
  TYPE_CASH = TypeCash
  TYPE_CASHBACK = TypeCashback
  TYPE_GOODS = TypeGoods
  TYPE_INQUIRY = TypeInquiry
  TYPE_PAYMENT = TypePayment
  TYPE_SERVICE = TypeService
  TYPE_TRANSFER = TypeTransfer
com/vanstone/trans/api/constants/ExcLibConstants = Com.Vanstone.Trans.Api.Constants.ExcLibConstants
  <init>()V = .ctor()
  INCREMENT = Increment
  MULTIPLIER = Multiplier
com/vanstone/trans/api/constants/ExComConstants = Com.Vanstone.Trans.Api.Constants.ExComConstants
  <init>()V = .ctor()
  ICCDETECTEX_API = IccdetectexApi
  ICCINITEX_API = IccinitexApi
  ICCISOCOMMANDEX_API = IccisocommandexApi
  ICCPOWEROFFEX_API = IccpoweroffexApi
  MAXSENDRECVLEN = Maxsendrecvlen
  NOUSEDATALEN = Nousedatalen
  PICCCHECKEX_API = PicccheckexApi
  PICCCLOSEEX_API = PicccloseexApi
  PICCISOCOMMANDEX_API = PiccisocommandexApi
  PICCOPENEX_API = PiccopenexApi
  PICCREMOVEEX_API = PiccremoveexApi
  PINPADCOM = Pinpadcom
  PPDESEX_API = PpdesexApi
  PPGETEXPRESSEX_API = PpgetexpressexApi
  PPGETPWDEX_API = PpgetpwdexApi
  PPMACEX_API = PpmacexApi
  PPREADPINPADSNEX_API = PpreadpinpadsnexApi
  PPSAVEPINPADSNEX_API = PpsavepinpadsnexApi
  PPWRITEICBCKEYEX_API = PpwriteicbckeyexApi
  PPWRITEMKEYEX_API = PpwritemkeyexApi
  PPWRITEWKEYEX_API = PpwritewkeyexApi
  QPBOCBALANCEEX_API = QpbocbalanceexApi
  QPBOCDETAILEX_API = QpbocdetailexApi
  QPBOCSALEEX_API = QpbocsaleexApi
  RS232READFAIL = Rs232readfail
  RS232WRITEFAIL = Rs232writefail
  SCRBACKLIGHTEX_API = ScrbacklightexApi
  SCRCLRLINEEX_API = ScrclrlineexApi
  SCRCLSEX_API = ScrclsexApi
  SCRDISPEX_API = ScrdispexApi
  SCRFONTSETEX_API = ScrfontsetexApi
  SCRGRAYEC_API = ScrgrayecApi
  SOH_LEN = SohLen
com/vanstone/trans/api/constants/FileApiConstants = Com.Vanstone.Trans.Api.Constants.FileApiConstants
  <init>()V = .ctor()
  MAX_FILE_NAME_LEN = MaxFileNameLen
  RW_BUFFER_SIZE = RwBufferSize
com/vanstone/trans/api/constants/GlobalConstants = Com.Vanstone.Trans.Api.Constants.GlobalConstants
  <init>()V = .ctor()
  CurAppDir = CurAppDir
  OK = Ok
  PIN_PED = PinPed
  PIN_PP = PinPp
com/vanstone/trans/api/constants/InputApiConstants = Com.Vanstone.Trans.Api.Constants.InputApiConstants
  <init>()V = .ctor()
  INPUT_TIMEOUT = InputTimeout
  KEY_BUF_SIZE = KeyBufSize
  MMI_DATETIME = MmiDatetime
  MMI_DISP = MmiDisp
  MMI_GBCODE = MmiGbcode
  MMI_HEX = MmiHex
  MMI_JNCODE = MmiJncode
  MMI_LEFT = MmiLeft
  MMI_LETTER = MmiLetter
  MMI_MULTTASK = MmiMulttask
  MMI_NUMBER = MmiNumber
  MMI_POINT = MmiPoint
  MMI_PWD = MmiPwd
  MMI_QWCODE = MmiQwcode
  MMI_SYMBOL = MmiSymbol
  MMI_T9 = MmiT9
  MMI_TIME = MmiTime
com/vanstone/trans/api/constants/ItwellConstants = Com.Vanstone.Trans.Api.Constants.ItwellConstants
  <init>()V = .ctor()
  AMT_WIDTH = AmtWidth
  COM_PAD_NO = ComPadNo
  PACKSIZE = Packsize
com/vanstone/trans/api/constants/LcdApiConstants = Com.Vanstone.Trans.Api.Constants.LcdApiConstants
  <init>()V = .ctor()
  CDISP = Cdisp
  DOWNLINE = Downline
  FDISP = Fdisp
  INCOL = Incol
  LDISP = Ldisp
  LEDALL = Ledall
  LEDBLUE = Ledblue
  LEDGREEN = Ledgreen
  LEDRED = Ledred
  LEDYELLOW = Ledyellow
  NOFDISP = Nofdisp
  OVERLINE = Overline
  RDISP = Rdisp
  SAMEPAGETEXTBOX = Samepagetextbox
  SIDELINE = Sideline
  V10_MAXCOL = V10Maxcol
  V10_MAXLINE = V10Maxline
  V32_MAXCOL = V32Maxcol
  V32_MAXLINE = V32Maxline
com/vanstone/trans/api/constants/MallocConstants = Com.Vanstone.Trans.Api.Constants.MallocConstants
  <init>()V = .ctor()
com/vanstone/trans/api/constants/ManageConstants = Com.Vanstone.Trans.Api.Constants.ManageConstants
  <init>()V = .ctor()
  MULINFOFILELEN = Mulinfofilelen
  NAMELEN = Namelen
com/vanstone/trans/api/constants/PedApiConstants = Com.Vanstone.Trans.Api.Constants.PedApiConstants
  <init>()V = .ctor()
  DECRYP = Decryp
  DES3TEMPINDEX = Des3tempindex
  DESTEMPINDEX = Destempindex
  ENCRYP = Encryp
  ICBCTEMPINDEX = Icbctempindex
com/vanstone/trans/api/constants/PhoneFunApiConstants = Com.Vanstone.Trans.Api.Constants.PhoneFunApiConstants
  <init>()V = .ctor()
  BEEPERROR = Beeperror
  BEEPNORMAL = Beepnormal
  DIAL_MODE_FREE = DialModeFree
  DIAL_MODE_HANDSFREE = DialModeHandsfree
  DIAL_MODE_HOOKOFF = DialModeHookoff
  LCDCONTRACTMAX = Lcdcontractmax
  LCDCONTRACTMIM = Lcdcontractmim
  MAXTELFILELEN = Maxtelfilelen
  MIDI_EVENT_NUM = MidiEventNum
  PHONE_DEFAULT_MIDI_INDEX = PhoneDefaultMidiIndex
  PHONE_DEFAULT_MIDI_VOL = PhoneDefaultMidiVol
  PHONE_MAX_MIDI_INDEX = PhoneMaxMidiIndex
  PHONE_MAX_MIDI_VOL = PhoneMaxMidiVol
  PHONE_MIN_MIDI_INDEX = PhoneMinMidiIndex
  PHONE_MIN_MIDI_VOL = PhoneMinMidiVol
  PHONE_MODE_TEL = PhoneModeTel
  PHONE_MODE_WLS = PhoneModeWls
  PHONENOTEFILE = Phonenotefile
  PHONENOTENUMBER = Phonenotenumber
  PHONE_STATE_DIAL = PhoneStateDial
  PHONE_STATE_FREE = PhoneStateFree
  PHONE_STATE_INCOME = PhoneStateIncome
  PHONE_STATE_TALK = PhoneStateTalk
  TELNUMBER = Telnumber
  TELNUMFILE = Telnumfile
  TELNUMLEN = Telnumlen
  TIMEOUT = Timeout
com/vanstone/trans/api/constants/PinPadConstants = Com.Vanstone.Trans.Api.Constants.PinPadConstants
  <init>()V = .ctor()
  CANCEL_HZ = CancelHz
  ENCRIPT_KEY_IDX = EncriptKeyIdx
  ERROR_HZ = ErrorHz
  HZ_INPUT_TV = HzInputTv
  INPUT_TIMEOUT = InputTimeout
  MAC_KEY_IDX = MacKeyIdx
  SUCCESS_HZ = SuccessHz
  TEMPWORKINDEX = Tempworkindex
com/vanstone/trans/api/constants/PosType = Com.Vanstone.Trans.Api.Constants.PosType
  <init>()V = .ctor()
  A90_S = A90S
  A90_Z = A90Z
  model = Model
  get(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; = Get(string, string)
com/vanstone/trans/api/constants/StructConstants = Com.Vanstone.Trans.Api.Constants.StructConstants
  <init>()V = .ctor()
  G_CommPara = GCommPara
com/vanstone/trans/api/constants/T9PinYinConstants = Com.Vanstone.Trans.Api.Constants.T9PinYinConstants
  <init>()V = .ctor()
  DOWNLINE = Downline
  LCDMAXDISP = Lcdmaxdisp
  OVERLINE = Overline
com/vanstone/trans/api/constants/TmsFuncConstants = Com.Vanstone.Trans.Api.Constants.TmsFuncConstants
  <init>()V = .ctor()
  APP_FILE_EXT = AppFileExt
  APPNUM = Appnum
  DIR_TMS = DirTms
  FNAME_TASKINI = FnameTaskini
  _FNAME_TASKINI = FnameTaskini
  MULTITASKINI = Multitaskini
  _MULTITASKINI = Multitaskini
  TMS_APPID = TmsAppid
  TMS_APPVER_LEN = TmsAppverLen
  TMS_FACTORY_ID = TmsFactoryId
  TMS_MACHINE_ID = TmsMachineId
com/vanstone/trans/api/constants/V70KEY = Com.Vanstone.Trans.Api.Constants.V70KEY
  <init>()V = .ctor()
  KEY_0 = Key0
  KEY_1 = Key1
  KEY_10 = Key10
  KEY_11 = Key11
  KEY_2 = Key2
  KEY_3 = Key3
  KEY_4 = Key4
  KEY_5 = Key5
  KEY_6 = Key6
  KEY_7 = Key7
  KEY_8 = Key8
  KEY_9 = Key9
  KEY_BACK = KeyBack
  KEY_CANCEL = KeyCancel
  KEY_DEL = KeyDel
  KEY_ENTER = KeyEnter
com/vanstone/trans/api/ContactlessApi = Com.Vanstone.Trans.Api.ContactlessApi
  <init>()V = .ctor()
  cardAAnticollision_Api([B[I)I = CardAAnticollision_Api(byte[], int[])
  cardADeselect_Api()I = CardADeselect_Api()
  cardAPause_Api()I = CardAPause_Api()
  cardARats_Api(I[B)I = CardARats_Api(int, byte[])
  cardAReq_Api([B)I = CardAReq_Api(byte[])
  cardAWakeUp_Api([B)I = CardAWakeUp_Api(byte[])
  closeField_Api()I = CloseField_Api()
  M1Decrement_Api(II)I = M1Decrement_Api(int, int)
  M1Increment_Api(II)I = M1Increment_Api(int, int)
  M1Restore_Api(I)I = M1Restore_Api(int)
  M1Transfer_Api(I)I = M1Transfer_Api(int)
  openField_Api()I = OpenField_Api()
  readSecurityMem_Api(I[BI)I = ReadSecurityMem_Api(int, byte[], int)
  writeSecurityMem_Api(I[BI)I = WriteSecurityMem_Api(int, byte[], int)
com/vanstone/trans/api/Crypto = Com.Vanstone.Trans.Api.Crypto
  <init>()V = .ctor()
  Des3Calc_Api([B[B[BI)V = Des3Calc_Api(byte[], byte[], byte[], int)
  DesCalc_Api([B[B[BI)V = DesCalc_Api(byte[], byte[], byte[], int)
  SslGenCSR_Api(Ljava/lang/String;IJI[B[B)I = SslGenCSR_Api(string, int, long, int, byte[], byte[])
  SslParsePKCS7_Api([BI)I = SslParsePKCS7_Api(byte[], int)
  SslSaveCertS_Api(Ljava/lang/String;)I = SslSaveCertS_Api(string)
  SslSignPKCS7_Api(Ljava/lang/String;[BI[B[B)I = SslSignPKCS7_Api(string, byte[], int, byte[], byte[])
com/vanstone/trans/api/DesfireCardApi = Com.Vanstone.Trans.Api.DesfireCardApi
  <init>()V = .ctor()
  DesfireAbortTransaction_Api()I = DesfireAbortTransaction_Api()
  DesfireAuth_Api(I[B)I = DesfireAuth_Api(int, byte[])
  DesfireAuthAes_Api(I[B)I = DesfireAuthAes_Api(int, byte[])
  DesfireAuthIso_Api(I[B)I = DesfireAuthIso_Api(int, byte[])
  DesfireCardCheck_Api(I[B[B)I = DesfireCardCheck_Api(int, byte[], byte[])
  DesfireCardClose_Api()I = DesfireCardClose_Api()
  DesfireCardOpen_Api()I = DesfireCardOpen_Api()
  DesfireChangeAppKey_Api(III[B[BI)I = DesfireChangeAppKey_Api(int, int, int, byte[], byte[], int)
  DesfireChangeFileSettings_Api(IIIIIII)I = DesfireChangeFileSettings_Api(int, int, int, int, int, int, int)
  DesfireChangeKeySetting_Api(I)I = DesfireChangeKeySetting_Api(int)
  DesfireChangePiccMkey_Api(I[BI)I = DesfireChangePiccMkey_Api(int, byte[], int)
  DesfireClearRecordFile_Api(I)I = DesfireClearRecordFile_Api(int)
  DesfireCommitTransaction_Api()I = DesfireCommitTransaction_Api()
  DesfireCreateApp_Api(Landroid/os/Bundle;)I = DesfireCreateApp_Api(Android.OS.Bundle)
  DesfireCreateBackupFile_Api(ILandroid/os/Bundle;)I = DesfireCreateBackupFile_Api(int, Android.OS.Bundle)
  DesfireCreateCyclicrecordFile_Api(ILandroid/os/Bundle;)I = DesfireCreateCyclicrecordFile_Api(int, Android.OS.Bundle)
  DesfireCreateRecordFile_Api(ILandroid/os/Bundle;)I = DesfireCreateRecordFile_Api(int, Android.OS.Bundle)
  DesfireCreateStdFile_Api(ILandroid/os/Bundle;)I = DesfireCreateStdFile_Api(int, Android.OS.Bundle)
  DesfireCreateValueFile_Api(ILandroid/os/Bundle;)I = DesfireCreateValueFile_Api(int, Android.OS.Bundle)
  DesfireCreditValueFile_Api(III)I = DesfireCreditValueFile_Api(int, int, int)
  DesfireDebitValueFile_Api(III)I = DesfireDebitValueFile_Api(int, int, int)
  DesfireDeleteApp_Api([B)I = DesfireDeleteApp_Api(byte[])
  DesfireDeleteFile_Api(I)I = DesfireDeleteFile_Api(int)
  DesfireFormatPicc_Api()I = DesfireFormatPicc_Api()
  DesfireGetAppIds_Api([B)I = DesfireGetAppIds_Api(byte[])
  DesfireGetDFNameInfoList_Api()Ljava/util/List; = DesfireGetDFNameInfoList_Api()
  DesfireGetFileIds_Api([B)I = DesfireGetFileIds_Api(byte[])
  DesfireGetFileSetting_Api(I)Landroid/os/Bundle; = DesfireGetFileSetting_Api(int)
  DesfireGetFreeMemory_Api()I = DesfireGetFreeMemory_Api()
  DesfireGetIsoFIDs_Api([B)I = DesfireGetIsoFIDs_Api(byte[])
  DesfireGetKeySetting_Api([B)I = DesfireGetKeySetting_Api(byte[])
  DesfireGetKeyVersion_Api(I[B)I = DesfireGetKeyVersion_Api(int, byte[])
  DesfireGetUid_Api([B)I = DesfireGetUid_Api(byte[])
  DesfireGetValue_Api(II[I)I = DesfireGetValue_Api(int, int, int[])
  DesfireGetVersion_Api()Landroid/os/Bundle; = DesfireGetVersion_Api()
  DesfireLimitedCreditValue_Api(III)I = DesfireLimitedCreditValue_Api(int, int, int)
  DesfireReadData_Api(CIII[B)I = DesfireReadData_Api(char, int, int, int, byte[])
  DesfireReadRecord_Api(IIIII[B)I = DesfireReadRecord_Api(int, int, int, int, int, byte[])
  DesfireSelectApp_Api([B)I = DesfireSelectApp_Api(byte[])
  DesfireWriteCrecord_Api(IIII[B)I = DesfireWriteCrecord_Api(int, int, int, int, byte[])
  DesfireWriteData_Api(IIII[B)I = DesfireWriteData_Api(int, int, int, int, byte[])
com/vanstone/trans/api/DevInfoApi = Com.Vanstone.Trans.Api.DevInfoApi
  <init>()V = .ctor()
  DevInfoGetAndroidKernelVersion_Api()Ljava/lang/String; = DevInfoGetAndroidKernelVersion_Api()
  DevInfoGetAndroidOSVersion_Api()Ljava/lang/String; = DevInfoGetAndroidOSVersion_Api()
  DevInfoGetFirmwareVersion_Api()Ljava/lang/String; = DevInfoGetFirmwareVersion_Api()
  DevInfoGetHardwareVersion_Api()Ljava/lang/String; = DevInfoGetHardwareVersion_Api()
  DevInfoGetICCID_Api()Ljava/lang/String; = DevInfoGetICCID_Api()
  DevInfoGetIMSI_Api()Ljava/lang/String; = DevInfoGetIMSI_Api()
  DevInfoGetManufacture_Api()Ljava/lang/String; = DevInfoGetManufacture_Api()
  DevInfoGetModel_Api()Ljava/lang/String; = DevInfoGetModel_Api()
  DevInfoGetROMVerion_Api()Ljava/lang/String; = DevInfoGetROMVerion_Api()
  DevInfogetSafeModuleVersion_Api()Ljava/lang/String; = DevInfogetSafeModuleVersion_Api()
  DevInfoGetSerialNo_Api()Ljava/lang/String; = DevInfoGetSerialNo_Api()
  DevInfoGetSETime_Api()Ljava/lang/Long; = DevInfoGetSETime_Api()
  DevInfoGetTUSN_Api()Ljava/lang/String; = DevInfoGetTUSN_Api()
  DevInfoUpdateSystemTime_Api(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/Boolean; = DevInfoUpdateSystemTime_Api(string, string)
com/vanstone/trans/api/ExComm = Com.Vanstone.Trans.Api.ExComm
  <init>()V = .ctor()
  APPUPDATEEX_API = AppupdateexApi
  BEEFEX_API = BeefexApi
  ERRORCMD_API = ErrorcmdApi
  FILEDELEX_API = FiledelexApi
  FILEGETSIZEEX_API = FilegetsizeexApi
  FILEREADEX_API = FilereadexApi
  FILERENAMEEX_API = FilerenameexApi
  FILESAVEWHOLEFILEEX_API = FilesavewholefileexApi
  FILEWRITEEX_API = FilewriteexApi
  ICCDETECTEX_API = IccdetectexApi
  ICCINITEX_API = IccinitexApi
  ICCISOCOMMANDEX_API = IccisocommandexApi
  ICCPOWEROFFEX_API = IccpoweroffexApi
  KBMUTE_API = KbmuteApi
  LEDLIGHTOFFEX_API = LedlightoffexApi
  LEDLIGHTONEX_API = LedlightonexApi
  MAGCLOSEEX_API = MagcloseexApi
  MAGGETTRADCODE_API = MaggettradcodeApi
  MAGOPENEX_API = MagopenexApi
  MAGREADEX_API = MagreadexApi
  MAGREADRAWDATAEX_API = MagreadrawdataexApi
  MAGRESETEX_API = MagresetexApi
  MAGSWIPEDEX_API = MagswipedexApi
  MAXSENDRECVLEN = Maxsendrecvlen
  NOUSEDATALEN = Nousedatalen
  PICCCHECKEX_API = PicccheckexApi
  PICCCLOSEEX_API = PicccloseexApi
  PICCGETCARDINFOEX_API = PiccgetcardinfoexApi
  PICCISOCOMMANDEX2_API = Piccisocommandex2Api
  PICCISOCOMMANDEX_API = PiccisocommandexApi
  PICCOPENEX_API = PiccopenexApi
  PICCREMOVEEX_API = PiccremoveexApi
  PICCRESETEX_API = PiccresetexApi
  PLAYSOUNDEX_API = PlaysoundexApi
  PPDESEX_API = PpdesexApi
  PPDUKPTINCKSN_API = PpdukptincksnApi
  PPDUKPTTDES_API = PpdukpttdesApi
  PPDUKTWRITETIK_API = PpduktwritetikApi
  PPGETDUKPTKSN_API = PpgetdukptksnApi
  PPGETEXPRESSEX_API = PpgetexpressexApi
  PPGETMACDUKPT_API = PpgetmacdukptApi
  PPGETPINDUKPT_API = PpgetpindukptApi
  PPGETPWDEX_API = PpgetpwdexApi
  PPGETSCANFEX_API = PpgetscanfexApi
  PPGETTERMINFOREX_API = PpgetterminforexApi
  PPGETVERSION_API = PpgetversionApi
  PPMACEX_API = PpmacexApi
  PPPEDINIT_API = PppedinitApi
  PPPOWEROFF_API = PppoweroffApi
  PPPOWERON_API = PppoweronApi
  PPPREGETPWD_API = PppregetpwdApi
  PPREADPINPADSNEX_API = PpreadpinpadsnexApi
  PPSAVEPINPADSNEX_API = PpsavepinpadsnexApi
  PPWRITEICBCKEYEX_API = PpwriteicbckeyexApi
  PPWRITEKEY_API = PpwritekeyApi
  PPWRITEMKEYEX_API = PpwritemkeyexApi
  PPWRITEMKEYMODE = Ppwritemkeymode
  PPWRITEWKEYEX_API = PpwritewkeyexApi
  QPBOCBALANCEEX_API = QpbocbalanceexApi
  QPBOCDETAILEX_API = QpbocdetailexApi
  QPBOCSALEEX_API = QpbocsaleexApi
  RS232READFAIL = Rs232readfail
  RS232WRITEFAIL = Rs232writefail
  SCANCLOSEEX_API = ScancloseexApi
  SCANGETDATAEX_API = ScangetdataexApi
  SCANOPENEX_API = ScanopenexApi
  SCRBACKLIGHTEX_API = ScrbacklightexApi
  SCRBRUSHEX_API = ScrbrushexApi
  SCRCLRLINEEX_API = ScrclrlineexApi
  SCRCLSEX_API = ScrclsexApi
  SCRDISPEX_API = ScrdispexApi
  SCRDISPSETEX_API = ScrdispsetexApi
  SCRFONTSETEX_API = ScrfontsetexApi
  SCRFRAMESETCOLOR_API = ScrframesetcolorApi
  SCRGRAYEC_API = ScrgrayecApi
  SCRPINPADFACEEX_API = ScrpinpadfaceexApi
  SCRSHOWMUILINEEX_API = ScrshowmuilineexApi
  SETBAUDEEX_API = SetbaudeexApi
  SHOWBMPFILEEX_API = ShowbmpfileexApi
  SIDCARDCOMMANDEX_API = SidcardcommandexApi
  SM2INITEX = Sm2initex
  SM2VERIFYEX = Sm2verifyex
  SM3EX = Sm3ex
  SOH_LEN = SohLen
  SPADCAL_0xE0 = SPADCAL0xE0
  SYSCONFIGEX_API = SysconfigexApi
  WAITANYKEYEX_API = WaitanykeyexApi
  WAITENTERANDESCEX = Waitenterandescex
  MakeRs232SendPack(I[BI)I = MakeRs232SendPack(int, byte[], int)
  PPPortSetBaud(IIII)I = PPPortSetBaud(int, int, int, int)
  RecvDatas([BII)I = RecvDatas(byte[], int, int)
  Rs232Read(I[B[BI)I = Rs232Read(int, byte[], byte[], int)
  Rs232Write([BI)I = Rs232Write(byte[], int)
  SendDatas([BI)I = SendDatas(byte[], int)
  setRs232Oper(Lcom/vanstone/trans/api/ExComm$IRs232Oper;)V = SetRs232Oper(Com.Vanstone.Trans.Api.ExComm.IRs232Oper)
  SigPadCommand(I[B[BI)I = SigPadCommand(int, byte[], byte[], int)
com/vanstone/trans/api/FileApi = Com.Vanstone.Trans.Api.FileApi
  <init>(Landroid/content/Context;)V = .ctor(Android.Content.Context)
  appShareFileName = AppShareFileName
  mcontext = Mcontext
  getAppDataPath()Ljava/lang/String; = AppDataPath
  getAppDataPaths()Ljava/lang/String; = AppDataPaths
  getAppPath()Ljava/lang/String; = AppPath
  getFileNameEncoding()Ljava/lang/String; = FileNameEncoding
  setFileNameEncoding(Ljava/lang/String;)V = FileNameEncoding
  getPublicPath()Ljava/lang/String; = PublicPath
  ChangePrivateProfileSectionName_Api(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)I = ChangePrivateProfileSectionName_Api(string, string, string)
  CreateAppFolder(Ljava/lang/String;)V = CreateAppFolder(string)
  DeleteDebug_Api(Ljava/lang/String;)I = DeleteDebug_Api(string)
  DelFile_Api(Ljava/lang/String;)I = DelFile_Api(string)
  FileCRC32(Ljava/lang/String;I[B)I = FileCRC32(string, int, byte[])
  GetFileSize_Api(Ljava/lang/String;)I = GetFileSize_Api(string)
  GetPrivateProfileSection_Api(Ljava/lang/String;[BLjava/lang/String;)I = GetPrivateProfileSection_Api(string, byte[], string)
  GetPrivateProfileString_Api(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;[BLjava/lang/String;)I = GetPrivateProfileString_Api(string, string, string, byte[], string)
  ReadAppShare_Api(I[BI)I = ReadAppShare_Api(int, byte[], int)
  ReadFile_Api(Ljava/lang/String;[BI[B)I = ReadFile_Api(string, byte[], int, byte[])
  ReadFileLine(Ljava/lang/String;)Ljava/util/List; = ReadFileLine(string)
  ReNameFile_Api(Ljava/lang/String;Ljava/lang/String;)I = ReNameFile_Api(string, string)
  SaveWholeFile_Api(Ljava/lang/String;[BI)I = SaveWholeFile_Api(string, byte[], int)
  WriteAppShare_Api(I[BI)I = WriteAppShare_Api(int, byte[], int)
  WriteFile_Api(Ljava/lang/String;[BII)I = WriteFile_Api(string, byte[], int, int)
  WritePrivateProfileString_Api(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)I = WritePrivateProfileString_Api(string, string, string, string)
com/vanstone/trans/api/FileExApi = Com.Vanstone.Trans.Api.FileExApi
  <init>()V = .ctor()
  DelFileEx_Api(Ljava/lang/String;)I = DelFileEx_Api(string)
  GetFileSizeEx_Api(Ljava/lang/String;)I = GetFileSizeEx_Api(string)
  ReadFileEx_Api(Ljava/lang/String;[BI[B)I = ReadFileEx_Api(string, byte[], int, byte[])
  ReNameFileEx_Api(Ljava/lang/String;Ljava/lang/String;)I = ReNameFileEx_Api(string, string)
  SaveWholeFileEx_Api(Ljava/lang/String;[BI)I = SaveWholeFileEx_Api(string, byte[], int)
  WriteFileEx_Api(Ljava/lang/String;[BII)I = WriteFileEx_Api(string, byte[], int, int)
com/vanstone/trans/api/FingerApi = Com.Vanstone.Trans.Api.FingerApi
  <init>()V = .ctor()
  FingerCheckIDTemplate_Api(I)I = FingerCheckIDTemplate_Api(int)
  FingerClearCache_Api()V = FingerClearCache_Api()
  FingerClose_Api()I = FingerClose_Api()
  FingerDelete_Api(I)I = FingerDelete_Api(int)
  FingerDeleteAll_Api()I = FingerDeleteAll_Api()
  FingerEnterFp_Api(IIILcom/vanstone/trans/api/FingerApi$IFingerEntryProcess;)I = FingerEnterFp_Api(int, int, int, Com.Vanstone.Trans.Api.FingerApi.IFingerEntryProcess)
  FingerEnterFp_Api(IIIILcom/vanstone/trans/api/FingerApi$IFingerEntryProcess;)I = FingerEnterFp_Api(int, int, int, int, Com.Vanstone.Trans.Api.FingerApi.IFingerEntryProcess)
  FingerExportChar_Api(I[B)I = FingerExportChar_Api(int, byte[])
  FingerExportChar_Api(I[BI)I = FingerExportChar_Api(int, byte[], int)
  FingerGetBmp_Api([B)[B = FingerGetBmp_Api(byte[])
  FingerGetCount_Api()I = FingerGetCount_Api()
  FingerGetDevInfo_Api([B)I = FingerGetDevInfo_Api(byte[])
  FingerGetDevSN_Api([B)I = FingerGetDevSN_Api(byte[])
  FingerGetFp_Api(IILcom/vanstone/trans/api/FingerApi$IFingerGetProcess;)I = FingerGetFp_Api(int, int, Com.Vanstone.Trans.Api.FingerApi.IFingerGetProcess)
  FingerGetNextEmptyID_Api()I = FingerGetNextEmptyID_Api()
  FingerGrabImg_Api(ILcom/vanstone/trans/api/FingerApi$IFingerGrapImgProcess;)I = FingerGrabImg_Api(int, Com.Vanstone.Trans.Api.FingerApi.IFingerGrapImgProcess)
  FingerIsHas_Api()Z = FingerIsHas_Api()
  FingerOpen_Api()I = FingerOpen_Api()
  FingerUpImage_Api([B)I = FingerUpImage_Api(byte[])
  FingerVerify_Api(ILcom/vanstone/trans/api/FingerApi$IFingerGrapImgProcess;)I = FingerVerify_Api(int, Com.Vanstone.Trans.Api.FingerApi.IFingerGrapImgProcess)
  FingerVerifyAll_Api(Lcom/vanstone/trans/api/FingerApi$IFingerGrapImgProcess;)I = FingerVerifyAll_Api(Com.Vanstone.Trans.Api.FingerApi.IFingerGrapImgProcess)
  FingerVerifySetTimeout_Api(IILcom/vanstone/trans/api/FingerApi$IFingerGrapImgProcess;)I = FingerVerifySetTimeout_Api(int, int, Com.Vanstone.Trans.Api.FingerApi.IFingerGrapImgProcess)
com/vanstone/trans/api/FiscalApi = Com.Vanstone.Trans.Api.FiscalApi
  <init>()V = .ctor()
  FiscalAuth_Api()I = FiscalAuth_Api()
  FiscalBindServer_Api()I = FiscalBindServer_Api()
  FiscalCloseDatabase_Api()I = FiscalCloseDatabase_Api()
  FiscalDBRecordCheck_Api()I = FiscalDBRecordCheck_Api()
  FiscalDBRecordClose_Api()I = FiscalDBRecordClose_Api()
  FiscalDBRecordOpen_Api()I = FiscalDBRecordOpen_Api()
  FiscalDBRecordRead_Api(I[I[B[I)I = FiscalDBRecordRead_Api(int, int[], byte[], int[])
  FiscalGetFreeDiskSpace_Api()J = FiscalGetFreeDiskSpace_Api()
  FiscalGetHdVersion_Api([B)I = FiscalGetHdVersion_Api(byte[])
  FiscalGetIdkey_Api(JI)I = FiscalGetIdkey_Api(long, int)
  FiscalGetIds_Api(III[B)I = FiscalGetIds_Api(int, int, int, byte[])
  FiscalGetSoftVersion_Api([B)I = FiscalGetSoftVersion_Api(byte[])
  FiscalGetSysSN_Api([B)I = FiscalGetSysSN_Api(byte[])
  FiscalGetTotalRow_Api()I = FiscalGetTotalRow_Api()
  FiscalOpenDatabase_Api()I = FiscalOpenDatabase_Api()
  FiscalPowerOff_Api()I = FiscalPowerOff_Api()
  FiscalPowerOn_Api()I = FiscalPowerOn_Api()
  FiscalReadDataById_Api(I[B)I = FiscalReadDataById_Api(int, byte[])
  FiscalReadWormFlashData_Api(JJLjava/lang/String;)Z = FiscalReadWormFlashData_Api(long, long, string)
  FiscalUpdateServer_Api([BI)I = FiscalUpdateServer_Api(byte[], int)
  FiscalWriteDataById_Api(I[BJ)I = FiscalWriteDataById_Api(int, byte[], long)
  FiscalWriteWormFlashData_Api(J[BJ)J = FiscalWriteWormFlashData_Api(long, byte[], long)
com/vanstone/trans/api/HsmApi = Com.Vanstone.Trans.Api.HsmApi
  <init>()V = .ctor()
  getFreeSpace_Api()J = FreeSpace_Api
  isTampered_Api()Z = IsTampered_Api
  decrypt_Api(ILjava/lang/String;[B)[B = Decrypt_Api(int, string, byte[])
  deleteCertificate_Api(ILjava/lang/String;)Z = DeleteCertificate_Api(int, string)
  deleteKeyPair_Api(Ljava/lang/String;)Z = DeleteKeyPair_Api(string)
  encrypt_Api(ILjava/lang/String;[B)[B = Encrypt_Api(int, string, byte[])
  generateCSR_Api(Ljava/lang/String;Ljavax/security/auth/x500/X500Principal;)[B = GenerateCSR_Api(string, Javax.Security.Auth.X500.X500Principal)
  generateKeyPair_Api(Ljava/lang/String;II)Z = GenerateKeyPair_Api(string, int, int)
  generateRandom_Api(I)[B = GenerateRandom_Api(int)
  getCertificate_Api(ILjava/lang/String;I)[B = GetCertificate_Api(int, string, int)
  injectPrivateKey_Api([BI)Z = InjectPrivateKey_Api(byte[], int)
  injectPublicKeyCertificate_Api(Ljava/lang/String;Ljava/lang/String;[BI)Z = InjectPublicKeyCertificate_Api(string, string, byte[], int)
  injectRootCertificate_Api(ILjava/lang/String;[BI)Z = InjectRootCertificate_Api(int, string, byte[], int)
  queryCertificates_Api(I)[Ljava/lang/String; = QueryCertificates_Api(int)
  resetKeyStore_Api()V = ResetKeyStore_Api()
com/vanstone/trans/api/IcApi = Com.Vanstone.Trans.Api.IcApi
  <init>()V = .ctor()
  AT24C02 = At24c02
  AT24C08 = At24c08
  AT24C16 = At24c16
  AT88C1608 = At88c1608
  AT88SC102 = At88sc102
  AT88SC1604 = At88sc1604
  CPUCARD = Cpucard
  SLE44X2 = Sle44x2
  SLE44X8 = Sle44x8
  IcCardSetAutoResp(II)I = IcCardSetAutoResp(int, int)
  IcCardSetAutoResp_Api(II)I = IcCardSetAutoResp_Api(int, int)
  IccDetect_Api(I)I = IccDetect_Api(int)
  IccDetectOut_Api(I)I = IccDetectOut_Api(int)
  IccGetCardType_Api()I = IccGetCardType_Api()
  IccInit_Api(II[B[B)I = IccInit_Api(int, int, byte[], byte[])
  IccIsoCommand_Api(ILcom/vanstone/trans/api/struct/ApduSend;Lcom/vanstone/trans/api/struct/ApduResp;)V = IccIsoCommand_Api(int, Com.Vanstone.Trans.Api.Struct.ApduSend, Com.Vanstone.Trans.Api.Struct.ApduResp)
  IccPowerOff_Api(I)V = IccPowerOff_Api(int)
  Mem4442IccGetPwdCount_Api(Lcom/vanstone/trans/api/struct/MemCardOut;)I = Mem4442IccGetPwdCount_Api(Com.Vanstone.Trans.Api.Struct.MemCardOut)
  MemIccCheck_Api(Lcom/vanstone/trans/api/struct/MemCardInfo;ILcom/vanstone/trans/api/struct/MemCardOut;)I = MemIccCheck_Api(Com.Vanstone.Trans.Api.Struct.MemCardInfo, int, Com.Vanstone.Trans.Api.Struct.MemCardOut)
  MemIccPowerOff_Api(Lcom/vanstone/trans/api/struct/MemCardInfo;)I = MemIccPowerOff_Api(Com.Vanstone.Trans.Api.Struct.MemCardInfo)
  MemIccPowerOn_Api(Lcom/vanstone/trans/api/struct/MemCardInfo;)I = MemIccPowerOn_Api(Com.Vanstone.Trans.Api.Struct.MemCardInfo)
  MemIccPwdProc_Api(Lcom/vanstone/trans/api/struct/MemCardInfo;Lcom/vanstone/trans/api/struct/MemCardPwd;Lcom/vanstone/trans/api/struct/MemCardOut;)I = MemIccPwdProc_Api(Com.Vanstone.Trans.Api.Struct.MemCardInfo, Com.Vanstone.Trans.Api.Struct.MemCardPwd, Com.Vanstone.Trans.Api.Struct.MemCardOut)
  MemIccReadData_Api(Lcom/vanstone/trans/api/struct/MemCardInfo;IILcom/vanstone/trans/api/struct/MemCardOut;)I = MemIccReadData_Api(Com.Vanstone.Trans.Api.Struct.MemCardInfo, int, int, Com.Vanstone.Trans.Api.Struct.MemCardOut)
  MemIccWriteData_Api(Lcom/vanstone/trans/api/struct/MemCardInfo;[BIILcom/vanstone/trans/api/struct/MemCardOut;)I = MemIccWriteData_Api(Com.Vanstone.Trans.Api.Struct.MemCardInfo, byte[], int, int, Com.Vanstone.Trans.Api.Struct.MemCardOut)
com/vanstone/trans/api/IcExApi = Com.Vanstone.Trans.Api.IcExApi
  <init>()V = .ctor()
  IccDetectEx_Api(I)I = IccDetectEx_Api(int)
  IccInitEx_Api(II[B[B)I = IccInitEx_Api(int, int, byte[], byte[])
  IccIsoCommandEx_Api(ILcom/vanstone/trans/api/struct/ApduSend;Lcom/vanstone/trans/api/struct/ApduResp;)V = IccIsoCommandEx_Api(int, Com.Vanstone.Trans.Api.Struct.ApduSend, Com.Vanstone.Trans.Api.Struct.ApduResp)
  IccPowerOffEx_Api(I)V = IccPowerOffEx_Api(int)
com/vanstone/trans/api/InputApi = Com.Vanstone.Trans.Api.InputApi
  <init>()V = .ctor()
  GetScanfEx_Api(III[BIIIII)I = GetScanfEx_Api(int, int, int, byte[], int, int, int, int, int)
  GetScanfEx_Api(III[BIIIIIZ)I = GetScanfEx_Api(int, int, int, byte[], int, int, int, int, int, bool)
com/vanstone/trans/api/Itwell = Com.Vanstone.Trans.Api.Itwell
  <init>()V = .ctor()
  aabcd_to_asc(B)B = Aabcd_to_asc(sbyte)
  AddField(I[B)V = AddField(int, byte[])
  AssertPrint([BI[B)V = AssertPrint(byte[], int, byte[])
  CheckDate([B)I = CheckDate(byte[])
  CheckMMYY([B)I = CheckMMYY(byte[])
  CheckYYMM([B)I = CheckYYMM(byte[])
  CommPrintHex([B[BI)I = CommPrintHex(byte[], byte[], int)
  ConvBcdAmount([B[B)I = ConvBcdAmount(byte[], byte[])
  ConvertAmountFormat([B[BI)I = ConvertAmountFormat(byte[], byte[], int)
  ConvertDisBalanceFormat([B[B)I = ConvertDisBalanceFormat(byte[], byte[])
  copyData([B[BII)V = CopyData(byte[], byte[], int, int)
  DbgOut_Api([BLjava/lang/String;III[B)I = DbgOut_Api(byte[], string, int, int, int, byte[])
  DbgSet_Api(I)I = DbgSet_Api(int)
  ErrorPrompt(Ljava/lang/String;I)V = ErrorPrompt(string, int)
  format_amt([BII)V = Format_amt(byte[], int, int)
  FormatAMT([B[BII)V = FormatAMT(byte[], byte[], int, int)
  FormBcdToAsc([B[BI)V = FormBcdToAsc(byte[], byte[], int)
  Hex2Bin(I)I = Hex2Bin(int)
  IntToBcd([BII)I = IntToBcd(byte[], int, int)
  map_test([BI)I = Map_test(byte[], int)
  ModemParamDown([BI)V = ModemParamDown(byte[], int)
  PrintFormat(Ljava/lang/String;[BI)V = PrintFormat(string, byte[], int)
  ProFastKey_Api(I)I = ProFastKey_Api(int)
  RcvFileSysOrder()I = RcvFileSysOrder()
  ReadPosNo([B)I = ReadPosNo(byte[])
  RemoveField(I[B)V = RemoveField(int, byte[])
  SetMagRecvTime(I)V = SetMagRecvTime(int)
  U8ToBcd_ITWELL([BI)V = U8ToBcd_ITWELL(byte[], int)
com/vanstone/trans/api/JBigEnc = Com.Vanstone.Trans.Api.JBigEnc
  <init>()V = .ctor()
  JBIGEncode_Api([BI[B[B)I = JBIGEncode_Api(byte[], int, byte[], byte[])
  JBIGMemDecode_Api([BI[B[B[B[B)I = JBIGMemDecode_Api(byte[], int, byte[], byte[], byte[], byte[])
  ToMakeBimap_Api([B[B)I = ToMakeBimap_Api(byte[], byte[])
com/vanstone/trans/api/jni/C = Com.Vanstone.Trans.Api.Jni.C
  <init>()V = .ctor()
  int2lArry([BI)V = Int2lArry(byte[], int)
  lArry2int([B)I = LArry2int(byte[])
  lArry2short([B)S = LArry2short(byte[])
  s8(B)I = S8(sbyte)
  short2lArry([BS)V = Short2lArry(byte[], short)
  sizeof([B)I = Sizeof(byte[])
  U16ToU8Arr([BI)I = U16ToU8Arr(byte[], int)
  U32ToU8Arr([BI)I = U32ToU8Arr(byte[], int)
  u8(B)I = U8(sbyte)
  U8ArrToU32([B)I = U8ArrToU32(byte[])
com/vanstone/trans/api/jni/JCallback = Com.Vanstone.Trans.Api.Jni.JCallback
  <init>()V = .ctor()
  Delay_Api(I)V = Delay_Api(int)
  DelFile_Api([B)I = DelFile_Api(byte[])
  GetFileSize_Api([B)I = GetFileSize_Api(byte[])
  GetSysTime_Api([B)V = GetSysTime_Api(byte[])
  IccDetect_Api(I)I = IccDetect_Api(int)
  IccInit_Api(II[B[B)I = IccInit_Api(int, int, byte[], byte[])
  IccIsoCommand_Api(B[B[B)V = IccIsoCommand_Api(sbyte, byte[], byte[])
  IccIsoCommandEx_Api(B[B[B)V = IccIsoCommandEx_Api(sbyte, byte[], byte[])
  PiccIsoCommand_Api([B[B)V = PiccIsoCommand_Api(byte[], byte[])
  PiccIsoCommandEx_Api([B[B)V = PiccIsoCommandEx_Api(byte[], byte[])
  PortSends_Api(I[BI)I = PortSends_Api(int, byte[], int)
  PPPortSetBaudC(IIII)I = PPPortSetBaudC(int, int, int, int)
  ReadFile_Api([B[BI[B)I = ReadFile_Api(byte[], byte[], int, byte[])
  ReNameFile_Api([B[B)I = ReNameFile_Api(byte[], byte[])
  Rs232ReadC(I[B[BI)I = Rs232ReadC(int, byte[], byte[], int)
  Rs232WriteC([BI)I = Rs232WriteC(byte[], int)
  SaveWholeFile_Api([B[BI)I = SaveWholeFile_Api(byte[], byte[], int)
  SigPadCommandC(I[B[BI)I = SigPadCommandC(int, byte[], byte[], int)
  WriteFile_Api([B[BII)I = WriteFile_Api(byte[], byte[], int, int)
com/vanstone/trans/api/jni/JFun = Com.Vanstone.Trans.Api.Jni.JFun
  <init>()V = .ctor()
  BmpTurn240To80_jni([B[B)I = BmpTurn240To80_jni(byte[], byte[])
  CoveDispAmt([B[B)I = CoveDispAmt(byte[], byte[])
  DelFileEx_jni([B)I = DelFileEx_jni(byte[])
  FileCRC32_jni([BI[B)I = FileCRC32_jni(byte[], int, byte[])
  GetFileSizeEx_jni([B)I = GetFileSizeEx_jni(byte[])
  GetJFunVersion_jni([B)V = GetJFunVersion_jni(byte[])
  IccDetectEx_jni(I)I = IccDetectEx_jni(int)
  IccInitEx_jni(II[B[B)I = IccInitEx_jni(int, int, byte[], byte[])
  IccIsoCommandEx_jni(I[B[B)V = IccIsoCommandEx_jni(int, byte[], byte[])
  IccPowerOffEx_jni(I)V = IccPowerOffEx_jni(int)
  ImageLower_jni([B[B)I = ImageLower_jni(byte[], byte[])
  InitJFun_jni()V = InitJFun_jni()
  JBIGEncode_jni([BI[B[B)I = JBIGEncode_jni(byte[], int, byte[], byte[])
  JBIGMemDecode_jni([BI[B[B[B[B)I = JBIGMemDecode_jni(byte[], int, byte[], byte[], byte[], byte[])
  LedLightOffEx_jni(I)I = LedLightOffEx_jni(int)
  LedLightOnEx_jni(I)I = LedLightOnEx_jni(int)
  PiccCheckEx_jni(I[B[B)I = PiccCheckEx_jni(int, byte[], byte[])
  PiccCloseEx_jni()I = PiccCloseEx_jni()
  PiccIsoCommandEx_jni([B[B)V = PiccIsoCommandEx_jni(byte[], byte[])
  PiccOpenEx_jni()I = PiccOpenEx_jni()
  PiccQPBOCBalanceEx_jni([B)I = PiccQPBOCBalanceEx_jni(byte[])
  PiccQPBOCDetailEx_jni([B)I = PiccQPBOCDetailEx_jni(byte[])
  PiccQPBOCSaleEx_jni(I[B)I = PiccQPBOCSaleEx_jni(int, byte[])
  PiccRemoveEx_jni()I = PiccRemoveEx_jni()
  PPDes_jni(III[BI[B)I = PPDes_jni(int, int, int, byte[], int, byte[])
  PPDisAmt_jni([BI)I = PPDisAmt_jni(byte[], int)
  PPGetExpress_jni([B)I = PPGetExpress_jni(byte[])
  PPGetPwd_jni(III[B[BI)I = PPGetPwd_jni(int, int, int, byte[], byte[], int)
  PPGetVersion_jni([B[B)I = PPGetVersion_jni(byte[], byte[])
  PPMac_jni(II[BI[BI)I = PPMac_jni(int, int, byte[], int, byte[], int)
  PPPowerOff_jni()V = PPPowerOff_jni()
  PPPowerOn_jni()V = PPPowerOn_jni()
  PPPreGetPwd_jni([BI[BI)I = PPPreGetPwd_jni(byte[], int, byte[], int)
  PPReadPinPadSn_jni([B)I = PPReadPinPadSn_jni(byte[])
  PPSavePinPadSn_jni([B)I = PPSavePinPadSn_jni(byte[])
  PPScrCls_jni()V = PPScrCls_jni()
  PPSetBaude_jni(I)I = PPSetBaude_jni(int)
  PPWriteIcBcKey_jni([BIIIII[B)I = PPWriteIcBcKey_jni(byte[], int, int, int, int, int, byte[])
  PPWriteKey_jni(II[BII[B)I = PPWriteKey_jni(int, int, byte[], int, int, byte[])
  PPWriteMKey_jni(II[B)I = PPWriteMKey_jni(int, int, byte[])
  PPWriteWKey_jni(III[B)I = PPWriteWKey_jni(int, int, int, byte[])
  ReadFileEx_jni([B[BI[B)I = ReadFileEx_jni(byte[], byte[], int, byte[])
  ReNameFileEx_jni([B[B)I = ReNameFileEx_jni(byte[], byte[])
  SaveWholeFileEx_jni([B[BI)I = SaveWholeFileEx_jni(byte[], byte[], int)
  ScanBcr128BmpEx_jni([B[B)I = ScanBcr128BmpEx_jni(byte[], byte[])
  ScanBcr39BmpEx_jni([B[B)I = ScanBcr39BmpEx_jni(byte[], byte[])
  ScanCloseEx_jni()I = ScanCloseEx_jni()
  ScanGetDataEx_jni([BI)I = ScanGetDataEx_jni(byte[], int)
  ScanOpenEx_jni()I = ScanOpenEx_jni()
  ScanSetTypeEx_jni(I)V = ScanSetTypeEx_jni(int)
  ScrBackLightEx_jni(I)V = ScrBackLightEx_jni(int)
  ScrClrLineEx_jni(II)V = ScrClrLineEx_jni(int, int)
  ScrClsEx_jni()V = ScrClsEx_jni()
  ScrDispEx_jni(II[BI)V = ScrDispEx_jni(int, int, byte[], int)
  ScrDispSetEx_jni(I[B[B)I = ScrDispSetEx_jni(int, byte[], byte[])
  ScrFontSetEx_jni(I)V = ScrFontSetEx_jni(int)
  ScrFrameSetColorEx_jni(III)V = ScrFrameSetColorEx_jni(int, int, int)
  ScrGrayEx_jni(I)V = ScrGrayEx_jni(int)
  Sm4Calc_jni([BI[B[BI)I = Sm4Calc_jni(byte[], int, byte[], byte[], int)
  SPadCalEx_jni()I = SPadCalEx_jni()
  SPadCloseEx_jni()I = SPadCloseEx_jni()
  SPadMakeSignEx_jni([BI[BI)I = SPadMakeSignEx_jni(byte[], int, byte[], int)
  SPadOpenEx_jni(II)I = SPadOpenEx_jni(int, int)
  SPadStatusEx_jni([B[B)I = SPadStatusEx_jni(byte[], byte[])
  SslGenCSR_jni([BIJI[B[B)I = SslGenCSR_jni(byte[], int, long, int, byte[], byte[])
  SslParsePKCS7_Api([BI)I = SslParsePKCS7_Api(byte[], int)
  SslSaveCertS_Api([B)I = SslSaveCertS_Api(byte[])
  SslSignPKCS7_Api([B[BI[B[B)I = SslSignPKCS7_Api(byte[], byte[], int, byte[], byte[])
  SystemInit_jni(I[B)I = SystemInit_jni(int, byte[])
  ToMakeBimap_jni([B[B)I = ToMakeBimap_jni(byte[], byte[])
  WriteFileEx_jni([B[BII)I = WriteFileEx_jni(byte[], byte[], int, int)
com/vanstone/trans/api/KeyApi = Com.Vanstone.Trans.Api.KeyApi
  <init>()V = .ctor()
  KEYCODE = Keycode
  GetKey_Api()I = Key_Api
  SetKey_Api(I)V = Key_Api
  KBFlush_Api()V = KBFlush_Api()
  TipAndWaitEx_Api(Ljava/lang/String;)V = TipAndWaitEx_Api(string)
  WaitAnyKey_Api(I)I = WaitAnyKey_Api(int)
  WaitEnterAndEscKey_Api(I)I = WaitEnterAndEscKey_Api(int)
  WaitKey_Api()I = WaitKey_Api()
  WaitKey_Api(I)I = WaitKey_Api(int)
com/vanstone/trans/api/KeyListener = Com.Vanstone.Trans.Api.KeyListener
  <init>()V = .ctor()
  KEYVALUE = Keyvalue
  getKeyValue()Ljava/lang/String; = KeyValue
  KeyListener()V = InvokeKeyListener()
  onCancel()V = OnCancel()
  onEnter(Ljava/lang/String;)V = OnEnter(string)
  onKeyBoardClick(Landroid/view/View;Ljava/lang/String;)V = OnKeyBoardClick(Android.Views.View, string)
  onKeyClick(I)V = OnKeyClick(int)
com/vanstone/trans/api/LcdApi = Com.Vanstone.Trans.Api.LcdApi
  <init>()V = .ctor()
  GetCurFontWidth()I = CurFontWidth
  GetMaxCharShowInLine()I = MaxCharShowInLine
  GetRowHeight()I = RowHeight
  delRepeatRow(II)V = DelRepeatRow(int, int)
  DispTitleLib(Ljava/lang/String;)V = DispTitleLib(string)
  DrawButton_Api(IILjava/lang/String;II)V = DrawButton_Api(int, int, string, int, int)
  DrawLineRam(II[BI)V = DrawLineRam(int, int, byte[], int)
  DrawProgressBar_Api(IIII)V = DrawProgressBar_Api(int, int, int, int)
  DrawRadioButton_Api(IIII[Ljava/lang/String;[IIII)V = DrawRadioButton_Api(int, int, int, int, string[], int[], int, int, int)
  DrawRect_Api(IIIIIIIIZ)V = DrawRect_Api(int, int, int, int, int, int, int, int, bool)
  DrawRect_Api(IIIIIIIILjava/lang/String;Z)V = DrawRect_Api(int, int, int, int, int, int, int, int, string, bool)
  DrawSpinner_Api(IIII[Ljava/lang/String;[IIII)V = DrawSpinner_Api(int, int, int, int, string[], int[], int, int, int)
  GetLineEx([BI[BI)I = GetLineEx(byte[], int, byte[], int)
  LcdInit(Landroid/app/Activity;)V = LcdInit(Android.App.Activity)
  Led_GetStatus_Api(I)Z = Led_GetStatus_Api(int)
  LedLightOff_Api(I)I = LedLightOff_Api(int)
  LedLightOn_Api(I)I = LedLightOn_Api(int)
  LedOper_Api(II)I = LedOper_Api(int, int)
  ScrBackLight_Api(I)V = ScrBackLight_Api(int)
  ScrBrush_Api()V = ScrBrush_Api()
  ScrClrLine_Api(II)V = ScrClrLine_Api(int, int)
  ScrClrLineRam_Api(II)V = ScrClrLineRam_Api(int, int)
  ScrCls_Api()V = ScrCls_Api()
  ScrClsRam_Api()V = ScrClsRam_Api()
  ScrDisp_Api(II[BI)V = ScrDisp_Api(int, int, byte[], int)
  ScrDisp_Api(IILjava/lang/String;I)V = ScrDisp_Api(int, int, string, int)
  ScrDispRam_Api(II[BI)V = ScrDispRam_Api(int, int, byte[], int)
  ScrDispRam_Api(IILjava/lang/String;I)V = ScrDispRam_Api(int, int, string, int)
  ScrDrawLine_Api(SSSSS)V = ScrDrawLine_Api(short, short, short, short, short)
  ScrDrawLineRam_Api(IIIII)V = ScrDrawLineRam_Api(int, int, int, int, int)
  ScrDrLogoxy_Api(IIII[B)V = ScrDrLogoxy_Api(int, int, int, int, byte[])
  ScrDrLogoxyRam_Api(IIII[B)V = ScrDrLogoxyRam_Api(int, int, int, int, byte[])
  ScrFontSet_Api(I)V = ScrFontSet_Api(int)
  ScrGray_Api(I)V = ScrGray_Api(int)
  ScrPlot_Api(III)V = ScrPlot_Api(int, int, int)
  ScrPlotRam_Api(III)V = ScrPlotRam_Api(int, int, int)
  ShowPassWd(IILcom/vanstone/trans/api/KeyListener;Ljava/lang/String;)V = ShowPassWd(int, int, Com.Vanstone.Trans.Api.KeyListener, string)
  ShowQrCode_Api(II[BI)V = ShowQrCode_Api(int, int, byte[], int)
  TextBoxSameRandom_Api()V = TextBoxSameRandom_Api()
com/vanstone/trans/api/LcdExApi = Com.Vanstone.Trans.Api.LcdExApi
  <init>()V = .ctor()
  BeefEx_Api(CS)V = BeefEx_Api(char, short)
  KBMuteEx_Api(I)V = KBMuteEx_Api(int)
  LedLightOffEx_Api(I)I = LedLightOffEx_Api(int)
  LedLightOnEx_Api(I)I = LedLightOnEx_Api(int)
  ScrBackLightEx_Api(I)V = ScrBackLightEx_Api(int)
  ScrBrushEx_Api()V = ScrBrushEx_Api()
  ScrClrLineEx_Api(II)V = ScrClrLineEx_Api(int, int)
  ScrClsEx_Api()V = ScrClsEx_Api()
  ScrDispEx_Api(IILjava/lang/String;I)V = ScrDispEx_Api(int, int, string, int)
  ScrDispSetEx_Api(ILjava/lang/String;Ljava/lang/String;)I = ScrDispSetEx_Api(int, string, string)
  ScrFontSetEx_Api(I)V = ScrFontSetEx_Api(int)
  ScrFrameSetColorEx_Api(III)V = ScrFrameSetColorEx_Api(int, int, int)
  ScrGrayEx_Api(I)V = ScrGrayEx_Api(int)
  ScrPinpadFaceEx_Api(Ljava/util/List;I)I = ScrPinpadFaceEx_Api(System.Collections.Generic.IList<Com.Vanstone.Utils.PinpadFace>, int)
  ScrShowMulLineEx_Api(Ljava/util/List;II)V = ScrShowMulLineEx_Api(System.Collections.Generic.IList<Com.Vanstone.Utils.ShowMulline>, int, int)
  ShowBmpFileEx_Api(Ljava/lang/String;II)I = ShowBmpFileEx_Api(string, int, int)
  WaitEnterAndEscKeyEx_Api(I)I = WaitEnterAndEscKeyEx_Api(int)
com/vanstone/trans/api/LocationApi = Com.Vanstone.Trans.Api.LocationApi
  <init>()V = .ctor()
  LOCINFO_CITY = LocinfoCity
  LOCINFO_DISTRICT = LocinfoDistrict
  LOCINFO_PROVINCE = LocinfoProvince
  getLocationInfo(Landroid/os/Bundle;Lcom/vanstone/trans/api/LocationApi$AidlLocationCallback;)V = GetLocationInfo(Android.OS.Bundle, Com.Vanstone.Trans.Api.LocationApi.IAidlLocationCallback)
  LocationCalDistance_Api(DDDD)D = LocationCalDistance_Api(double, double, double, double)
  LocationClrBuff_Api()V = LocationClrBuff_Api()
  LocationGetAddress_Api()Ljava/lang/String; = LocationGetAddress_Api()
  LocationGetCity_Api()Ljava/lang/String; = LocationGetCity_Api()
  LocationGetCoorType_Api()Ljava/lang/String; = LocationGetCoorType_Api()
  LocationGetDistrict_Api()Ljava/lang/String; = LocationGetDistrict_Api()
  LocationGetErrInfo_Api()Ljava/lang/String; = LocationGetErrInfo_Api()
  LocationGetLat_Api()D = LocationGetLat_Api()
  LocationGetLng_Api()D = LocationGetLng_Api()
  LocationGetLocInfo_Api(Landroid/os/Bundle;)V = LocationGetLocInfo_Api(Android.OS.Bundle)
  LocationGetProvince_Api()Ljava/lang/String; = LocationGetProvince_Api()
  LocationLoc_Api(I)Z = LocationLoc_Api(int)
  LocationResult_Api()I = LocationResult_Api()
  LocationSetCoorType_Api(Ljava/lang/String;)V = LocationSetCoorType_Api(string)
  LocationStart_Api()I = LocationStart_Api()
  LocationStop_Api()V = LocationStop_Api()
com/vanstone/trans/api/MagCardApi = Com.Vanstone.Trans.Api.MagCardApi
  <init>()V = .ctor()
  FIRST_TRACK = FirstTrack
  SECOND_TRACK = SecondTrack
  THIRD_TRACK = ThirdTrack
  getTrackData_Api(I)[B = GetTrackData_Api(int)
  MagClose_Api()I = MagClose_Api()
  MagGetTradCode_Api(I)I = MagGetTradCode_Api(int)
  MagOpen_Api()I = MagOpen_Api()
  MagRead_Api([B[B)I = MagRead_Api(byte[], byte[])
  MagReset_Api()V = MagReset_Api()
  MagSetCheckLrc_Api(Z)I = MagSetCheckLrc_Api(bool)
  MagSwiped_Api()I = MagSwiped_Api()
com/vanstone/trans/api/MagCardExApi = Com.Vanstone.Trans.Api.MagCardExApi
  <init>()V = .ctor()
  MagCloseEx_Api()I = MagCloseEx_Api()
  MagGetTradCodeEx_Api(I)I = MagGetTradCodeEx_Api(int)
  MagOpenEx_Api()I = MagOpenEx_Api()
  MagReadEx_Api([B[B)I = MagReadEx_Api(byte[], byte[])
  MagResetEx_Api()V = MagResetEx_Api()
  MagSetCheckLrcEx_Api(Z)I = MagSetCheckLrcEx_Api(bool)
  MagSwipedEx_Api()I = MagSwipedEx_Api()
com/vanstone/trans/api/Manage = Com.Vanstone.Trans.Api.Manage
  <init>()V = .ctor()
  GetBeforAppName_Api([B)I = GetBeforAppName_Api(byte[])
  GetMulAppInfo_Api([B[B)I = GetMulAppInfo_Api(byte[], byte[])
  GetNextAppNamelib([B)I = GetNextAppNamelib(byte[])
  SwitchApp_Api([B[BI)V = SwitchApp_Api(byte[], byte[], int)
com/vanstone/trans/api/MathsApi = Com.Vanstone.Trans.Api.MathsApi
  <init>()V = .ctor()
  AscAdd_Api([B[BI)I = AscAdd_Api(byte[], byte[], int)
  AscDec_Api([BI)I = AscDec_Api(byte[], int)
  AscInc_Api([BI)I = AscInc_Api(byte[], int)
  AscSub_Api([B[BI)I = AscSub_Api(byte[], byte[], int)
  AscToBcd_Api([B[BI)V = AscToBcd_Api(byte[], byte[], int)
  AscToLong_Api([BI)J = AscToLong_Api(byte[], int)
  BcdAdd_Api([B[BI)I = BcdAdd_Api(byte[], byte[], int)
  BcdDec_Api([BI)I = BcdDec_Api(byte[], int)
  BcdInc_Api([BI)I = BcdInc_Api(byte[], int)
  BcdSub_Api([B[BI)I = BcdSub_Api(byte[], byte[], int)
  BcdSubDataTime_Api([B[B[B)I = BcdSubDataTime_Api(byte[], byte[], byte[])
  BcdToAsc_Api([B[BI)V = BcdToAsc_Api(byte[], byte[], int)
  BcdToLong_Api([BI)J = BcdToLong_Api(byte[], int)
  byte2short([B)S = Byte2short(byte[])
  Des3Calc_Api([B[B[BI)V = Des3Calc_Api(byte[], byte[], byte[], int)
  Des3Calc_Api([BI[BI[BI)V = Des3Calc_Api(byte[], int, byte[], int, byte[], int)
  DesCalc_Api([B[B[BI)V = DesCalc_Api(byte[], byte[], byte[], int)
  DesCalc_Api([BI[BI[BI)V = DesCalc_Api(byte[], int, byte[], int, byte[], int)
  leapyear(I)I = Leapyear(int)
  LeepYear(I)Z = LeepYear(int)
  LongToAsc_Api(J[B)V = LongToAsc_Api(long, byte[])
  LongToBcd_Api([BJI)I = LongToBcd_Api(byte[], long, int)
  s32ToArry([BI)V = S32ToArry(byte[], int)
  short2byte([BI)V = Short2byte(byte[], int)
  Sm4Calc_Api([BI[B[BI)I = Sm4Calc_Api(byte[], int, byte[], byte[], int)
  U32ToBcd([BII)V = U32ToBcd(byte[], int, int)
  XorCalc_Api([BI)I = XorCalc_Api(byte[], int)
  XorCalc_Api([BII)I = XorCalc_Api(byte[], int, int)
com/vanstone/trans/api/MemCardApi = Com.Vanstone.Trans.Api.MemCardApi
  <init>()V = .ctor()
  sle4428Close_Api()I = Sle4428Close_Api()
  sle4428Open_Api(I[B)I = Sle4428Open_Api(int, byte[])
  sle4428ReadNoProtect_Api(I[BI)I = Sle4428ReadNoProtect_Api(int, byte[], int)
  sle4428VerifyKey_Api(BB)I = Sle4428VerifyKey_Api(sbyte, sbyte)
  sle4428WriteAndCompareProtect_Api(I[BIB)I = Sle4428WriteAndCompareProtect_Api(int, byte[], int, sbyte)
  sle4428WriteNoProtect_Api(I[BI)I = Sle4428WriteNoProtect_Api(int, byte[], int)
  sle4442Close_Api()I = Sle4442Close_Api()
  sle4442ModifyKey_Api([B[B)I = Sle4442ModifyKey_Api(byte[], byte[])
  sle4442Open_Api(I[B)I = Sle4442Open_Api(int, byte[])
  sle4442Read_Api(BB[BI)I = Sle4442Read_Api(sbyte, sbyte, byte[], int)
  sle4442RemainCheckTime_Api()I = Sle4442RemainCheckTime_Api()
  sle4442Verify_Api([B)I = Sle4442Verify_Api(byte[])
  sle4442Write_Api(BB[BI)I = Sle4442Write_Api(sbyte, sbyte, byte[], int)
com/vanstone/trans/api/NumKeyboardApi = Com.Vanstone.Trans.Api.NumKeyboardApi
  <init>()V = .ctor()
  NumKeyClose_Api()V = NumKeyClose_Api()
  NumKeyDisplayText_Api(Ljava/lang/String;)V = NumKeyDisplayText_Api(string)
  NumKeyOpen_Api(Landroid/os/Bundle;)V = NumKeyOpen_Api(Android.OS.Bundle)
  NumKeyReset_Api()V = NumKeyReset_Api()
  NumKeySetCheckListener_Api(Lcom/vanstone/trans/api/NumKeyboardApi$NumKeyCheckListener;)V = NumKeySetCheckListener_Api(Com.Vanstone.Trans.Api.NumKeyboardApi.INumKeyCheckListener)
  NumKeySetKeyboardListener_Api(Lcom/vanstone/trans/api/NumKeyboardApi$NumKeyListener;)V = NumKeySetKeyboardListener_Api(Com.Vanstone.Trans.Api.NumKeyboardApi.INumKeyListener)
  NumKeyUpdateKeyboardSignal_Api(II)Z = NumKeyUpdateKeyboardSignal_Api(int, int)
com/vanstone/trans/api/PedApi = Com.Vanstone.Trans.Api.PedApi
  <init>()V = .ctor()
  DispStr = DispStr
  KAPVALUE = Kapvalue
  KEYTYPE_DUKPT = KeytypeDukpt
  KEYTYPE_MASTERKEY = KeytypeMasterkey
  KEYTYPE_MASTERKEY_CIPHER = KeytypeMasterkeyCipher
  KEYTYPE_TRANSMISSIONKEY = KeytypeTransmissionkey
  Pan = Pan
  PEDKEYTYPE_MASTKEY = PedkeytypeMastkey
  PEDKEYTYPE_WORKKET = PedkeytypeWorkket
  PEDPLACE_PRIVATE = PedplacePrivate
  PEDPLACE_PUBLIC = PedplacePublic
  PED_TAK = PedTak
  PED_TDK = PedTdk
  PED_TEK = PedTek
  PED_TLK = PedTlk
  PED_TMK = PedTmk
  PED_TPK = PedTpk
  PED_TTK = PedTtk
  GetMKeyMaxIndex()I = MKeyMaxIndex
  GetWKeyMaxIndex()I = WKeyMaxIndex
  calAes_Api(II[BI[BI[B)I = CalAes_Api(int, int, byte[], int, byte[], int, byte[])
  calcAesDukpt(BB[BI[BB[B[B)I = CalcAesDukpt(sbyte, sbyte, byte[], int, byte[], sbyte, byte[], byte[])
  calcRSA_Api(B[B[B[B)I = CalcRSA_Api(sbyte, byte[], byte[], byte[])
  calcRSAEx_Api(II[B[B[B)I = CalcRSAEx_Api(int, int, byte[], byte[], byte[])
  calcRSAPri_Api(III[B[B)I = CalcRSAPri_Api(int, int, int, byte[], byte[])
  calcRSAPub_Api(III[B[B)I = CalcRSAPub_Api(int, int, int, byte[], byte[])
  EDPPSetDesSmHdSoft_Api(II)I = EDPPSetDesSmHdSoft_Api(int, int)
  getAesDukptKsn(B[B)I = GetAesDukptKsn(sbyte, byte[])
  getFyTransKey_Api([B)I = GetFyTransKey_Api(byte[])
  getgHdOrSoft()I = GetgHdOrSoft()
  getMacAesDukpt(BIB[B[B[B)I = GetMacAesDukpt(sbyte, int, sbyte, byte[], byte[], byte[])
  getPinAESDukptEx(BBB[B[B[B[B)I = GetPinAESDukptEx(sbyte, sbyte, sbyte, byte[], byte[], byte[], byte[])
  getPinDukptEx_Api(BBLjava/lang/String;Ljava/lang/String;[B[B)I = GetPinDukptEx_Api(sbyte, sbyte, string, string, byte[], byte[])
  getRSAKeyPair_Api(III[B)I = GetRSAKeyPair_Api(int, int, int, byte[])
  isKeyExist(II)Z = IsKeyExist(int, int)
  isKeyExist_Api(II)Z = IsKeyExist_Api(int, int)
  KMS_TR31_DukptWriteTIK_Api(III[B[B[B[BI)I = KMS_TR31_DukptWriteTIK_Api(int, int, int, byte[], byte[], byte[], byte[], int)
  KMS_TR31_MwriteKey_Api(II[B[B[B)I = KMS_TR31_MwriteKey_Api(int, int, byte[], byte[], byte[])
  PEDBigDataMac_Api(II[BI[BI)I = PEDBigDataMac_Api(int, int, byte[], int, byte[], int)
  PedCalcDESDukpt_Api(BB[B[BB[B[B)I = PedCalcDESDukpt_Api(sbyte, sbyte, byte[], byte[], sbyte, byte[], byte[])
  PEDDes_Api(III[BI[B)I = PEDDes_Api(int, int, int, byte[], int, byte[])
  PEDDesCBC_Api(III[BI[BI[B)I = PEDDesCBC_Api(int, int, int, byte[], int, byte[], int, byte[])
  PEDDisp_Api(I[BII)V = PEDDisp_Api(int, byte[], int, int)
  PEDDisp_Api(Ljava/lang/String;)V = PEDDisp_Api(string)
  PedDukptIncreaseKsn_Api(B)I = PedDukptIncreaseKsn_Api(sbyte)
  PedDukptWriteTIK_Api(BBB[B[BB[B)I = PedDukptWriteTIK_Api(sbyte, sbyte, sbyte, byte[], byte[], sbyte, byte[])
  PedErase()Z = PedErase()
  PedErase(II)Z = PedErase(int, int)
  PedErase_Api()Z = PedErase_Api()
  PedErase_Api(II)Z = PedErase_Api(int, int)
  PedGetDukptKSN_Api(B[B)I = PedGetDukptKSN_Api(sbyte, byte[])
  PEDGetDukptPin_Api(Ljava/lang/String;[BI[BIILcom/vanstone/transex/ped/IGetDukptPinListener;)I = PEDGetDukptPin_Api(string, byte[], int, byte[], int, int, Com.Vanstone.Transex.Ped.IGetDukptPinListener)
  PEDGetEMVOfflinePin_Api(Ljava/lang/String;[BI)I = PEDGetEMVOfflinePin_Api(string, byte[], int)
  PEDGetEMVOfflinePin_Api(Ljava/lang/String;[BILcom/vanstone/transex/ped/IGetPinResultListenner;)I = PEDGetEMVOfflinePin_Api(string, byte[], int, Com.Vanstone.Transex.Ped.IGetPinResultListenner)
  PEDGetEMVOfflinePin_Api(Ljava/lang/String;III)I = PEDGetEMVOfflinePin_Api(string, int, int, int)
  PEDGetEMVOfflinePin_Api(Ljava/lang/String;IIILcom/vanstone/transex/ped/IGetPinResultListenner;)I = PEDGetEMVOfflinePin_Api(string, int, int, int, Com.Vanstone.Transex.Ped.IGetPinResultListenner)
  PEDGetExpress_Api(Ljava/lang/String;[BILcom/vanstone/transex/ped/IGetPinResultListenner;)I = PEDGetExpress_Api(string, byte[], int, Com.Vanstone.Transex.Ped.IGetPinResultListenner)
  PEDGetLastError_Api()Ljava/lang/String; = PEDGetLastError_Api()
  PedGetMacDukpt_Api(BB[BI[B[BB)I = PedGetMacDukpt_Api(sbyte, sbyte, byte[], int, byte[], byte[], sbyte)
  PEDGetPwd_Api(I[BLjava/lang/String;ILcom/vanstone/page/widget/body/custom/IKeyBoard;Lcom/vanstone/trans/api/PedApi$OnPedKeyListener;)V = PEDGetPwd_Api(int, byte[], string, int, Com.Vanstone.Page.Widget.Body.Custom.IKeyBoard, Com.Vanstone.Trans.Api.PedApi.IOnPedKeyListener)
  PEDGetPwd_Api(III[B[BII)I = PEDGetPwd_Api(int, int, int, byte[], byte[], int, int)
  PEDGetPwd_Api(III[B[BIILcom/vanstone/base/interfaces/PedListener;)I = PEDGetPwd_Api(int, int, int, byte[], byte[], int, int, Com.Vanstone.Base.Interfaces.IPedListener)
  PEDGetPwd_Api(Ljava/lang/String;[B[BIIILcom/vanstone/transex/ped/IGetPinResultListenner;)I = PEDGetPwd_Api(string, byte[], byte[], int, int, int, Com.Vanstone.Transex.Ped.IGetPinResultListenner)
  PEDGetPwdzh_Api(ILjava/lang/String;I[BI[B)I = PEDGetPwdzh_Api(int, string, int, byte[], int, byte[])
  PEDHaveCallBack_Api()V = PEDHaveCallBack_Api()
  PEDMac_Api(II[BI[BI)I = PEDMac_Api(int, int, byte[], int, byte[], int)
  PEDReadPinPadSn_Api([B)I = PEDReadPinPadSn_Api(byte[])
  PEDSavePinPadSn_Api([B)I = PEDSavePinPadSn_Api(byte[])
  PedSelectPlace_Api(Ljava/lang/String;)I = PedSelectPlace_Api(string)
  PEDSetContent_Api(Landroid/content/Context;)V = PEDSetContent_Api(Android.Content.Context)
  PEDSetDispAmt_Api(Ljava/lang/String;)V = PEDSetDispAmt_Api(string)
  PEDSetHdSoft_Api(I)I = PEDSetHdSoft_Api(int)
  PEDSetKeyType_Api(I)V = PEDSetKeyType_Api(int)
  PEDSetPinBoardStyle_Api(I)V = PEDSetPinBoardStyle_Api(int)
  PEDSnMacOnly_Api([BI[BI)I = PEDSnMacOnly_Api(byte[], int, byte[], int)
  PEDStopPin_Api()V = PEDStopPin_Api()
  PedSubmit(Lcom/vanstone/page/widget/body/custom/IKeyBoard;)V = PedSubmit(Com.Vanstone.Page.Widget.Body.Custom.IKeyBoard)
  PEDWrite21Key_Api(I[B)I = PEDWrite21Key_Api(int, byte[])
  PEDWriteIcBcKey_Api([BIIII)I = PEDWriteIcBcKey_Api(byte[], int, int, int, int)
  PEDWriteIcBcKey_Api([BIIIII[B)I = PEDWriteIcBcKey_Api(byte[], int, int, int, int, int, byte[])
  PEDWriteKey_Api(II[BII[B)I = PEDWriteKey_Api(int, int, byte[], int, int, byte[])
  PEDWriteMKey_Api(II[B)I = PEDWriteMKey_Api(int, int, byte[])
  PEDWriteWKey_Api(III[B)I = PEDWriteWKey_Api(int, int, int, byte[])
  setAmountColor(Ljava/lang/String;)V = SetAmountColor(string)
  setAmountFont(Ljava/lang/String;)V = SetAmountFont(string)
  setAmountSize(F)V = SetAmountSize(float)
  setBottomBtnText([Ljava/lang/String;)V = SetBottomBtnText(string[])
  setBottomFont(Ljava/lang/String;)V = SetBottomFont(string)
  setBottomTextColor(Ljava/lang/String;)V = SetBottomTextColor(string)
  setBottomTextSize(F)V = SetBottomTextSize(float)
  setCardNo(Ljava/lang/String;)V = SetCardNo(string)
  setCardNo_Api(Ljava/lang/String;)V = SetCardNo_Api(string)
  SetMkeyIndex_Api(I)V = SetMkeyIndex_Api(int)
  setNumColor(Ljava/lang/String;)V = SetNumColor(string)
  setNumFont(Ljava/lang/String;)V = SetNumFont(string)
  setNumSize(F)V = SetNumSize(float)
  setPinBoardFixed(Z)V = SetPinBoardFixed(bool)
  setPinBoardKey_Api(Landroid/os/Bundle;)V = SetPinBoardKey_Api(Android.OS.Bundle)
  setPinBoardMsg(Landroid/os/Bundle;)V = SetPinBoardMsg(Android.OS.Bundle)
  setPinBoardSetting(Landroid/os/Bundle;)V = SetPinBoardSetting(Android.OS.Bundle)
  setStatusbarColor(Ljava/lang/String;)V = SetStatusbarColor(string)
  setStatusbarHide(Z)V = SetStatusbarHide(bool)
  setTextColor(Ljava/lang/String;)V = SetTextColor(string)
  setTextFont(Ljava/lang/String;)V = SetTextFont(string)
  setTextSize(F)V = SetTextSize(float)
  setTitleBackGroundColor(Ljava/lang/String;)V = SetTitleBackGroundColor(string)
  TR31_WriteKey_Api(I[B[B[B)I = TR31_WriteKey_Api(int, byte[], byte[], byte[])
  WirteMkeyFY_Api([BI[BI[BII)I = WirteMkeyFY_Api(byte[], int, byte[], int, byte[], int, int)
  writeAesKey(BIBIB[BBB[B)I = WriteAesKey(sbyte, int, sbyte, int, sbyte, byte[], sbyte, sbyte, byte[])
  writeAesTik(BBB[B[BBB[B)I = WriteAesTik(sbyte, sbyte, sbyte, byte[], byte[], sbyte, sbyte, byte[])
  writeDerivedKey(II[BI)I = WriteDerivedKey(int, int, byte[], int)
  writeRSAKey_Api(B[B)I = WriteRSAKey_Api(sbyte, byte[])
  writeRSAKeyEx_Api(II[BI[B[B)I = WriteRSAKeyEx_Api(int, int, byte[], int, byte[], byte[])
com/vanstone/trans/api/PhoneFunApi = Com.Vanstone.Trans.Api.PhoneFunApi
  <init>()V = .ctor()
  CloseSound_Api()V = CloseSound_Api()
  DispPhoneIcon_Api(II)V = DispPhoneIcon_Api(int, int)
  PhoneHookDeal_Api()V = PhoneHookDeal_Api()
  PhoneHookDisable_Api()V = PhoneHookDisable_Api()
  PhoneHookEnable_Api()V = PhoneHookEnable_Api()
  PhoneMicSet_Api(I)V = PhoneMicSet_Api(int)
  PhoneStaQurry_Api([B[B)I = PhoneStaQurry_Api(byte[], byte[])
  PhoneTelDail_Api(I)I = PhoneTelDail_Api(int)
  SpkClose_Api()V = SpkClose_Api()
  SpkOpen_Api()V = SpkOpen_Api()
  SpkSoundSet_Api(I)V = SpkSoundSet_Api(int)
  TelephoneEvent_Api(I)I = TelephoneEvent_Api(int)
com/vanstone/trans/api/PiccApi = Com.Vanstone.Trans.Api.PiccApi
  <init>()V = .ctor()
  NTAG_CARDVERSION = NtagCardversion
  CommCardCommand_Api([BI[B)I = CommCardCommand_Api(byte[], int, byte[])
  M1Authority_Api(II[B)I = M1Authority_Api(int, int, byte[])
  M1DecreaseValue_Api(III)I = M1DecreaseValue_Api(int, int, int)
  M1IncreaseValue_Api(III)I = M1IncreaseValue_Api(int, int, int)
  M1ReadBlock_Api(I[B)I = M1ReadBlock_Api(int, byte[])
  M1WriteBlock_Api(I[B)I = M1WriteBlock_Api(int, byte[])
  NFCListenStart_Api()I = NFCListenStart_Api()
  NFCListenStop_Api()I = NFCListenStop_Api()
  NFCPowerControl_Api(Z)I = NFCPowerControl_Api(bool)
  NFCReadUriInfo_Api([B[B[B)I = NFCReadUriInfo_Api(byte[], byte[], byte[])
  NFCWriteUriInfo_Api([B[B[B)I = NFCWriteUriInfo_Api(byte[], byte[], byte[])
  NTAGAuthority_Api([B[B)I = NTAGAuthority_Api(byte[], byte[])
  NTAGFastReadData_Api(II[B)I = NTAGFastReadData_Api(int, int, byte[])
  NTAGGetCardInfo_Api()Landroid/os/Bundle; = NTAGGetCardInfo_Api()
  NTAGReadCount_Api([B)I = NTAGReadCount_Api(byte[])
  NTAGReadData_Api(I[B)I = NTAGReadData_Api(int, byte[])
  NTAGReadSign_Api([B)I = NTAGReadSign_Api(byte[])
  NTAGWriteData_Api(I[B)I = NTAGWriteData_Api(int, byte[])
  PiccCheck_Api(I[B[B)I = PiccCheck_Api(int, byte[], byte[])
  PiccClose_Api()I = PiccClose_Api()
  PiccGetCardInfo_Api([B[B[B[B)I = PiccGetCardInfo_Api(byte[], byte[], byte[], byte[])
  PiccHalt_Api()I = PiccHalt_Api()
  PiccIsoCommand_Api(Lcom/vanstone/trans/api/struct/ApduSend;Lcom/vanstone/trans/api/struct/ApduResp;)V = PiccIsoCommand_Api(Com.Vanstone.Trans.Api.Struct.ApduSend, Com.Vanstone.Trans.Api.Struct.ApduResp)
  PiccIsoCommand_Api(I[BI[B)I = PiccIsoCommand_Api(int, byte[], int, byte[])
  PiccOpen_Api()I = PiccOpen_Api()
  PiccRemove_Api()I = PiccRemove_Api()
  PiccRest_Api(I[B)I = PiccRest_Api(int, byte[])
  SidCardCommand_Api([BI[B)I = SidCardCommand_Api(byte[], int, byte[])
  SidCardCommandSelectEx_Api(Z)V = SidCardCommandSelectEx_Api(bool)
com/vanstone/trans/api/PiccExApi = Com.Vanstone.Trans.Api.PiccExApi
  <init>()V = .ctor()
  PiccCheckEx_Api(I[B[B)I = PiccCheckEx_Api(int, byte[], byte[])
  PiccCloseEx_Api()I = PiccCloseEx_Api()
  PiccIsoCommandEx_Api(Lcom/vanstone/trans/api/struct/ApduSend;Lcom/vanstone/trans/api/struct/ApduResp;)V = PiccIsoCommandEx_Api(Com.Vanstone.Trans.Api.Struct.ApduSend, Com.Vanstone.Trans.Api.Struct.ApduResp)
  PiccOpenEx_Api()I = PiccOpenEx_Api()
  PiccQPBOCBalanceEx_Api([B)I = PiccQPBOCBalanceEx_Api(byte[])
  PiccQPBOCDetailEx_Api([B)I = PiccQPBOCDetailEx_Api(byte[])
  PiccQPBOCSaleEx_Api(I[B)I = PiccQPBOCSaleEx_Api(int, byte[])
  PiccRemoveEx_Api()I = PiccRemoveEx_Api()
  SidCardCommandEx_Api([BI[B)I = SidCardCommandEx_Api(byte[], int, byte[])
com/vanstone/trans/api/PinpadApi = Com.Vanstone.Trans.Api.PinpadApi
  <init>()V = .ctor()
  CoveDispAmt([B[B)I = CoveDispAmt(byte[], byte[])
  GetTermInforEx_Api([BI)I = GetTermInforEx_Api(byte[], int)
  PPCheckState_Api(I)I = PPCheckState_Api(int)
  PPDes_Api(III[BI[B)I = PPDes_Api(int, int, int, byte[], int, byte[])
  PPDisAmt_Api([BI)I = PPDisAmt_Api(byte[], int)
  PPDukptIncreaseKsn_Api(I)I = PPDukptIncreaseKsn_Api(int)
  PPDukptTdes_Api(III[B[BII[B[B)I = PPDukptTdes_Api(int, int, int, byte[], byte[], int, int, byte[], byte[])
  PPDukptWriteTIK_Api(III[B[BI)I = PPDukptWriteTIK_Api(int, int, int, byte[], byte[], int)
  PPGetDukptKSN_Api(I[B)I = PPGetDukptKSN_Api(int, byte[])
  PPGetEMVOfflinePin_Api(III)I = PPGetEMVOfflinePin_Api(int, int, int)
  PPGetExpress_Api()I = PPGetExpress_Api()
  PPGetExpress_Api([B)I = PPGetExpress_Api(byte[])
  PPGetMacDukpt_Api(II[BI[B[BI)I = PPGetMacDukpt_Api(int, int, byte[], int, byte[], byte[], int)
  PPGetPinDukpt_Api(IIII[B[B[B)I = PPGetPinDukpt_Api(int, int, int, int, byte[], byte[], byte[])
  PPGetPwd_Api(III[B[BI)I = PPGetPwd_Api(int, int, int, byte[], byte[], int)
  PPGetScanfEx_Api(III[BIIIII)I = PPGetScanfEx_Api(int, int, int, byte[], int, int, int, int, int)
  PPGetVersion_Api([B[B)I = PPGetVersion_Api(byte[], byte[])
  PPMac_Api(II[BI[BI)I = PPMac_Api(int, int, byte[], int, byte[], int)
  PPPInitEx_Api()I = PPPInitEx_Api()
  PPPowerOff_Api()V = PPPowerOff_Api()
  PPPowerOn_Api()V = PPPowerOn_Api()
  PPPreGetPwd_Api([BI[BI)I = PPPreGetPwd_Api(byte[], int, byte[], int)
  PPReadPinPadSn_Api([B)I = PPReadPinPadSn_Api(byte[])
  PPSavePinPadSn_Api([B)I = PPSavePinPadSn_Api(byte[])
  PPScrCls_Api()V = PPScrCls_Api()
  PPSetBaude_Api(I)I = PPSetBaude_Api(int)
  PPUpdateAssetZipFiles_Api(Landroid/content/Context;Ljava/lang/String;Lcom/vanstone/utils/PPUpdate$IUpdatePinPadListener;)I = PPUpdateAssetZipFiles_Api(Android.Content.Context, string, Com.Vanstone.Utils.PPUpdate.IUpdatePinPadListener)
  PPUpdateAutoFromOTA_Api(Lcom/vanstone/utils/PPUpdate$IUpdatePinPadListener;)I = PPUpdateAutoFromOTA_Api(Com.Vanstone.Utils.PPUpdate.IUpdatePinPadListener)
  PPWriteIcBcKey_Api([BIIIII[B)I = PPWriteIcBcKey_Api(byte[], int, int, int, int, int, byte[])
  PPWriteKey_Api(II[BII[B)I = PPWriteKey_Api(int, int, byte[], int, int, byte[])
  PPWriteMKey_Api(II[B)I = PPWriteMKey_Api(int, int, byte[])
  PPWriteWKey_Api(III[B)I = PPWriteWKey_Api(int, int, int, byte[])
  ScrPinpadFaceEx_Api(Ljava/util/List;I)I = ScrPinpadFaceEx_Api(System.Collections.Generic.IList<Com.Vanstone.Utils.PinpadFace>, int)
  WaitAnyKeyEx_Api(I)I = WaitAnyKeyEx_Api(int)
com/vanstone/trans/api/PrinterApi = Com.Vanstone.Trans.Api.PrinterApi
  <init>()V = .ctor()
  ENCODING_GBK = EncodingGbk
  ENCODING_UTF8 = EncodingUtf8
  LANG_CH = LangCh
  LANG_ENGLISH = LangEnglish
  LANG_FRENCH = LangFrench
  LANG_PERSIAN = LangPersian
  LANG_PORTUGUESE = LangPortuguese
  LANG_RUSSIAN = LangRussian
  LANG_SPANISH = LangSpanish
  MODULE_NAME_ASD18 = ModuleNameAsd18
  strSb = StrSb
  USE_DRIVER_PRINT = UseDriverPrint
  GetLang_Api()I = Lang_Api
  GetPrintState()I = PrintState
  printAddBarCode_Api(IIIZLjava/lang/String;)V = PrintAddBarCode_Api(int, int, int, bool, string)
  printAddBarCode_Api(IIIZLjava/lang/String;Ljava/lang/String;)V = PrintAddBarCode_Api(int, int, int, bool, string, string)
  printAddBarCode_Api(IIILjava/lang/String;)V = PrintAddBarCode_Api(int, int, int, string)
  printAddImage_Api(III[B)V = PrintAddImage_Api(int, int, int, byte[])
  printAddQrCode_Api(IILjava/lang/String;)V = PrintAddQrCode_Api(int, int, string)
  printAddText_Api(IILjava/lang/String;)V = PrintAddText_Api(int, int, string)
  printEnd_Api()I = PrintEnd_Api()
  printFeedLine_Api(I)V = PrintFeedLine_Api(int)
  printGetTextSize_Api()I = PrintGetTextSize_Api()
  printPaperFeed_Api(I)I = PrintPaperFeed_Api(int)
  printQueryStatus_Api()I = PrintQueryStatus_Api()
  printSetAlign_Api(I)V = PrintSetAlign_Api(int)
  printSetBlodText_Api(Z)V = PrintSetBlodText_Api(bool)
  printSetGray_Api(I)V = PrintSetGray_Api(int)
  printSetInvert_Api(Z)V = PrintSetInvert_Api(bool)
  printSetItalic_Api(F)V = PrintSetItalic_Api(float)
  printSetLineThrough_Api(Z)V = PrintSetLineThrough_Api(bool)
  printSetTextSize_Api(I)I = PrintSetTextSize_Api(int)
  printStartPrint_Api()V = PrintStartPrint_Api()
  PrnCheckPrnData_Api()I = PrnCheckPrnData_Api()
  PrnClose_Api()V = PrnClose_Api()
  PrnClrBuff_Api()V = PrnClrBuff_Api()
  PrnCut_Api()V = PrnCut_Api()
  PrnFontSet_Api(Landroid/content/res/AssetManager;Ljava/lang/String;)V = PrnFontSet_Api(Android.Content.Res.AssetManager, string)
  PrnFontSet_Api(III)V = PrnFontSet_Api(int, int, int)
  PrnGetModuleInfo_Api()Landroid/os/Bundle; = PrnGetModuleInfo_Api()
  PrnGetSupportModule_Api()[Ljava/lang/String; = PrnGetSupportModule_Api()
  PrnHTSet_Api(Z)V = PrnHTSet_Api(bool)
  PrnHTSet_Api(I)V = PrnHTSet_Api(int)
  PrnLeftIndSet_Api(S)V = PrnLeftIndSet_Api(short)
  PrnLessen_Api(Z)V = PrnLessen_Api(bool)
  PrnLineSpaceSet_Api(SI)V = PrnLineSpaceSet_Api(short, int)
  PrnLogo_Api(Landroid/graphics/Bitmap;)I = PrnLogo_Api(Android.Graphics.Bitmap)
  PrnLogo_Api([BI)I = PrnLogo_Api(byte[], int)
  PrnOpen_Api(Ljava/lang/String;Landroid/content/Context;)I = PrnOpen_Api(string, Android.Content.Context)
  PrnReleaseModule_Api()V = PrnReleaseModule_Api()
  PrnSelectModule_Api(Ljava/lang/String;Landroid/os/Bundle;)I = PrnSelectModule_Api(string, Android.OS.Bundle)
  PrnSetFont_Api(II)I = PrnSetFont_Api(int, int)
  PrnSetGray_Api(I)I = PrnSetGray_Api(int)
  PrnSetParams_Api(Landroid/os/Bundle;)V = PrnSetParams_Api(Android.OS.Bundle)
  PrnSetQuality_Api(I)I = PrnSetQuality_Api(int)
  PrnSpeedSet_Api(I)V = PrnSpeedSet_Api(int)
  PrnStart_Api()I = PrnStart_Api()
  PrnStatus_Api()I = PrnStatus_Api()
  PrnStatus_Api(Landroid/content/Context;)I = PrnStatus_Api(Android.Content.Context)
  PrnStep_Api(I)I = PrnStep_Api(int)
  PrnStr_Api([B)I = PrnStr_Api(byte[])
  PrnStr_Api(Ljava/lang/String;)I = PrnStr_Api(string)
  PrnZoom_Api(Z)V = PrnZoom_Api(bool)
  setContext(Landroid/content/Context;)V = SetContext(Android.Content.Context)
  setFontName_Api(Ljava/lang/String;)I = SetFontName_Api(string)
  SetLang_Api(II)V = SetLang_Api(int, int)
com/vanstone/trans/api/Rs232Api = Com.Vanstone.Trans.Api.Rs232Api
  <init>()V = .ctor()
  PortClose_Api(I)I = PortClose_Api(int)
  PortIsEmpty(I)I = PortIsEmpty(int)
  PortIsEmpty(IZ)I = PortIsEmpty(int, bool)
  PortIsEmpty_Api(IZ)I = PortIsEmpty_Api(int, bool)
  PortOpen_Api(I)I = PortOpen_Api(int)
  PortRecv_Api(I[BII)I = PortRecv_Api(int, byte[], int, int)
  PortReset_Api(I)I = PortReset_Api(int)
  PortSends_Api(I[BI)I = PortSends_Api(int, byte[], int)
  PortSetBaud_Api(IIIII)I = PortSetBaud_Api(int, int, int, int, int)
com/vanstone/trans/api/ScanApi = Com.Vanstone.Trans.Api.ScanApi
  <init>()V = .ctor()
  BDL_SCAN_BUZZER = BdlScanBuzzer
  BDL_SCAN_CAMERA_FORE = BdlScanCameraFore
  BDL_SCAN_CANINPUT = BdlScanCaninput
  BDL_SCAN_CODE_ALL = BdlScanCodeAll
  BDL_SCAN_CODE_COMMON = BdlScanCodeCommon
  BDL_SCAN_CODE_MODE = BdlScanCodeMode
  BDL_SCAN_CODE_ONLY_BARCODE = BdlScanCodeOnlyBarcode
  BDL_SCAN_CODE_ONLY_QRCODE = BdlScanCodeOnlyQrcode
  BDL_SCAN_CUSTOM_BTNTEXT = BdlScanCustomBtntext
  BDL_SCAN_CUSTOM_BTNTEXT_COLOR = BdlScanCustomBtntextColor
  BDL_SCAN_CUSTOM_BTNTEXT_FONT = BdlScanCustomBtntextFont
  BDL_SCAN_CUSTOM_BTNTEXT_SIZE = BdlScanCustomBtntextSize
  BDL_SCAN_CUSTOM_BUTTON_SHOW = BdlScanCustomButtonShow
  BDL_SCAN_CUSTOM_SUM = BdlScanCustomSum
  BDL_SCAN_CUSTOM_SUM_COLOR = BdlScanCustomSumColor
  BDL_SCAN_CUSTOM_SUM_FONT = BdlScanCustomSumFont
  BDL_SCAN_CUSTOM_SUM_SIZE = BdlScanCustomSumSize
  BDL_SCAN_CUSTOM_TARGET_ACTIVITY = BdlScanCustomTargetActivity
  BDL_SCAN_CUSTOM_TITLEBAR_COLOR = BdlScanCustomTitlebarColor
  BDL_SCAN_CUSTOM_TITLE_COLOR = BdlScanCustomTitleColor
  BDL_SCAN_CUSTOM_TITLE_FONT = BdlScanCustomTitleFont
  BDL_SCAN_CUSTOM_TITLE_SIZE = BdlScanCustomTitleSize
  BDL_SCAN_CUSTOM_WARM_COLOR = BdlScanCustomWarmColor
  BDL_SCAN_CUSTOM_WARM_FONT = BdlScanCustomWarmFont
  BDL_SCAN_CUSTOM_WARM_SIZE = BdlScanCustomWarmSize
  BDL_SCAN_DETEC = BdlScanDetec
  BDL_SCAN_DIALOGTITLE = BdlScanDialogtitle
  BDL_SCAN_FlASH = BDLSCANFlASH
  BDL_SCAN_HEIGHT = BdlScanHeight
  BDL_SCAN_LAYOUT_ESCBTN_POSIT = BdlScanLayoutEscbtnPosit
  BDL_SCAN_LAYOUT_ESCBTN_TEXT = BdlScanLayoutEscbtnText
  BDL_SCAN_LAYOUT_SUBTEXT = BdlScanLayoutSubtext
  BDL_SCAN_LAYOUT_TITLE = BdlScanLayoutTitle
  BDL_SCAN_LAYOUT_TYPES = BdlScanLayoutTypes
  BDL_SCAN_MAXTHRESHOLD = BdlScanMaxthreshold
  BDL_SCAN_MODE = BdlScanMode
  BDL_SCAN_MULTTIME = BdlScanMulttime
  BDL_SCAN_ONESHOT = BdlScanOneshot
  BDL_SCAN_RERIOD = BdlScanReriod
  BDL_SCAN_TIME_INTERVAL = BdlScanTimeInterval
  BDL_SCAN_TIMEOUTS = BdlScanTimeouts
  BDL_SCAN_TOGGLE_ON = BdlScanToggleOn
  BDL_SCAN_TOOLS = BdlScanTools
  BDL_SCAN_VIBRATE = BdlScanVibrate
  BDL_SCAN_WIDTH = BdlScanWidth
  SCANS_CANCEL = ScansCancel
  SCANS_DATA = ScansData
  SCANS_DONE = ScansDone
  SCANS_ERROR = ScansError
  SCANS_NORMAL = ScansNormal
  SCANS_STATUS = ScansStatus
  SCANS_TIMEROUT = ScansTimerout
  TAG = Tag
  ScanClose_Api()I = ScanClose_Api()
  ScanGetData_Api([B)I = ScanGetData_Api(byte[])
  ScanOpen_Api(Landroid/os/Bundle;Lcom/vanstone/appsdk/api/interfaces/IScanResult;)I = ScanOpen_Api(Android.OS.Bundle, Com.Vanstone.Appsdk.Api.Interfaces.IScanResult)
com/vanstone/trans/api/ScanExApi = Com.Vanstone.Trans.Api.ScanExApi
  <init>()V = .ctor()
  ScanBcr128BmpEx_Api(Ljava/lang/String;Ljava/lang/String;)I = ScanBcr128BmpEx_Api(string, string)
  ScanBcr39BmpEx_Api(Ljava/lang/String;Ljava/lang/String;)I = ScanBcr39BmpEx_Api(string, string)
  ScanCloseEx_Api()I = ScanCloseEx_Api()
  ScanGetDataEx_Api([BI)I = ScanGetDataEx_Api(byte[], int)
  ScanOpenEx_Api()I = ScanOpenEx_Api()
  ScanSetTypeEx_Api(I)V = ScanSetTypeEx_Api(int)
com/vanstone/trans/api/SerialPort = Com.Vanstone.Trans.Api.SerialPort
  <init>()V = .ctor()
  B0 = B0
  B1000000 = B1000000
  B110 = B110
  B115200 = B115200
  B1152000 = B1152000
  B1200 = B1200
  B150 = B150
  B1500000 = B1500000
  B1800 = B1800
  B19200 = B19200
  B200 = B200
  B2000000 = B2000000
  B230400 = B230400
  B2400 = B2400
  B2500000 = B2500000
  B300 = B300
  B3000000 = B3000000
  B3500000 = B3500000
  B38400 = B38400
  B4000000 = B4000000
  B460800 = B460800
  B4800 = B4800
  B50 = B50
  B500000 = B500000
  B57600 = B57600
  B576000 = B576000
  B600 = B600
  B75 = B75
  B921600 = B921600
  B9600 = B9600
  PARAM_ERROR = ParamError
  PORT_NUM_GSMPORT = PortNumGsmport
  PORT_NUM_TTYHSL0 = PortNumTtyhsl0
  SERIAL_ERROR_BAUDRATE = SerialErrorBaudrate
  SERIAL_ERROR_CRC = SerialErrorCrc
  SERIAL_ERROR_EMPTY = SerialErrorEmpty
  SERIAL_ERROR_OPEN = SerialErrorOpen
  SERIAL_ERROR_READ = SerialErrorRead
  SERIAL_ERROR_SETTING = SerialErrorSetting
  SERIAL_ERROR_TIMEOUT = SerialErrorTimeout
  SERIAL_ERROR_WRITE = SerialErrorWrite
  SERIAL_INVALID_FILE = SerialInvalidFile
  SERIAL_INVALID_RESOURCE = SerialInvalidResource
  SERIAL_RESULT_OK = SerialResultOk
  SERIAL_UN_OPEN = SerialUnOpen
  available_Api()I = Available_Api()
  available_Api(I)I = Available_Api(int)
  close_Api()I = Close_Api()
  open_Api(II)I = Open_Api(int, int)
  read_Api([B)I = Read_Api(byte[])
  read_Api([BII)I = Read_Api(byte[], int, int)
  write_Api([B)I = Write_Api(byte[])
  write_Api([BII)I = Write_Api(byte[], int, int)
com/vanstone/trans/api/SiCardApi = Com.Vanstone.Trans.Api.SiCardApi
  <init>()V = .ctor()
  MTCardPinControl_Api(I[B[B)I = MTCardPinControl_Api(int, byte[], byte[])
  MTReadCard_Api([B[B[B[B[B)I = MTReadCard_Api(byte[], byte[], byte[], byte[], byte[])
  MTReadCardNo_Api([B[B)I = MTReadCardNo_Api(byte[], byte[])
  MTReadPSAMNo_Api([B[B)I = MTReadPSAMNo_Api(byte[], byte[])
  MTWriteCard_Api([B[B[B[B)I = MTWriteCard_Api(byte[], byte[], byte[], byte[])
  ReadCardIssuer_Api([B[B)I = ReadCardIssuer_Api(byte[], byte[])
  ReadCardUserInfo_Api([B[B)I = ReadCardUserInfo_Api(byte[], byte[])
com/vanstone/trans/api/SignApi = Com.Vanstone.Trans.Api.SignApi
  <init>()V = .ctor()
  getSignatureLength_Api()I = SignatureLength_Api
  getSignBmp_Api()Landroid/graphics/Bitmap; = SignBmp_Api
  getSignatureCompressData_Api()[B = GetSignatureCompressData_Api()
  isToastConfirm(Z)V = IsToastConfirm(bool)
  setResignCount(I)V = SetResignCount(int)
  setSignBoardStyle(I)V = SetSignBoardStyle(int)
  startSign_Api(ILjava/lang/String;)I = StartSign_Api(int, string)
  startSign_Api(ILjava/lang/String;Lcom/vanstone/sign/IStartSignListenner;)I = StartSign_Api(int, string, Com.Vanstone.Sign.IStartSignListenner)
  stopSign_Api()V = StopSign_Api()
com/vanstone/trans/api/SignPadExApi = Com.Vanstone.Trans.Api.SignPadExApi
  <init>()V = .ctor()
  SPadCalEx_Api()I = SPadCalEx_Api()
  SPadCloseEx_Api()I = SPadCloseEx_Api()
  SPadMakeSignEx_Api(Ljava/lang/String;I[BI)I = SPadMakeSignEx_Api(string, int, byte[], int)
  SPadOpenEx_Api(II)I = SPadOpenEx_Api(int, int)
  SPadStatusEx_Api([B[B)I = SPadStatusEx_Api(byte[], byte[])
com/vanstone/trans/api/SmApi = Com.Vanstone.Trans.Api.SmApi
  <init>()V = .ctor()
  Sm1_Api([BI[B[BI)I = Sm1_Api(byte[], int, byte[], byte[], int)
  Sm2ExportPK_Api(I[B)I = Sm2ExportPK_Api(int, byte[])
  SM2Init_Api(I)I = SM2Init_Api(int)
  Sm2Sign_Api([BI[B[B[B[BI)I = Sm2Sign_Api(byte[], int, byte[], byte[], byte[], byte[], int)
  SM2Verify_Api([BI[B[B[BI)I = SM2Verify_Api(byte[], int, byte[], byte[], byte[], int)
  SM3Hash_Api([BI[B)I = SM3Hash_Api(byte[], int, byte[])
  Sm4_Api([BI[B[BI)I = Sm4_Api(byte[], int, byte[], byte[], int)
  SmGetRand_Api(I[B)I = SmGetRand_Api(int, byte[])
  SMSetSlot_Api(I)I = SMSetSlot_Api(int)
com/vanstone/trans/api/struct/Addr = Com.Vanstone.Trans.Api.Struct.Addr
  <init>()V = .ctor()
  getMaxAddr()I = MaxAddr
  setMaxAddr(I)V = MaxAddr
  getMinAddr()I = MinAddr
  setMinAddr(I)V = MinAddr
  size()I = Size()
  toBean([B)V = ToBean(byte[])
  toBytes()[B = ToBytes()
com/vanstone/trans/api/struct/ApduResp = Com.Vanstone.Trans.Api.Struct.ApduResp
  <init>()V = .ctor()
  dataOut = DataOut
  sWA = SWA
  sWB = SWB
  getLenOut()S = LenOut
  setLenOut(S)V = LenOut
  getReadCardDataOk()B = ReadCardDataOk
  setReadCardDataOk(B)V = ReadCardDataOk
  getDataOut()[B = GetDataOut()
  getsWA()B = GetsWA()
  getsWB()B = GetsWB()
  setDataOut([B)V = SetDataOut(byte[])
  setsWA(B)V = SetsWA(sbyte)
  setsWB(B)V = SetsWB(sbyte)
  size()I = Size()
  toBean([B)V = ToBean(byte[])
  toBytes()[B = ToBytes()
com/vanstone/trans/api/struct/ApduRespUser = Com.Vanstone.Trans.Api.Struct.ApduRespUser
  <init>()V = .ctor()
  getLenOut()I = LenOut
  setLenOut(I)V = LenOut
  getSWA()B = SWA
  setSWA(B)V = SWA
  getSWB()B = SWB
  setSWB(B)V = SWB
  getDataOut()[B = GetDataOut()
  setDataOut([B)V = SetDataOut(byte[])
  size()I = Size()
  toBean([B)V = ToBean(byte[])
  toBytes()[B = ToBytes()
com/vanstone/trans/api/struct/ApduSend = Com.Vanstone.Trans.Api.Struct.ApduSend
  <init>()V = .ctor()
  Command = Command
  DataIn = DataIn
  EnableCancel = EnableCancel
  Lc = Lc
  Le = Le
  getEnableCancel()B = EnableCancel
  setEnableCancel(B)V = EnableCancel
  getLc()S = Lc
  setLc(S)V = Lc
  getLe()S = Le
  setLe(S)V = Le
  getCommand()[B = GetCommand()
  getDataIn()[B = GetDataIn()
  setCommand([B)V = SetCommand(byte[])
  setDataIn([B)V = SetDataIn(byte[])
  size()I = Size()
  toBean([B)V = ToBean(byte[])
  toBytes()[B = ToBytes()
com/vanstone/trans/api/struct/ApduSendUser = Com.Vanstone.Trans.Api.Struct.ApduSendUser
  <init>()V = .ctor()
  getLc()I = Lc
  setLc(I)V = Lc
  getLe()I = Le
  setLe(I)V = Le
  getCommand()[B = GetCommand()
  getDataIn()[B = GetDataIn()
  setCommand([B)V = SetCommand(byte[])
  setDataIn([B)V = SetDataIn(byte[])
  size()I = Size()
  toBean([B)V = ToBean(byte[])
  toBytes()[B = ToBytes()
com/vanstone/trans/api/struct/ApnInfo = Com.Vanstone.Trans.Api.Struct.ApnInfo
  <init>()V = .ctor()
  mcc = Mcc
  MMSC = Mmsc
  MMSPort = MMSPort
  MMSProxy = MMSProxy
  mnc = Mnc
  MVNOMatchData = MVNOMatchData
  MVNOType = MVNOType
  name = Name
  password = Password
  port = Port
  protocol = Protocol
  proxy = Proxy
  roamingProtocol = RoamingProtocol
  server = Server
  type = Type
  userName = UserName
  getApn()Ljava/lang/String; = Apn
  setApn(Ljava/lang/String;)V = Apn
  getApnId()I = ApnId
  setApnId(I)V = ApnId
  getAuthType()Ljava/lang/String; = AuthType
  setAuthType(Ljava/lang/String;)V = AuthType
  getBearer()Ljava/lang/String; = Bearer
  setBearer(Ljava/lang/String;)V = Bearer
  getMcc()Ljava/lang/String; = Mcc
  setMcc(Ljava/lang/String;)V = Mcc
  getMMSC()Ljava/lang/String; = MMSC
  setMMSC(Ljava/lang/String;)V = MMSC
  getMMSPort()Ljava/lang/String; = MMSPort
  setMMSPort(Ljava/lang/String;)V = MMSPort
  getMMSProxy()Ljava/lang/String; = MMSProxy
  setMMSProxy(Ljava/lang/String;)V = MMSProxy
  getMnc()Ljava/lang/String; = Mnc
  setMnc(Ljava/lang/String;)V = Mnc
  getMVNOMatchData()Ljava/lang/String; = MVNOMatchData
  setMVNOMatchData(Ljava/lang/String;)V = MVNOMatchData
  getMVNOType()Ljava/lang/String; = MVNOType
  setMVNOType(Ljava/lang/String;)V = MVNOType
  getName()Ljava/lang/String; = Name
  setName(Ljava/lang/String;)V = Name
  getPassword()Ljava/lang/String; = Password
  setPassword(Ljava/lang/String;)V = Password
  getPort()Ljava/lang/String; = Port
  setPort(Ljava/lang/String;)V = Port
  getProtocol()Ljava/lang/String; = Protocol
  setProtocol(Ljava/lang/String;)V = Protocol
  getProxy()Ljava/lang/String; = Proxy
  setProxy(Ljava/lang/String;)V = Proxy
  getRoamingProtocol()Ljava/lang/String; = RoamingProtocol
  setRoamingProtocol(Ljava/lang/String;)V = RoamingProtocol
  getServer()Ljava/lang/String; = Server
  setServer(Ljava/lang/String;)V = Server
  getType()Ljava/lang/String; = Type
  setType(Ljava/lang/String;)V = Type
  getUserName()Ljava/lang/String; = UserName
  setUserName(Ljava/lang/String;)V = UserName
com/vanstone/trans/api/struct/AppMsg = Com.Vanstone.Trans.Api.Struct.AppMsg
  <init>()V = .ctor()
  getEventEntry()J = EventEntry
  setEventEntry(J)V = EventEntry
  getMainEntry()J = MainEntry
  setMainEntry(J)V = MainEntry
  getNum()B = Num
  setNum(B)V = Num
  getaID()[B = GetaID()
  getDescript()[B = GetDescript()
  getLoadTime()[B = GetLoadTime()
  getName()[B = GetName()
  getProvider()[B = GetProvider()
  getReserve()[B = GetReserve()
  getVersion()[B = GetVersion()
  setaID([B)V = SetaID(byte[])
  setDescript([B)V = SetDescript(byte[])
  setLoadTime([B)V = SetLoadTime(byte[])
  setName([B)V = SetName(byte[])
  setProvider([B)V = SetProvider(byte[])
  setReserve([B)V = SetReserve(byte[])
  setVersion([B)V = SetVersion(byte[])
  size()I = Size()
  toBean([B)V = ToBean(byte[])
  toBytes()[B = ToBytes()
com/vanstone/trans/api/struct/BthConfig = Com.Vanstone.Trans.Api.Struct.BthConfig
  <init>()V = .ctor()
  GetMac()[B = GetMac()
  GetName()[B = GetName()
  GetPin()[B = GetPin()
  SetMac([B)I = SetMac(byte[])
  SetName([B)I = SetName(byte[])
  SetPin([B)I = SetPin(byte[])
  size()I = Size()
  toBean([B)V = ToBean(byte[])
  toBytes()[B = ToBytes()
com/vanstone/trans/api/struct/BthConnectInf = Com.Vanstone.Trans.Api.Struct.BthConnectInf
  <init>()V = .ctor()
  GetMac()[B = GetMac()
  GetName()[B = GetName()
  SetMac([B)I = SetMac(byte[])
  SetName([B)I = SetName(byte[])
  size()I = Size()
  toBean([B)V = ToBean(byte[])
  toBytes()[B = ToBytes()
com/vanstone/trans/api/struct/Call = Com.Vanstone.Trans.Api.Struct.Call
  <init>()V = .ctor()
  getFlag()B = Flag
  setFlag(B)V = Flag
  getSetTell()Lcom/vanstone/trans/api/struct/TellSet; = SetTell
  setSetTell(Lcom/vanstone/trans/api/struct/TellSet;)V = SetTell
  getDataTime()[B = GetDataTime()
  getPhoneName()[B = GetPhoneName()
  getPhoneNum()[B = GetPhoneNum()
  getPhoneNumDis()[B = GetPhoneNumDis()
  setDataTime([B)V = SetDataTime(byte[])
  setPhoneName([B)V = SetPhoneName(byte[])
  setPhoneNum([B)V = SetPhoneNum(byte[])
  setPhoneNumDis([B)V = SetPhoneNumDis(byte[])
  size()I = Size()
  toBean([B)V = ToBean(byte[])
  toBytes()[B = ToBytes()
com/vanstone/trans/api/struct/CdmaSet = Com.Vanstone.Trans.Api.Struct.CdmaSet
  <init>()V = .ctor()
  getCdmaNeedUser()B = CdmaNeedUser
  setCdmaNeedUser(B)V = CdmaNeedUser
  getSunny()B = Sunny
  setSunny(B)V = Sunny
  getCdmaIp1()[B = GetCdmaIp1()
  getCdmaIp2()[B = GetCdmaIp2()
  getCdmaPort1()[B = GetCdmaPort1()
  getCdmaPort2()[B = GetCdmaPort2()
  getCdmaUser1()[B = GetCdmaUser1()
  getCdmaUserPwd1()[B = GetCdmaUserPwd1()
  setCdmaIp1([B)V = SetCdmaIp1(byte[])
  setCdmaIp2([B)V = SetCdmaIp2(byte[])
  setCdmaPort1([B)V = SetCdmaPort1(byte[])
  setCdmaPort2([B)V = SetCdmaPort2(byte[])
  setCdmaUser1([B)V = SetCdmaUser1(byte[])
  setCdmaUserPwd1([B)V = SetCdmaUserPwd1(byte[])
  size()I = Size()
  toBean([B)V = ToBean(byte[])
  toBytes()[B = ToBytes()
com/vanstone/trans/api/struct/CommParaStruc = Com.Vanstone.Trans.Api.Struct.CommParaStruc
  <init>()V = .ctor()
  ExParam = ExParam
  fskDialSet = FskDialSet
  gprsSet = GprsSet
  hdlcSet = HdlcSet
  netCdmaGprsSet = NetCdmaGprsSet
  netSet = NetSet
  UseSSL = UseSSL
  wifiSet = WifiSet
  getCdmaSet()Lcom/vanstone/trans/api/struct/CdmaSet; = CdmaSet
  setCdmaSet(Lcom/vanstone/trans/api/struct/CdmaSet;)V = CdmaSet
  getCurCommMode()J = CurCommMode
  setCurCommMode(J)V = CurCommMode
  getDialSet()Lcom/vanstone/trans/api/struct/DialSet; = DialSet
  setDialSet(Lcom/vanstone/trans/api/struct/DialSet;)V = DialSet
  getFskDialSet()Lcom/vanstone/trans/api/struct/FskDialSet; = FskDialSet
  setFskDialSet(Lcom/vanstone/trans/api/struct/FskDialSet;)V = FskDialSet
  getGprsSet()Lcom/vanstone/trans/api/struct/GprsSet; = GprsSet
  setGprsSet(Lcom/vanstone/trans/api/struct/GprsSet;)V = GprsSet
  getHdlcSet()Lcom/vanstone/trans/api/struct/HdlcSet; = HdlcSet
  setHdlcSet(Lcom/vanstone/trans/api/struct/HdlcSet;)V = HdlcSet
  getNetCdmaGprsSet()Lcom/vanstone/trans/api/struct/NetCdmaGprsSet; = NetCdmaGprsSet
  setNetCdmaGprsSet(Lcom/vanstone/trans/api/struct/NetCdmaGprsSet;)V = NetCdmaGprsSet
  getNetSet()Lcom/vanstone/trans/api/struct/NetSet; = NetSet
  setNetSet(Lcom/vanstone/trans/api/struct/NetSet;)V = NetSet
  getUseSSL()I = UseSSL
  setUseSSL(I)V = UseSSL
  getWifiSet()Lcom/vanstone/trans/api/struct/WifiSet; = WifiSet
  setWifiSet(Lcom/vanstone/trans/api/struct/WifiSet;)V = WifiSet
  getExParam()[B = GetExParam()
  setExParam([B)V = SetExParam(byte[])
  size()I = Size()
  toBean([B)V = ToBean(byte[])
  toBytes()[B = ToBytes()
com/vanstone/trans/api/struct/ConfingPara = Com.Vanstone.Trans.Api.Struct.ConfingPara
  <init>()V = .ctor()
  getgCidFormat()I = GetgCidFormat()
  getgDailFailTime()I = GetgDailFailTime()
  getgDailTime()I = GetgDailTime()
  getgFskConfig()I = GetgFskConfig()
  getgFskFreHight()I = GetgFskFreHight()
  getgFskFreLow()I = GetgFskFreLow()
  getgFskSendLevel()I = GetgFskSendLevel()
  getgIntervalTime()I = GetgIntervalTime()
  getgLightOnTime()I = GetgLightOnTime()
  getgWaveLoseTime()I = GetgWaveLoseTime()
  setgCidFormat(I)V = SetgCidFormat(int)
  setgDailFailTime(I)V = SetgDailFailTime(int)
  setgDailTime(I)V = SetgDailTime(int)
  setgFskConfig(I)V = SetgFskConfig(int)
  setgFskFreHight(I)V = SetgFskFreHight(int)
  setgFskFreLow(I)V = SetgFskFreLow(int)
  setgFskSendLevel(I)V = SetgFskSendLevel(int)
  setgIntervalTime(I)V = SetgIntervalTime(int)
  setgLightOnTime(I)V = SetgLightOnTime(int)
  setgWaveLoseTime(I)V = SetgWaveLoseTime(int)
  size()I = Size()
  toBean([B)V = ToBean(byte[])
  toBytes()[B = ToBytes()
com/vanstone/trans/api/struct/DateUser = Com.Vanstone.Trans.Api.Struct.DateUser
  <init>()V = .ctor()
  getDay()B = Day
  setDay(B)V = Day
  getDow()B = Dow
  setDow(B)V = Dow
  getMon()B = Mon
  setMon(B)V = Mon
  getYear()S = Year
  setYear(S)V = Year
  size()I = Size()
  toBean([B)V = ToBean(byte[])
  toBytes()[B = ToBytes()
com/vanstone/trans/api/struct/DFNameInfo = Com.Vanstone.Trans.Api.Struct.DFNameInfo
  <init>()V = .ctor()
  AID = Aid
  DFName = DFName
  FID = Fid
  LenOfDFName = LenOfDFName
  RFU = Rfu
  getLenOfDFName()B = LenOfDFName
  setLenOfDFName(B)V = LenOfDFName
  getAID()[B = GetAID()
  getDFName()[B = GetDFName()
  getFID()[B = GetFID()
  getRFU()[B = GetRFU()
  setAID([B)V = SetAID(byte[])
  setDFName([B)V = SetDFName(byte[])
  setFID([B)V = SetFID(byte[])
  setRFU([B)V = SetRFU(byte[])
com/vanstone/trans/api/struct/DialSet = Com.Vanstone.Trans.Api.Struct.DialSet
  <init>()V = .ctor()
  dialTime = DialTime
  inputCenterNum = InputCenterNum
  inputCenterNum1 = InputCenterNum1
  inputCenterNum2 = InputCenterNum2
  predialNum = PredialNum
  reDialTimes = ReDialTimes
  tpdu = Tpdu
  getDialTime()B = DialTime
  setDialTime(B)V = DialTime
  getReDialTimes()B = ReDialTimes
  setReDialTimes(B)V = ReDialTimes
  getInputCenterNum()[B = GetInputCenterNum()
  getInputCenterNum1()[B = GetInputCenterNum1()
  getInputCenterNum2()[B = GetInputCenterNum2()
  getPredialNum()[B = GetPredialNum()
  getTpdu()[B = GetTpdu()
  setInputCenterNum([B)V = SetInputCenterNum(byte[])
  setInputCenterNum1([B)V = SetInputCenterNum1(byte[])
  setInputCenterNum2([B)V = SetInputCenterNum2(byte[])
  setPredialNum([B)V = SetPredialNum(byte[])
  setTpdu([B)V = SetTpdu(byte[])
  size()I = Size()
  toBean([B)V = ToBean(byte[])
  toBytes()[B = ToBytes()
com/vanstone/trans/api/struct/DispBuf = Com.Vanstone.Trans.Api.Struct.DispBuf
  <init>()V = .ctor()
  getCol()B = Col
  setCol(B)V = Col
  getCurrentAddr()I = CurrentAddr
  setCurrentAddr(I)V = CurrentAddr
  getNextAddr()I = NextAddr
  setNextAddr(I)V = NextAddr
  getPreAddr()I = PreAddr
  setPreAddr(I)V = PreAddr
  getUpdate()B = Update
  setUpdate(B)V = Update
  getChinese()[B = GetChinese()
  setChinese([B)V = SetChinese(byte[])
  size()I = Size()
  toBean([B)V = ToBean(byte[])
  toBytes()[B = ToBytes()
com/vanstone/trans/api/struct/FileInfo = Com.Vanstone.Trans.Api.Struct.FileInfo
  <init>()V = .ctor()
  getAttr()B = Attr
  setAttr(B)V = Attr
  getLength()J = Length
  setLength(J)V = Length
  getType()B = Type
  setType(B)V = Type
  getName()[B = GetName()
  setName([B)V = SetName(byte[])
  size()I = Size()
  toBean([B)V = ToBean(byte[])
  toBytes()[B = ToBytes()
com/vanstone/trans/api/struct/FileSysToPc = Com.Vanstone.Trans.Api.Struct.FileSysToPc
  <init>()V = .ctor()
  getFileListLen()[B = GetFileListLen()
  getFileSysCRC()[B = GetFileSysCRC()
  getFileSysData()[[B = GetFileSysData()
  getPackEnd()[B = GetPackEnd()
  getPackHead()[B = GetPackHead()
  getPackLen()[B = GetPackLen()
  setFileListLen([B)V = SetFileListLen(byte[])
  setFileSysCRC([B)V = SetFileSysCRC(byte[])
  setFileSysData([[B)V = SetFileSysData(byte[][])
  setPackEnd([B)V = SetPackEnd(byte[])
  setPackHead([B)V = SetPackHead(byte[])
  setPackLen([B)V = SetPackLen(byte[])
  size()I = Size()
  toBean([B)V = ToBean(byte[])
  toBytes()[B = ToBytes()
com/vanstone/trans/api/struct/FskDialSet = Com.Vanstone.Trans.Api.Struct.FskDialSet
  <init>()V = .ctor()
  getFskCheckToneTime()B = FskCheckToneTime
  setFskCheckToneTime(B)V = FskCheckToneTime
  getFskConfig()S = FskConfig
  setFskConfig(S)V = FskConfig
  getFskDelayBeforeDial()B = FskDelayBeforeDial
  setFskDelayBeforeDial(B)V = FskDelayBeforeDial
  getFskDtmfOffTime()B = FskDtmfOffTime
  setFskDtmfOffTime(B)V = FskDtmfOffTime
  getFskDtmfOnTime()B = FskDtmfOnTime
  setFskDtmfOnTime(B)V = FskDtmfOnTime
  getFskFreHight()S = FskFreHight
  setFskFreHight(S)V = FskFreHight
  getFskFreLow()S = FskFreLow
  setFskFreLow(S)V = FskFreLow
  getFskIfCheckDialTone()B = FskIfCheckDialTone
  setFskIfCheckDialTone(B)V = FskIfCheckDialTone
  getFskIfCheckPhone()B = FskIfCheckPhone
  setFskIfCheckPhone(B)V = FskIfCheckPhone
  getFskMarkSymbols()B = FskMarkSymbols
  setFskMarkSymbols(B)V = FskMarkSymbols
  getFskSendLevel()B = FskSendLevel
  setFskSendLevel(B)V = FskSendLevel
  getFskSigStandard()B = FskSigStandard
  setFskSigStandard(B)V = FskSigStandard
  getFskSynSymbols()B = FskSynSymbols
  setFskSynSymbols(B)V = FskSynSymbols
  getFskWaveLostTime()B = FskWaveLostTime
  setFskWaveLostTime(B)V = FskWaveLostTime
  getSunny()[B = GetSunny()
  setSunny([B)V = SetSunny(byte[])
  size()I = Size()
  toBean([B)V = ToBean(byte[])
  toBytes()[B = ToBytes()
com/vanstone/trans/api/struct/FuncPtrParam = Com.Vanstone.Trans.Api.Struct.FuncPtrParam
  <init>()V = .ctor()
  size()I = Size()
  toBean([B)V = ToBean(byte[])
  toBytes()[B = ToBytes()
com/vanstone/trans/api/struct/GprsSet = Com.Vanstone.Trans.Api.Struct.GprsSet
  <init>()V = .ctor()
  getGprsNeedUser()B = GprsNeedUser
  setGprsNeedUser(B)V = GprsNeedUser
  getGprsApn1()[B = GetGprsApn1()
  getGprsApn2()[B = GetGprsApn2()
  getGprsIp1()[B = GetGprsIp1()
  getGprsIp2()[B = GetGprsIp2()
  getGprsPort1()[B = GetGprsPort1()
  getGprsPort2()[B = GetGprsPort2()
  getGprsUser1()[B = GetGprsUser1()
  getGprsUserPwd1()[B = GetGprsUserPwd1()
  getSunny()[B = GetSunny()
  setGprsApn1([B)V = SetGprsApn1(byte[])
  setGprsApn2([B)V = SetGprsApn2(byte[])
  setGprsIp1([B)V = SetGprsIp1(byte[])
  setGprsIp2([B)V = SetGprsIp2(byte[])
  setGprsPort1([B)V = SetGprsPort1(byte[])
  setGprsPort2([B)V = SetGprsPort2(byte[])
  setGprsUser1([B)V = SetGprsUser1(byte[])
  setGprsUserPwd1([B)V = SetGprsUserPwd1(byte[])
  setSunny([B)V = SetSunny(byte[])
  size()I = Size()
  toBean([B)V = ToBean(byte[])
  toBytes()[B = ToBytes()
com/vanstone/trans/api/struct/HdlcSet = Com.Vanstone.Trans.Api.Struct.HdlcSet
  <init>()V = .ctor()
  asyncFormat = AsyncFormat
  baud = Baud
  checkToneTime = CheckToneTime
  delayBeforeDial = DelayBeforeDial
  dialMode = DialMode
  dtmfOffTime = DtmfOffTime
  dtmfOnTime = DtmfOnTime
  holdHandTime = HoldHandTime
  idleTime = IdleTime
  ifCheckDialTone = IfCheckDialTone
  ifCheckPhone = IfCheckPhone
  linkType = LinkType
  sendLevel = SendLevel
  sunny = Sunny
  waveLostTime = WaveLostTime
  getAsyncFormat()B = AsyncFormat
  setAsyncFormat(B)V = AsyncFormat
  getBaud()J = Baud
  setBaud(J)V = Baud
  getCheckToneTime()B = CheckToneTime
  setCheckToneTime(B)V = CheckToneTime
  getDelayBeforeDial()B = DelayBeforeDial
  setDelayBeforeDial(B)V = DelayBeforeDial
  getDialMode()B = DialMode
  setDialMode(B)V = DialMode
  getDtmfOffTime()B = DtmfOffTime
  setDtmfOffTime(B)V = DtmfOffTime
  getDtmfOnTime()B = DtmfOnTime
  setDtmfOnTime(B)V = DtmfOnTime
  getHoldHandTime()B = HoldHandTime
  setHoldHandTime(B)V = HoldHandTime
  getIdleTime()B = IdleTime
  setIdleTime(B)V = IdleTime
  getIfCheckDialTone()B = IfCheckDialTone
  setIfCheckDialTone(B)V = IfCheckDialTone
  getIfCheckPhone()B = IfCheckPhone
  setIfCheckPhone(B)V = IfCheckPhone
  getLinkType()B = LinkType
  setLinkType(B)V = LinkType
  getSendLevel()B = SendLevel
  setSendLevel(B)V = SendLevel
  getWaveLostTime()B = WaveLostTime
  setWaveLostTime(B)V = WaveLostTime
  getSunny()[B = GetSunny()
  setSunny([B)V = SetSunny(byte[])
  size()I = Size()
  toBean([B)V = ToBean(byte[])
  toBytes()[B = ToBytes()
com/vanstone/trans/api/struct/HzMemery = Com.Vanstone.Trans.Api.Struct.HzMemery
  <init>()V = .ctor()
  getLen()B = Len
  setLen(B)V = Len
  getPoint()[B = GetPoint()
  setPoint([B)V = SetPoint(byte[])
  size()I = Size()
  toBean([B)V = ToBean(byte[])
  toBytes()[B = ToBytes()
com/vanstone/trans/api/struct/IncomeFlag = Com.Vanstone.Trans.Api.Struct.IncomeFlag
  <init>()V = .ctor()
  getHaveCid()I = HaveCid
  setHaveCid(I)V = HaveCid
  getHaveDate()I = HaveDate
  setHaveDate(I)V = HaveDate
  getHaveName()I = HaveName
  setHaveName(I)V = HaveName
  getHaveNum()I = HaveNum
  setHaveNum(I)V = HaveNum
  size()I = Size()
  toBean([B)V = ToBean(byte[])
  toBytes()[B = ToBytes()
com/vanstone/trans/api/struct/IncomeRec = Com.Vanstone.Trans.Api.Struct.IncomeRec
  <init>()V = .ctor()
  getS_iFlag()Lcom/vanstone/trans/api/struct/IncomeFlag; = S_iFlag
  setS_iFlag(Lcom/vanstone/trans/api/struct/IncomeFlag;)V = S_iFlag
  getSigType()B = SigType
  setSigType(B)V = SigType
  getCurDate()[B = GetCurDate()
  getNameStr()[B = GetNameStr()
  getNumStr()[B = GetNumStr()
  setCurDate([B)V = SetCurDate(byte[])
  setNameStr([B)V = SetNameStr(byte[])
  setNumStr([B)V = SetNumStr(byte[])
  size()I = Size()
  toBean([B)V = ToBean(byte[])
  toBytes()[B = ToBytes()
com/vanstone/trans/api/struct/MemCardInfo = Com.Vanstone.Trans.Api.Struct.MemCardInfo
  <init>()V = .ctor()
  CardNo = CardNo
  CardType = CardType
  getCardNo()B = CardNo
  setCardNo(B)V = CardNo
  getCardType()B = CardType
  setCardType(B)V = CardType
  size()I = Size()
  toBean([B)V = ToBean(byte[])
  toBytes()[B = ToBytes()
com/vanstone/trans/api/struct/MemCardOut = Com.Vanstone.Trans.Api.Struct.MemCardOut
  <init>()V = .ctor()
  OutBufHex = OutBufHex
  OutLen = OutLen
  getOutLen()I = OutLen
  setOutLen(I)V = OutLen
  getOutBufHex()[B = GetOutBufHex()
  setOutBufHex([B)V = SetOutBufHex(byte[])
  size()I = Size()
  toBean([B)V = ToBean(byte[])
  toBytes()[B = ToBytes()
com/vanstone/trans/api/struct/MemCardPwd = Com.Vanstone.Trans.Api.Struct.MemCardPwd
  <init>()V = .ctor()
  CheckOrModify = CheckOrModify
  NewPwd = NewPwd
  OldPwd = OldPwd
  getCheckOrModify()I = CheckOrModify
  setCheckOrModify(I)V = CheckOrModify
  getNewPwd()[B = GetNewPwd()
  getOldPwd()[B = GetOldPwd()
  setNewPwd([B)V = SetNewPwd(byte[])
  setOldPwd([B)V = SetOldPwd(byte[])
  size()I = Size()
  toBean([B)V = ToBean(byte[])
  toBytes()[B = ToBytes()
com/vanstone/trans/api/struct/ModemPara = Com.Vanstone.Trans.Api.Struct.ModemPara
  <init>()V = .ctor()
  getDialTimes()B = DialTimes
  setDialTimes(B)V = DialTimes
  getDialWaitTime()B = DialWaitTime
  setDialWaitTime(B)V = DialWaitTime
  getDTMFHoldTime()B = DTMFHoldTime
  setDTMFHoldTime(B)V = DTMFHoldTime
  getDTMFSpaceTime()B = DTMFSpaceTime
  setDTMFSpaceTime(B)V = DTMFSpaceTime
  getIdleTime()B = IdleTime
  setIdleTime(B)V = IdleTime
  getOutLineTime()B = OutLineTime
  setOutLineTime(B)V = OutLineTime
  getSetCallee()B = SetCallee
  setSetCallee(B)V = SetCallee
  getSetLine()B = SetLine
  setSetLine(B)V = SetLine
  getSetModemMode()B = SetModemMode
  setSetModemMode(B)V = SetModemMode
  getSetModemSpeed()B = SetModemSpeed
  setSetModemSpeed(B)V = SetModemSpeed
  getSetPT()B = SetPT
  setSetPT(B)V = SetPT
  getSetTone()B = SetTone
  setSetTone(B)V = SetTone
  getTransLevel()B = TransLevel
  setTransLevel(B)V = TransLevel
  size()I = Size()
  toBean([B)V = ToBean(byte[])
  toBytes()[B = ToBytes()
com/vanstone/trans/api/struct/ModemRxdFormat = Com.Vanstone.Trans.Api.Struct.ModemRxdFormat
  <init>()V = .ctor()
  getDataType()B = DataType
  setDataType(B)V = DataType
  getReceiveLen()I = ReceiveLen
  setReceiveLen(I)V = ReceiveLen
  getReceiveBuf()[B = GetReceiveBuf()
  setReceiveBuf([B)V = SetReceiveBuf(byte[])
  size()I = Size()
  toBean([B)V = ToBean(byte[])
  toBytes()[B = ToBytes()
com/vanstone/trans/api/struct/MSG_USER = Com.Vanstone.Trans.Api.Struct.MSG_USER
  <init>()V = .ctor()
  getCbLParam()I = CbLParam
  setCbLParam(I)V = CbLParam
  getCbWParam()I = CbWParam
  setCbWParam(I)V = CbWParam
  getLParam()I = LParam
  setLParam(I)V = LParam
  getPriority()B = Priority
  setPriority(B)V = Priority
  getStatus()B = Status
  setStatus(B)V = Status
  getWParam()I = WParam
  setWParam(I)V = WParam
  size()I = Size()
  toBean([B)V = ToBean(byte[])
  toBytes()[B = ToBytes()
com/vanstone/trans/api/struct/NetCdmaGprsSet = Com.Vanstone.Trans.Api.Struct.NetCdmaGprsSet
  <init>()V = .ctor()
  commAuto = CommAuto
  connectMode = ConnectMode
  showIp = ShowIp
  sunny = Sunny
  getCommAuto()B = CommAuto
  setCommAuto(B)V = CommAuto
  getConnectMode()B = ConnectMode
  setConnectMode(B)V = ConnectMode
  getShowIp()B = ShowIp
  setShowIp(B)V = ShowIp
  getSunny()B = Sunny
  setSunny(B)V = Sunny
  size()I = Size()
  toBean([B)V = ToBean(byte[])
  toBytes()[B = ToBytes()
com/vanstone/trans/api/struct/NetSet = Com.Vanstone.Trans.Api.Struct.NetSet
  <init>()V = .ctor()
  NetClientIp = NetClientIp
  NetGate = NetGate
  NetMask = NetMask
  NetServer2Ip = NetServer2Ip
  NetServer2Port = NetServer2Port
  NetServerIp = NetServerIp
  NetServerPort = NetServerPort
  getNetClientIp()[B = GetNetClientIp()
  getNetGate()[B = GetNetGate()
  getNetMask()[B = GetNetMask()
  getNetServer2Ip()[B = GetNetServer2Ip()
  getNetServer2Port()[B = GetNetServer2Port()
  getNetServerIp()[B = GetNetServerIp()
  getNetServerPort()[B = GetNetServerPort()
  setNetClientIp([B)V = SetNetClientIp(byte[])
  setNetGate([B)V = SetNetGate(byte[])
  setNetMask([B)V = SetNetMask(byte[])
  setNetServer2Ip([B)V = SetNetServer2Ip(byte[])
  setNetServer2Port([B)V = SetNetServer2Port(byte[])
  setNetServerIp([B)V = SetNetServerIp(byte[])
  setNetServerPort([B)V = SetNetServerPort(byte[])
  size()I = Size()
  toBean([B)V = ToBean(byte[])
  toBytes()[B = ToBytes()
com/vanstone/trans/api/struct/NoteData = Com.Vanstone.Trans.Api.Struct.NoteData
  <init>()V = .ctor()
  getTelName()[B = GetTelName()
  getTelNum()[B = GetTelNum()
  setTelName([B)V = SetTelName(byte[])
  setTelNum([B)V = SetTelNum(byte[])
  size()I = Size()
  toBean([B)V = ToBean(byte[])
  toBytes()[B = ToBytes()
com/vanstone/trans/api/struct/PinPadData = Com.Vanstone.Trans.Api.Struct.PinPadData
  <init>()V = .ctor()
  getIfPadOK()B = IfPadOK
  setIfPadOK(B)V = IfPadOK
  getInputStep()B = InputStep
  setInputStep(B)V = InputStep
  getRamDomData()B = RamDomData
  setRamDomData(B)V = RamDomData
  getRead_cnt()B = Read_cnt
  setRead_cnt(B)V = Read_cnt
  size()I = Size()
  toBean([B)V = ToBean(byte[])
  toBytes()[B = ToBytes()
com/vanstone/trans/api/struct/PinYinGroup = Com.Vanstone.Trans.Api.Struct.PinYinGroup
  <init>()V = .ctor()
  getIndex()B = Index
  setIndex(B)V = Index
  getNum()B = Num
  setNum(B)V = Num
  getFstIndex()[Lcom/vanstone/trans/api/struct/Addr; = GetFstIndex()
  getString()[[B = GetString()
  setFstIndex([Lcom/vanstone/trans/api/struct/Addr;)V = SetFstIndex(Com.Vanstone.Trans.Api.Struct.Addr[])
  setString([[B)V = SetString(byte[][])
  size()I = Size()
  toBean([B)V = ToBean(byte[])
  toBytes()[B = ToBytes()
com/vanstone/trans/api/struct/PrinterStruct = Com.Vanstone.Trans.Api.Struct.PrinterStruct
  <init>()V = .ctor()
  getFont()I = Font
  setFont(I)V = Font
  getLineSpace()B = LineSpace
  setLineSpace(B)V = LineSpace
  getOffset()B = Offset
  setOffset(B)V = Offset
  getPrnTxt()[B = GetPrnTxt()
  setPrnTxt([B)V = SetPrnTxt(byte[])
  size()I = Size()
  toBean([B)V = ToBean(byte[])
  toBytes()[B = ToBytes()
com/vanstone/trans/api/struct/SetTell = Com.Vanstone.Trans.Api.Struct.SetTell
  <init>()V = .ctor()
  getCidFormat()Ljava/lang/String; = CidFormat
  setCidFormat(Ljava/lang/String;)V = CidFormat
  getIP1()Ljava/lang/String; = IP1
  setIP1(Ljava/lang/String;)V = IP1
  getIP2()Ljava/lang/String; = IP2
  setIP2(Ljava/lang/String;)V = IP2
  getKeyVoice()Ljava/lang/String; = KeyVoice
  setKeyVoice(Ljava/lang/String;)V = KeyVoice
  getLcdContract()Ljava/lang/String; = LcdContract
  setLcdContract(Ljava/lang/String;)V = LcdContract
  getLocalCode()Ljava/lang/String; = LocalCode
  setLocalCode(Ljava/lang/String;)V = LocalCode
  getOutLine()Ljava/lang/String; = OutLine
  setOutLine(Ljava/lang/String;)V = OutLine
  getRingNum()Ljava/lang/String; = RingNum
  setRingNum(Ljava/lang/String;)V = RingNum
  getSpkVoi()Ljava/lang/String; = SpkVoi
  setSpkVoi(Ljava/lang/String;)V = SpkVoi
  getVOLUME()Ljava/lang/String; = VOLUME
  setVOLUME(Ljava/lang/String;)V = VOLUME
  size()I = Size()
  toBean([B)V = ToBean(byte[])
  toBytes()[B = ToBytes()
com/vanstone/trans/api/struct/StrPrnData = Com.Vanstone.Trans.Api.Struct.StrPrnData
  <init>()V = .ctor()
  getPrnType()B = PrnType
  setPrnType(B)V = PrnType
  getSteps()B = Steps
  setSteps(B)V = Steps
  getPrnTxt()[B = GetPrnTxt()
  setPrnTxt([B)V = SetPrnTxt(byte[])
  size()I = Size()
  toBean([B)V = ToBean(byte[])
  toBytes()[B = ToBytes()
com/vanstone/trans/api/struct/TCpoint = Com.Vanstone.Trans.Api.Struct.TCpoint
  <init>()V = .ctor()
  <init>(III)V = .ctor(int, int, int)
  action = Action
  x = X
  y = Y
com/vanstone/trans/api/struct/TelData = Com.Vanstone.Trans.Api.Struct.TelData
  <init>()V = .ctor()
  getIsOnHook()B = IsOnHook
  setIsOnHook(B)V = IsOnHook
  getDateAndTime()[B = GetDateAndTime()
  getTelNum()[B = GetTelNum()
  setDateAndTime([B)V = SetDateAndTime(byte[])
  setTelNum([B)V = SetTelNum(byte[])
  size()I = Size()
  toBean([B)V = ToBean(byte[])
  toBytes()[B = ToBytes()
com/vanstone/trans/api/struct/TeleNumId = Com.Vanstone.Trans.Api.Struct.TeleNumId
  <init>()V = .ctor()
  getMainId()I = MainId
  setMainId(I)V = MainId
  getSubId()I = SubId
  setSubId(I)V = SubId
  size()I = Size()
  toBean([B)V = ToBean(byte[])
  toBytes()[B = ToBytes()
com/vanstone/trans/api/struct/TelList = Com.Vanstone.Trans.Api.Struct.TelList
  <init>()V = .ctor()
  getCidFormat()Ljava/lang/String; = CidFormat
  setCidFormat(Ljava/lang/String;)V = CidFormat
  getIP1()Ljava/lang/String; = IP1
  setIP1(Ljava/lang/String;)V = IP1
  getIP2()Ljava/lang/String; = IP2
  setIP2(Ljava/lang/String;)V = IP2
  getKeyVoice()Ljava/lang/String; = KeyVoice
  setKeyVoice(Ljava/lang/String;)V = KeyVoice
  getLcdContract()Ljava/lang/String; = LcdContract
  setLcdContract(Ljava/lang/String;)V = LcdContract
  getLocalCode()Ljava/lang/String; = LocalCode
  setLocalCode(Ljava/lang/String;)V = LocalCode
  getOutLine()Ljava/lang/String; = OutLine
  setOutLine(Ljava/lang/String;)V = OutLine
  getRingNum()Ljava/lang/String; = RingNum
  setRingNum(Ljava/lang/String;)V = RingNum
  getSETFLAG()Ljava/lang/String; = SETFLAG
  setSETFLAG(Ljava/lang/String;)V = SETFLAG
  getSpeakTelNum()Ljava/lang/String; = SpeakTelNum
  setSpeakTelNum(Ljava/lang/String;)V = SpeakTelNum
  getSpkVoi()Ljava/lang/String; = SpkVoi
  setSpkVoi(Ljava/lang/String;)V = SpkVoi
  getVOLUME()Ljava/lang/String; = VOLUME
  setVOLUME(Ljava/lang/String;)V = VOLUME
  size()I = Size()
  toBean([B)V = ToBean(byte[])
  toBytes()[B = ToBytes()
com/vanstone/trans/api/struct/TellSet = Com.Vanstone.Trans.Api.Struct.TellSet
  <init>()V = .ctor()
  getCidFormat()B = CidFormat
  setCidFormat(B)V = CidFormat
  getKeyVoice()B = KeyVoice
  setKeyVoice(B)V = KeyVoice
  getLcdContract()B = LcdContract
  setLcdContract(B)V = LcdContract
  getRingNum()B = RingNum
  setRingNum(B)V = RingNum
  getSpkVoi()B = SpkVoi
  setSpkVoi(B)V = SpkVoi
  getVOLUME()B = VOLUME
  setVOLUME(B)V = VOLUME
  getIP1()[B = GetIP1()
  getIP2()[B = GetIP2()
  getLocalCode()[B = GetLocalCode()
  getOutLine()[B = GetOutLine()
  setIP1([B)V = SetIP1(byte[])
  setIP2([B)V = SetIP2(byte[])
  setLocalCode([B)V = SetLocalCode(byte[])
  setOutLine([B)V = SetOutLine(byte[])
  size()I = Size()
  toBean([B)V = ToBean(byte[])
  toBytes()[B = ToBytes()
com/vanstone/trans/api/struct/TFileBuf = Com.Vanstone.Trans.Api.Struct.TFileBuf
  <init>()V = .ctor()
  getBufOffInFile()I = BufOffInFile
  setBufOffInFile(I)V = BufOffInFile
  getBytesInBuf()I = BytesInBuf
  setBytesInBuf(I)V = BytesInBuf
  getModifiedFlag()B = ModifiedFlag
  setModifiedFlag(B)V = ModifiedFlag
  getRwOff()I = RwOff
  setRwOff(I)V = RwOff
  getBuf()[B = GetBuf()
  getFname()[B = GetFname()
  setBuf([B)V = SetBuf(byte[])
  setFname([B)V = SetFname(byte[])
  size()I = Size()
  toBean([B)V = ToBean(byte[])
  toBytes()[B = ToBytes()
com/vanstone/trans/api/struct/TimeUser = Com.Vanstone.Trans.Api.Struct.TimeUser
  <init>()V = .ctor()
  getHour()B = Hour
  setHour(B)V = Hour
  getMin()B = Min
  setMin(B)V = Min
  getSec()B = Sec
  setSec(B)V = Sec
  size()I = Size()
  toBean([B)V = ToBean(byte[])
  toBytes()[B = ToBytes()
com/vanstone/trans/api/struct/WifiSet = Com.Vanstone.Trans.Api.Struct.WifiSet
  <init>()V = .ctor()
  Dhcp = Dhcp
  EncryptType = EncryptType
  SecurityType = SecurityType
  SSID = Ssid
  WpaPsk = WpaPsk
  getDhcp()B = Dhcp
  setDhcp(B)V = Dhcp
  getEncryptType()B = EncryptType
  setEncryptType(B)V = EncryptType
  getSecurityType()B = SecurityType
  setSecurityType(B)V = SecurityType
  getSSID()[B = GetSSID()
  getWpaPsk()[B = GetWpaPsk()
  setSSID([B)V = SetSSID(byte[])
  setWpaPsk([B)V = SetWpaPsk(byte[])
  size()I = Size()
  toBean([B)V = ToBean(byte[])
  toBytes()[B = ToBytes()
com/vanstone/trans/api/SystemApi = Com.Vanstone.Trans.Api.SystemApi
  <init>()V = .ctor()
  APKINSTALL_RESULT_ACTION = ApkinstallResultAction
  BASE_BOARD_ACTION = BaseBoardAction
  BATTERY_LEAVE = BatteryLeave
  BATTERY_STATE = BatteryState
  BATTERY_TOTAL = BatteryTotal
  HARD_BEEP = HardBeep
  HARD_BTH = HardBth
  HARD_CDMA = HardCdma
  HARD_GM = HardGm
  HARD_GPRS = HardGprs
  HARD_IC = HardIc
  HARD_LAN = HardLan
  HARD_LED = HardLed
  HARD_LOCATION = HardLocation
  HARD_MAG = HardMag
  HARD_MODEM = HardModem
  HARD_PICC = HardPicc
  HARD_PRINTER = HardPrinter
  HARD_WCDMA = HardWcdma
  HARD_WIFI = HardWifi
  IC_LEAVE = IcLeave
  IC_STATE = IcState
  IC_TOTAL = IcTotal
  MODULE_3G = Module3g
  MODULE_BACKSRC = ModuleBacksrc
  MODULE_BUZZER = ModuleBuzzer
  MODULE_CAMERA = ModuleCamera
  MODULE_COM = ModuleCom
  MODULE_ETHERNET = ModuleEthernet
  MODULE_HDMI = ModuleHdmi
  MODULE_HIBERNATE = ModuleHibernate
  MODULE_ICCARD = ModuleIccard
  MODULE_MIC = ModuleMic
  MODULE_MSCR = ModuleMscr
  MODULE_NOT_SUPPORT = ModuleNotSupport
  MODULE_OS = ModuleOs
  MODULE_PINPAD = ModulePinpad
  MODULE_POWEROFF = ModulePoweroff
  MODULE_POWERON = ModulePoweron
  MODULE_PRINTER = ModulePrinter
  MODULE_PSAM = ModulePsam
  MODULE_RFCARD = ModuleRfcard
  MODULE_SCREEN = ModuleScreen
  MODULE_SDCARD = ModuleSdcard
  MODULE_STATUS_ERROR = ModuleStatusError
  MODULE_STATUS_NORMAL = ModuleStatusNormal
  MODULE_STORAGE = ModuleStorage
  MODULE_USB = ModuleUsb
  MODULE_WAKEUP = ModuleWakeup
  MODULE_WIFI = ModuleWifi
  PRINT_LEAVE = PrintLeave
  PRINT_STATE = PrintState
  PRINT_TOTAL = PrintTotal
  SYS_ANDROID_KERNELVERSION = SysAndroidKernelversion
  SYS_ANDROID_OSVERSION = SysAndroidOsversion
  SYS_BANKNAME = SysBankname
  SYS_FIRMWARE = SysFirmware
  SYS_HARDWARE = SysHardware
  SYS_ICCID = SysIccid
  SYS_IMEI = SysImei
  SYS_IMSI = SysImsi
  SYS_MANUFACTURENAME = SysManufacturename
  SYS_MANUFACTURER = SysManufacturer
  SYS_MODEL = SysModel
  SYS_OTAVERSION = SysOtaversion
  SYS_SN = SysSn
  SYS_TERMTYPE = SysTermtype
  SYS_VOS = SysVos
  getAdminPassword_Api()Ljava/lang/String; = AdminPassword_Api
  GetAllVersion_Api()Landroid/os/Bundle; = AllVersion_Api
  getAndroidKernelVersion()Ljava/lang/String; = AndroidKernelVersion
  getAndroidKernelVersion_Api()Ljava/lang/String; = AndroidKernelVersion_Api
  getAntennaState()I = AntennaState
  getAutoTimeState_Api()Z = AutoTimeState_Api
  getAutoTimeZoneState_Api()Z = AutoTimeZoneState_Api
  getCSN()Ljava/lang/String; = CSN
  getCSN_Api()Ljava/lang/String; = CSN_Api
  getDefaultDataSIM_Api()Ljava/lang/String; = DefaultDataSIM_Api
  getFirmwareVersion()Ljava/lang/String; = FirmwareVersion
  getFirmwareVersion_Api()Ljava/lang/String; = FirmwareVersion_Api
  getHardwareVersion()Ljava/lang/String; = HardwareVersion
  getHardwareVersion_Api()Ljava/lang/String; = HardwareVersion_Api
  getInternetTrafficInfos()Ljava/util/List; = InternetTrafficInfos
  isDebug_Api()Z = IsDebug_Api
  IsEnvParam_Api()Z = IsEnvParam_Api
  IsServicsBinded()Z = IsServicsBinded
  getLastShutdownCause_Api()I = LastShutdownCause_Api
  getMachineType_Api()Ljava/lang/String; = MachineType_Api
  getNtpServer_Api()Ljava/lang/String; = NtpServer_Api
  getResumeRechargeValue()Ljava/lang/String; = ResumeRechargeValue
  getROMVersion()Ljava/lang/String; = ROMVersion
  getROMVersion_Api()Ljava/lang/String; = ROMVersion_Api
  getRootCertName_Api()Ljava/lang/String; = RootCertName_Api
  getRootCertVersion_Api()Ljava/lang/String; = RootCertVersion_Api
  getSettingsPWD_Api()Ljava/lang/String; = SettingsPWD_Api
  getSysgHWDetectionIntent()Landroid/content/Intent; = SysgHWDetectionIntent
  getSysgHWDetectionIntent_Api()Landroid/content/Intent; = SysgHWDetectionIntent_Api
  getSysHWMaintainIntent()Landroid/content/Intent; = SysHWMaintainIntent
  getSysHWMaintainIntent_Api()Landroid/content/Intent; = SysHWMaintainIntent_Api
  getSysOTAVerison_Api()Ljava/lang/String; = SysOTAVerison_Api
  getTimeZone_Api()Ljava/lang/String; = TimeZone_Api
  getUndeletableAppList_Api()Ljava/util/List; = UndeletableAppList_Api
  Beef_Api(II)V = Beef_Api(int, int)
  Beep_Api(I)V = Beep_Api(int)
  catchMainLog_Api(Ljava/lang/String;)Z = CatchMainLog_Api(string)
  CheckModuleStatue_Api(I)I = CheckModuleStatue_Api(int)
  ClearEnvParam_Api()V = ClearEnvParam_Api()
  ClearTouchPoint(Landroid/content/Context;)V = ClearTouchPoint(Android.Content.Context)
  Delay_Api(I)V = Delay_Api(int)
  deleteDir(Ljava/io/File;)Z = DeleteDir(Java.IO.File)
  deleteFileInSe_Api(Ljava/lang/String;)I = DeleteFileInSe_Api(string)
  deleteFlashData_Api(II)I = DeleteFlashData_Api(int, int)
  deleteRsakey_Api()Z = DeleteRsakey_Api()
  DownLoadSn_Api()Z = DownLoadSn_Api()
  DownLoadSn_Api(I)I = DownLoadSn_Api(int)
  FormatFileSystem_Api(I)I = FormatFileSystem_Api(int)
  getAllAppDataTraffic_Api(IJJ)Ljava/util/Map; = GetAllAppDataTraffic_Api(int, long, long)
  GetEnv_Api(Ljava/lang/String;[BIIII)I = GetEnv_Api(string, byte[], int, int, int, int)
  getFileListInSe_Api(Ljava/util/ArrayList;)I = GetFileListInSe_Api(System.Collections.Generic.IList<string>)
  GetHandPinPadVer([B)I = GetHandPinPadVer(byte[])
  getImei(Landroid/content/Context;)Ljava/lang/String; = GetImei(Android.Content.Context)
  getImei_Api(Landroid/content/Context;)Ljava/lang/String; = GetImei_Api(Android.Content.Context)
  getLifeInform_Api(Landroid/content/Context;)Landroid/os/Bundle; = GetLifeInform_Api(Android.Content.Context)
  getModuleSupport_Api(Landroid/content/Context;)Landroid/os/Bundle; = GetModuleSupport_Api(Android.Content.Context)
  GetPciRand(I)[B = GetPciRand(int)
  getRandom_Api(I)[B = GetRandom_Api(int)
  getSmartPosID([B)I = GetSmartPosID(byte[])
  getSmartPosID_Api([B)I = GetSmartPosID_Api(byte[])
  getSystemInform_Api(Landroid/content/Context;)Landroid/os/Bundle; = GetSystemInform_Api(Android.Content.Context)
  GetSysTime_Api([B)V = GetSysTime_Api(byte[])
  GetTime_Api(Lcom/vanstone/trans/api/struct/DateUser;Lcom/vanstone/trans/api/struct/TimeUser;)I = GetTime_Api(Com.Vanstone.Trans.Api.Struct.DateUser, Com.Vanstone.Trans.Api.Struct.TimeUser)
  getTotalDataTraffic_Api(IJJ)J = GetTotalDataTraffic_Api(int, long, long)
  GetTouchPoint(Landroid/content/Context;)Lcom/vanstone/trans/api/struct/TCpoint; = GetTouchPoint(Android.Content.Context)
  getTrafficStats_Api(Ljava/lang/String;Ljava/lang/String;)Lcom/vanstone/appsdk/api/struct/AidlTrafficStats; = GetTrafficStats_Api(string, string)
  GetVersion_Api([B[B)I = GetVersion_Api(byte[], byte[])
  isdeviceEnabled_Api()Z = IsdeviceEnabled_Api()
  isForeground_Api(Ljava/lang/String;)Z = IsForeground_Api(string)
  IsHandleOnBase_Api()I = IsHandleOnBase_Api()
  PlaySound_Api(II)V = PlaySound_Api(int, int)
  PutEnv_Api(Ljava/lang/String;Ljava/lang/String;I)I = PutEnv_Api(string, string, int)
  ReadAppInfo_Api(I[B)I = ReadAppInfo_Api(int, byte[])
  readFileFromSE_Api(Ljava/lang/String;[BII)I = ReadFileFromSE_Api(string, byte[], int, int)
  readFlashData_Api(I[B)I = ReadFlashData_Api(int, byte[])
  readNvRamFile_Api(I[BI)I = ReadNvRamFile_Api(int, byte[], int)
  ReadPosSn()Ljava/lang/String; = ReadPosSn()
  ReadPosSn_Api()Ljava/lang/String; = ReadPosSn_Api()
  ReadPosTUSN()Ljava/lang/String; = ReadPosTUSN()
  ReadPosTUSN_Api()Ljava/lang/String; = ReadPosTUSN_Api()
  readRsaKey_Api([B)I = ReadRsaKey_Api(byte[])
  RunApp_Api(I)I = RunApp_Api(int)
  SetAdbEnable_Api(Z)Z = SetAdbEnable_Api(bool)
  setAdminPassword_Api(Ljava/lang/String;)I = SetAdminPassword_Api(string)
  setApplicationType_Api(Z)V = SetApplicationType_Api(bool)
  setAutoTime_Api(Z)Z = SetAutoTime_Api(bool)
  setAutoTimeZone_Api(Z)Z = SetAutoTimeZone_Api(bool)
  SetBackParamFile_Api(Ljava/lang/String;)I = SetBackParamFile_Api(string)
  SetBaseBroadcast_Api(Z)V = SetBaseBroadcast_Api(bool)
  SetBluetoothEnable_Api(Z)Z = SetBluetoothEnable_Api(bool)
  SetContext(Landroid/content/Context;)V = SetContext(Android.Content.Context)
  setDataEnabled_Api(Z)Z = SetDataEnabled_Api(bool)
  setLauncherApp_Api(Ljava/lang/String;Ljava/lang/String;)Z = SetLauncherApp_Api(string, string)
  setNtpServer_Api(Ljava/lang/String;)Z = SetNtpServer_Api(string)
  SetOtgEnable_Api(Z)Z = SetOtgEnable_Api(bool)
  setResumeRechargeValue(Ljava/lang/String;)Z = SetResumeRechargeValue(string)
  SetSetScreenOffTimeout_Api(I)Z = SetSetScreenOffTimeout_Api(int)
  setSettingsPWD_Api(Ljava/lang/String;)I = SetSettingsPWD_Api(string)
  setSgnCheckEnable_Api(ZLjava/lang/String;)I = SetSgnCheckEnable_Api(bool, string)
  setSmartPosID([B)I = SetSmartPosID(byte[])
  setSmartPosID_Api([B)I = SetSmartPosID_Api(byte[])
  setSystemFunction(Landroid/os/Bundle;)Z = SetSystemFunction(Android.OS.Bundle)
  setSystemFunction_Api(Landroid/os/Bundle;)Z = SetSystemFunction_Api(Android.OS.Bundle)
  SetTime_Api(Lcom/vanstone/trans/api/struct/DateUser;Lcom/vanstone/trans/api/struct/TimeUser;)I = SetTime_Api(Com.Vanstone.Trans.Api.Struct.DateUser, Com.Vanstone.Trans.Api.Struct.TimeUser)
  setTimeZone_Api(Ljava/lang/String;)Z = SetTimeZone_Api(string)
  setTrustedBluetoothMAC_Api(Ljava/util/List;)Z = SetTrustedBluetoothMAC_Api(System.Collections.Generic.IList<string>)
  SetWifiAddNetworkEnable_Api(Z)Z = SetWifiAddNetworkEnable_Api(bool)
  silentInstallApk_Api(Ljava/lang/String;Ljava/lang/String;Lcom/vanstone/trans/api/SystemApi$IAppInstallResult;)V = SilentInstallApk_Api(string, string, Com.Vanstone.Trans.Api.SystemApi.IAppInstallResult)
  silentUnInstallApk_Api(Ljava/lang/String;)V = SilentUnInstallApk_Api(string)
  silentUnInstallApk_Api(Ljava/lang/String;Lcom/vanstone/trans/api/SystemApi$IAppUninstallResult;)V = SilentUnInstallApk_Api(string, Com.Vanstone.Trans.Api.SystemApi.IAppUninstallResult)
  StartJumpSec_Api()I = StartJumpSec_Api()
  stopBeep_api()V = StopBeep_api()
  stopCatch_Api()Z = StopCatch_Api()
  StopJumpSec_Api()V = StopJumpSec_Api()
  switchAppEnable_Api(Ljava/lang/String;Z)Z = SwitchAppEnable_Api(string, bool)
  switchChargeOnRS232_Api(Z)Z = SwitchChargeOnRS232_Api(bool)
  switchDefaultDataSIM_Api()Z = SwitchDefaultDataSIM_Api()
  switchGPS_Api(Z)Z = SwitchGPS_Api(bool)
  SystemExit_Api()V = SystemExit_Api()
  SystemInit_Api(I[BLandroid/content/Context;)I = SystemInit_Api(int, byte[], Android.Content.Context)
  SystemInit_Api(I[BLandroid/content/Context;Lcom/vanstone/appsdk/client/ISdkStatue;)I = SystemInit_Api(int, byte[], Android.Content.Context, Com.Vanstone.Appsdk.Client.ISdkStatue)
  SystemPowerOff_Api()V = SystemPowerOff_Api()
  SystemReboot_Api()V = SystemReboot_Api()
  TimerCheck_Api(II)I = TimerCheck_Api(int, int)
  TimerSet_Api()I = TimerSet_Api()
  updateSystem_Api(Landroid/content/Context;Ljava/lang/String;Lcom/vanstone/base/interfaces/ISystemOper;)I = UpdateSystem_Api(Android.Content.Context, string, Com.Vanstone.Base.Interfaces.ISystemOper)
  validatePermission(Z)V = ValidatePermission(bool)
  writeFileToSE_Api(Ljava/lang/String;[BII)I = WriteFileToSE_Api(string, byte[], int, int)
  writeFlashData_Api(I[B)I = WriteFlashData_Api(int, byte[])
  writeNvRamFile_Api(I[BI)I = WriteNvRamFile_Api(int, byte[], int)
  writeRsaKey_Api([B)Z = WriteRsaKey_Api(byte[])
com/vanstone/trans/api/TaxControlApi = Com.Vanstone.Trans.Api.TaxControlApi
  <init>()V = .ctor()
  TaxControlClosedev_Api()I = TaxControlClosedev_Api()
  TaxControlOpendev_Api()I = TaxControlOpendev_Api()
  TaxControlSenddev_Api([B[B)I = TaxControlSenddev_Api(byte[], byte[])
  TaxControlSenddevWithTimeOut_Api([B[BI)I = TaxControlSenddevWithTimeOut_Api(byte[], byte[], int)
com/vanstone/trans/api/TmsFunc = Com.Vanstone.Trans.Api.TmsFunc
  <init>()V = .ctor()
  GetAppVerForTMS_Api([B)I = GetAppVerForTMS_Api(byte[])
com/vanstone/trans/api/UartOper = Com.Vanstone.Trans.Api.UartOper
  <init>()V = .ctor()
  baude = Baude
  CloseUartPort()I = CloseUartPort()
  initUartDriver(Landroid/content/Context;)V = InitUartDriver(Android.Content.Context)
  OpenUartPort(IIIII)I = OpenUartPort(int, int, int, int, int)
  RecvDatas([BII)I = RecvDatas(byte[], int, int)
  SendDatas([BI)I = SendDatas(byte[], int)
com/vanstone/trans/api/WIFIProbeApi = Com.Vanstone.Trans.Api.WIFIProbeApi
  <init>()V = .ctor()
  WifiProbeClose_Api(Lcom/vanstone/trans/api/WIFIProbeApi$ISwitchCallback_Api;)V = WifiProbeClose_Api(Com.Vanstone.Trans.Api.WIFIProbeApi.ISwitchCallback_Api)
  WifiProbeCloseInfo_Api(Lcom/vanstone/trans/api/WIFIProbeApi$ISwitchCallback_Api;)V = WifiProbeCloseInfo_Api(Com.Vanstone.Trans.Api.WIFIProbeApi.ISwitchCallback_Api)
  WifiProbeOpen_Api(Lcom/vanstone/trans/api/WIFIProbeApi$ISwitchCallback_Api;)V = WifiProbeOpen_Api(Com.Vanstone.Trans.Api.WIFIProbeApi.ISwitchCallback_Api)
  WifiProbeRegister_Api(Lcom/vanstone/trans/api/WIFIProbeApi$ITaskCallback_Api;)V = WifiProbeRegister_Api(Com.Vanstone.Trans.Api.WIFIProbeApi.ITaskCallback_Api)
  WifiProbeStartInfo_Api(Lcom/vanstone/trans/api/WIFIProbeApi$ISwitchCallback_Api;)V = WifiProbeStartInfo_Api(Com.Vanstone.Trans.Api.WIFIProbeApi.ISwitchCallback_Api)
  WifiProbeUnregister_Api(Lcom/vanstone/trans/api/WIFIProbeApi$ITaskCallback_Api;)V = WifiProbeUnregister_Api(Com.Vanstone.Trans.Api.WIFIProbeApi.ITaskCallback_Api)
com/vanstone/trans/ssl/SSLconnect = Com.Vanstone.Trans.Ssl.SSLconnect
  <init>(Lcom/vanstone/trans/api/CommApi$CertInfo;)V = .ctor(Com.Vanstone.Trans.Api.CommApi.CertInfo)
  errCode = ErrCode
  errMsg = ErrMsg
  socket = Socket
  zhujiMsg = ZhujiMsg
  connect(Ljava/lang/String;I)Ljava/net/Socket; = Connect(string, int)
  createSSLSocket()Ljava/net/Socket; = CreateSSLSocket()
com/vanstone/trans/ssl/TrustCertInstall = Com.Vanstone.Trans.Ssl.TrustCertInstall
  <init>(Landroid/content/Context;Lcom/vanstone/trans/api/CommApi$CertInfo;)V = .ctor(Android.Content.Context, Com.Vanstone.Trans.Api.CommApi.CertInfo)
  install()Ljava/security/KeyStore; = Install()
com/vanstone/transex/ped/IGetDukptPinListener = Com.Vanstone.Transex.Ped.IGetDukptPinListener
  onCancle()V = OnCancle()
  onClick(I)V = OnClick(int)
  onEnter([B[B)V = OnEnter(byte[], byte[])
  onError(ILjava/lang/String;)V = OnError(int, string)
  onTimerOut()V = OnTimerOut()
com/vanstone/transex/ped/IGetPinResultListenner = Com.Vanstone.Transex.Ped.IGetPinResultListenner
  onCancle()V = OnCancle()
  onClick(I)V = OnClick(int)
  onEnter([B)V = OnEnter(byte[])
  onError(ILjava/lang/String;)V = OnError(int, string)
  onTimerOut()V = OnTimerOut()
com/vanstone/utils/ByteUtils = Com.Vanstone.Utils.ByteUtils
  <init>()V = .ctor()
  HEXTAG = Hextag
  TOKBUF = Tokbuf
  bytesToStructs([B[Lcom/vanstone/base/interfaces/StructInterface;)I = BytesToStructs(byte[], Com.Vanstone.Base.Interfaces.IStructInterface[])
  getMax([B)I = GetMax(byte[])
  initStructs([Lcom/vanstone/base/interfaces/StructInterface;)I = InitStructs(Com.Vanstone.Base.Interfaces.IStructInterface[])
  isByteEmpty([B)Z = IsByteEmpty(byte[])
  isdigit(B)Z = Isdigit(sbyte)
  memcmp([B[BI)I = Memcmp(byte[], byte[], int)
  memcmp([BI[BII)I = Memcmp(byte[], int, byte[], int, int)
  memcmpHex([BLjava/lang/String;I)I = MemcmpHex(byte[], string, int)
  memcpy([B[B)V = Memcpy(byte[], byte[])
  memcpy([B[BI)V = Memcpy(byte[], byte[], int)
  memcpy([BI[BII)V = Memcpy(byte[], int, byte[], int, int)
  memcpy([BILjava/lang/String;II)V = Memcpy(byte[], int, string, int, int)
  memcpy([BLjava/lang/String;)V = Memcpy(byte[], string)
  memcpy([BLjava/lang/String;I)V = Memcpy(byte[], string, int)
  memcpyHex([BLjava/lang/String;I)V = MemcpyHex(byte[], string, int)
  memcpyHex([BLjava/lang/String;Ljava/lang/String;Ljava/lang/String;I)V = MemcpyHex(byte[], string, string, string, int)
  memmove([BIII)V = Memmove(byte[], int, int, int)
  memset([BCI)V = Memset(byte[], char, int)
  memset([BICI)V = Memset(byte[], int, char, int)
  memset([BII)V = Memset(byte[], int, int)
  memset([BIII)V = Memset(byte[], int, int, int)
  mergeByte([B[B)[B = MergeByte(byte[], byte[])
  strcat([B[B)V = Strcat(byte[], byte[])
  strcat([BLjava/lang/String;)V = Strcat(byte[], string)
  strchr([BC)[B = Strchr(byte[], char)
  strchr([BC[B)[B = Strchr(byte[], char, byte[])
  strcmp([B[B)I = Strcmp(byte[], byte[])
  strcmp([BLjava/lang/String;)I = Strcmp(byte[], string)
  strcpy([B[B)V = Strcpy(byte[], byte[])
  strcpy([B[BI)V = Strcpy(byte[], byte[], int)
  strcpy([BI[BII)V = Strcpy(byte[], int, byte[], int, int)
  strcpy([BILjava/lang/String;II)V = Strcpy(byte[], int, string, int, int)
  strcpy([BLjava/lang/String;)V = Strcpy(byte[], string)
  strcpy([BLjava/lang/String;I)V = Strcpy(byte[], string, int)
  strlen([B)I = Strlen(byte[])
  strlen([BI)I = Strlen(byte[], int)
  strncpy([B[BI)[B = Strncpy(byte[], byte[], int)
  strtok([BLjava/lang/String;)[B = Strtok(byte[], string)
  structsToBytes([Lcom/vanstone/base/interfaces/StructInterface;)[B = StructsToBytes(Com.Vanstone.Base.Interfaces.IStructInterface[])
  subBytes([BI)[B = SubBytes(byte[], int)
  subBytes([BII)[B = SubBytes(byte[], int, int)
  subBytesToString([BI)Ljava/lang/String; = SubBytesToString(byte[], int)
  subBytesToString([BII)Ljava/lang/String; = SubBytesToString(byte[], int, int)
com/vanstone/utils/CommonConvert = Com.Vanstone.Utils.CommonConvert
  <init>()V = .ctor()
  ALIGN_LEFT = AlignLeft
  ALIGN_RIGHT = AlignRight
  LINE_SEPARATOR = LineSeparator
  getEncoding()Ljava/lang/String; = Encoding
  setEncoding(Ljava/lang/String;)V = Encoding
  getNull()Ljava/lang/String; = Null
  ascStringToBCD(Ljava/lang/String;)[B = AscStringToBCD(string)
  ascStringToBCD(Ljava/lang/String;I)[B = AscStringToBCD(string, int)
  ascStringToBCD(Ljava/lang/String;Ljava/lang/String;)[B = AscStringToBCD(string, string)
  BCDFToAmtConvert([B)Ljava/lang/String; = BCDFToAmtConvert(byte[])
  bcdToASCString([B)Ljava/lang/String; = BcdToASCString(byte[])
  bcdToASCString([BII)Ljava/lang/String; = BcdToASCString(byte[], int, int)
  bcdToASCString([BIIILjava/lang/String;)Ljava/lang/String; = BcdToASCString(byte[], int, int, int, string)
  bcdToASCString([BILjava/lang/String;)Ljava/lang/String; = BcdToASCString(byte[], int, string)
  bcdToINT([B)I = BcdToINT(byte[])
  binaryStringToBytes(Ljava/lang/String;)[B = BinaryStringToBytes(string)
  buildByteArray([B[B)[B = BuildByteArray(byte[], byte[])
  byte2HexString(B)Ljava/lang/String; = Byte2HexString(sbyte)
  bytes2HexString([B)Ljava/lang/String; = Bytes2HexString(byte[])
  bytes2HexString([BII)Ljava/lang/String; = Bytes2HexString(byte[], int, int)
  bytesToHexString([B)Ljava/lang/String; = BytesToHexString(byte[])
  bytesToInt([B)I = BytesToInt(byte[])
  bytesToIntValue([B)I = BytesToIntValue(byte[])
  bytesToLong([B)J = BytesToLong(byte[])
  bytesToShort([B)S = BytesToShort(byte[])
  BytesToString([B)Ljava/lang/String; = BytesToString(byte[])
  bytesToString([BII)Ljava/lang/String; = BytesToString(byte[], int, int)
  bytesToString([BIILjava/lang/String;)Ljava/lang/String; = BytesToString(byte[], int, int, string)
  bytesToString([BIILjava/lang/String;Ljava/lang/String;)Ljava/lang/String; = BytesToString(byte[], int, int, string, string)
  bytesToString([BLjava/lang/String;)Ljava/lang/String; = BytesToString(byte[], string)
  bytesToStringTerminalByZero([BII)Ljava/lang/String; = BytesToStringTerminalByZero(byte[], int, int)
  containsSeparator(Ljava/lang/String;)Z = ContainsSeparator(string)
  FillStr(ICI)[B = FillStr(int, char, int)
  FillStr(Ljava/lang/String;CI)[B = FillStr(string, char, int)
  Gbk2Utf([B)[B = Gbk2Utf(byte[])
  getCanonicalPath(Ljava/lang/String;)Ljava/lang/String; = GetCanonicalPath(string)
  getFirstLine(Ljava/lang/String;)Ljava/lang/String; = GetFirstLine(string)
  getFirstLine(Ljava/lang/String;I)Ljava/lang/String; = GetFirstLine(string, int)
  hexDump(B)Ljava/lang/String; = HexDump(sbyte)
  hexDump([B)Ljava/lang/String; = HexDump(byte[])
  hexDump([BII)Ljava/lang/String; = HexDump(byte[], int, int)
  hexStringToByte(Ljava/lang/String;)[B = HexStringToByte(string)
  intToBCD(I)[B = IntToBCD(int)
  intToBCD(II)[B = IntToBCD(int, int)
  intToBytes(I)[B = IntToBytes(int)
  longToBytes(J)[B = LongToBytes(long)
  mac([BII)Ljava/lang/String; = Mac(byte[], int, int)
  shortToBytes(S)[B = ShortToBytes(short)
  StringFToAmtConvert(Ljava/lang/String;)Ljava/lang/String; = StringFToAmtConvert(string)
  StringToBytes(Ljava/lang/String;)[B = StringToBytes(string)
  StringToBytes(Ljava/lang/String;Ljava/lang/String;)[B = StringToBytes(string, string)
  trim(Ljava/lang/String;)Ljava/lang/String; = Trim(string)
  trim(Ljava/lang/String;C)Ljava/lang/String; = Trim(string, char)
  trimLeft(Ljava/lang/String;C)Ljava/lang/String; = TrimLeft(string, char)
  trimRight(Ljava/lang/String;C)Ljava/lang/String; = TrimRight(string, char)
  trimToEmpty(Ljava/lang/String;)Ljava/lang/String; = TrimToEmpty(string)
  Utf2Gbk([B)Ljava/lang/String; = Utf2Gbk(byte[])
com/vanstone/utils/DateUtils = Com.Vanstone.Utils.DateUtils
  <init>()V = .ctor()
  addCurDate(Ljava/lang/String;I)Ljava/lang/String; = AddCurDate(string, int)
  format(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; = Format(string, string, string)
  format(Ljava/util/Date;Ljava/lang/String;)Ljava/lang/String; = Format(Java.Util.Date, string)
  getCurDate(Ljava/lang/String;)Ljava/lang/String; = GetCurDate(string)
  parse(Ljava/lang/String;Ljava/lang/String;)Ljava/util/Date; = Parse(string, string)
com/vanstone/utils/DesUtils = Com.Vanstone.Utils.DesUtils
  <init>()V = .ctor()
  decrypt([B[B)[B = Decrypt(byte[], byte[])
  decrypt(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; = Decrypt(string, string)
  decryptDes([BLjava/lang/String;)[B = DecryptDes(byte[], string)
  decryptTDes([BLjava/lang/String;)[B = DecryptTDes(byte[], string)
  encrypt([B[B)[B = Encrypt(byte[], byte[])
  encrypt(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; = Encrypt(string, string)
  encryptDes([BLjava/lang/String;)[B = EncryptDes(byte[], string)
  encryptTDes([BLjava/lang/String;)[B = EncryptTDes(byte[], string)
  Xor([B[B)[B = Xor(byte[], byte[])
  XorCalc_Api([BI)I = XorCalc_Api(byte[], int)
com/vanstone/utils/FileUtils = Com.Vanstone.Utils.FileUtils
  <init>()V = .ctor()
  ReadFileLine(Ljava/lang/String;)Ljava/util/List; = ReadFileLine(string)
  SaveFile(Ljava/lang/Object;Ljava/lang/String;)I = SaveFile(Java.Lang.Object, string)
  WriteFileLine(Ljava/lang/String;Ljava/lang/String;)V = WriteFileLine(string, string)
com/vanstone/utils/ImageTools = Com.Vanstone.Utils.ImageTools
  <init>()V = .ctor()
  DTYPE_CDAT = DtypeCdat
  DTYPE_FILE = DtypeFile
  DTYPE_MDAT = DtypeMdat
  FMT_BMP = FmtBmp
  FMT_PRT = FmtPrt
  Bitmap2Bmp(Landroid/graphics/Bitmap;)[B = Bitmap2Bmp(Android.Graphics.Bitmap)
  convertToBlackWhite(Landroid/graphics/Bitmap;)Landroid/graphics/Bitmap; = ConvertToBlackWhite(Android.Graphics.Bitmap)
  getBitMap([B)Landroid/graphics/Bitmap; = GetBitMap(byte[])
  getBitMap(Ljava/lang/String;)Landroid/graphics/Bitmap; = GetBitMap(string)
  readImage(Ljava/lang/String;)Landroid/graphics/Bitmap; = ReadImage(string)
  saveImage(Ljava/lang/String;Landroid/graphics/Bitmap;)I = SaveImage(string, Android.Graphics.Bitmap)
  writeDword(Ljava/io/ByteArrayOutputStream;J)V = WriteDword(Java.IO.ByteArrayOutputStream, long)
  writeDword(Ljava/io/FileOutputStream;J)V = WriteDword(System.IO.Stream, long)
  writeLong(Ljava/io/ByteArrayOutputStream;J)V = WriteLong(Java.IO.ByteArrayOutputStream, long)
  writeLong(Ljava/io/FileOutputStream;J)V = WriteLong(System.IO.Stream, long)
  writeWord(Ljava/io/ByteArrayOutputStream;I)V = WriteWord(Java.IO.ByteArrayOutputStream, int)
  writeWord(Ljava/io/FileOutputStream;I)V = WriteWord(System.IO.Stream, int)
com/vanstone/utils/IniProperties = Com.Vanstone.Utils.IniProperties
  <init>()V = .ctor()
  <init>([C)V = .ctor(char[])
  <init>([CZ)V = .ctor(char[], bool)
  <init>(Ljava/lang/String;)V = .ctor(string)
  <init>(Ljava/lang/String;[C)V = .ctor(string, char[])
  <init>(Ljava/lang/String;[CZ)V = .ctor(string, char[], bool)
  <init>(Ljava/lang/String;Z)V = .ctor(string, bool)
  <init>(Z)V = .ctor(bool)
  charset = Charset
  addBlankLine(Ljava/lang/String;)V = AddBlankLine(string)
  addComment(Ljava/lang/String;Ljava/lang/String;)V = AddComment(string, string)
  addSection(Ljava/lang/String;)Z = AddSection(string)
  get(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; = Get(string, string)
  hasOption(Ljava/lang/String;Ljava/lang/String;)Z = HasOption(string, string)
  hasSection(Ljava/lang/String;)Z = HasSection(string)
  load(Ljava/io/File;)V = Load(Java.IO.File)
  load(Ljava/io/InputStream;)V = Load(System.IO.Stream)
  load(Ljava/io/InputStreamReader;)V = Load(Java.IO.InputStreamReader)
  load(Ljava/lang/String;)V = Load(string)
  optionNames(Ljava/lang/String;)Ljava/util/List; = OptionNames(string)
  remove(Ljava/lang/String;Ljava/lang/String;)Z = Remove(string, string)
  removeSection(Ljava/lang/String;)Z = RemoveSection(string)
  save(Ljava/io/File;)V = Save(Java.IO.File)
  save(Ljava/io/OutputStream;)V = Save(System.IO.Stream)
  save(Ljava/io/OutputStreamWriter;)V = Save(Java.IO.OutputStreamWriter)
  save(Ljava/lang/String;)V = Save(string)
  sectionNames()Ljava/util/List; = SectionNames()
  set(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V = Set(string, string, string)
  setOptionFormatString(Ljava/lang/String;)V = SetOptionFormatString(string)
com/vanstone/utils/IniReader = Com.Vanstone.Utils.IniReader
  <init>(Ljava/lang/String;)V = .ctor(string)
  sections = Sections
  getValue(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; = GetValue(string, string)
  parseLine(Ljava/lang/String;)V = ParseLine(string)
  read(Ljava/io/BufferedReader;)V = Read(Java.IO.BufferedReader)
com/vanstone/utils/IniUtils = Com.Vanstone.Utils.IniUtils
  <init>()V = .ctor()
  getIniValue(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; = GetIniValue(string, string, string)
  getProfileString(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; = GetProfileString(string, string, string, string)
  getValue(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; = GetValue(string, string, string, string)
  load(Ljava/lang/String;)V = Load(string)
  setIniValue(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V = SetIniValue(string, string, string, string)
  setProfileString(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Z = SetProfileString(string, string, string, string)
  setValue(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Z = SetValue(string, string, string, string)
com/vanstone/utils/Log = Com.Vanstone.Utils.Log
  <init>()V = .ctor()
  delFlag = DelFlag
  LOG_FILE_TITLE = LogFileTitle
  logFlag = LogFlag
  LOG_PATH = LogPath
  getLOG_PATH()Ljava/lang/String; = LOG_PATH
  setLOG_PATH(Ljava/lang/String;)V = LOG_PATH
  isLogFlag()Z = LogFlag
  setLogFlag(Z)V = LogFlag
  ByteLog(Ljava/lang/String;Ljava/lang/Throwable;Ljava/lang/String;II)V = ByteLog(string, Java.Lang.Throwable, string, int, int)
  delBeforeLog()V = DelBeforeLog()
  print([B)V = Print(byte[])
  writeLog([B)V = WriteLog(byte[])
  writeLog(Ljava/lang/String;)V = WriteLog(string)
  writeLog(Ljava/lang/Throwable;)V = WriteLog(Java.Lang.Throwable)
com/vanstone/utils/object/EVSType = Com.Vanstone.Utils.Object.EVSType
  BYTES = Bytes
  INT = Int
  SHORT = Short
  valueOf(Ljava/lang/String;)Lcom/vanstone/utils/object/EVSType; = ValueOf(string)
  values()[Lcom/vanstone/utils/object/EVSType; = Values()
com/vanstone/utils/object/ISaveJSonStr = Com.Vanstone.Utils.Object.ISaveJSonStr
  setJsonStr(Ljava/lang/String;)V = SetJsonStr(string)
  toJSonStr()Ljava/lang/String; = ToJSonStr()
com/vanstone/utils/object/TestStruct = Com.Vanstone.Utils.Object.TestStruct
  <init>()V = .ctor()
  getparam1()I = Getparam1()
  getparam2()I = Getparam2()
  getparam3()[B = Getparam3()
  getparam4()[B = Getparam4()
  setJsonStr(Ljava/lang/String;)V = SetJsonStr(string)
  setparam1(I)V = Setparam1(int)
  setparam2(I)V = Setparam2(int)
  setparam3([B)V = Setparam3(byte[])
  setparam4([B)V = Setparam4(byte[])
  size()I = Size()
  toBean([B)V = ToBean(byte[])
  toBytes()[B = ToBytes()
  toJSonStr()Ljava/lang/String; = ToJSonStr()
com/vanstone/utils/object/VSByte = Com.Vanstone.Utils.Object.VSByte
  <init>(Ljava/lang/String;I)V = .ctor(string, int)
  getValue()[B = GetValue()
  setValue([B)V = SetValue(byte[])
  size()I = Size()
  toBean([B)V = ToBean(byte[])
  toBytes()[B = ToBytes()
com/vanstone/utils/object/VSInt = Com.Vanstone.Utils.Object.VSInt
  <init>(Ljava/lang/String;)V = .ctor(string)
  getValue()I = Value
  setValue(I)V = Value
  size()I = Size()
  toBean([B)V = ToBean(byte[])
  toBytes()[B = ToBytes()
com/vanstone/utils/object/VSObject = Com.Vanstone.Utils.Object.VSObject
  <init>(Ljava/lang/String;)V = .ctor(string)
  getName()Ljava/lang/String; = Name
  size()I = Size()
  toBean([B)V = ToBean(byte[])
  toBytes()[B = ToBytes()
com/vanstone/utils/object/VSShort = Com.Vanstone.Utils.Object.VSShort
  <init>(Ljava/lang/String;)V = .ctor(string)
  getValue()S = Value
  setValue(S)V = Value
  size()I = Size()
  toBean([B)V = ToBean(byte[])
  toBytes()[B = ToBytes()
com/vanstone/utils/PinpadFace = Com.Vanstone.Utils.PinpadFace
  <init>()V = .ctor()
  atr = Atr
  col = Col
  row = Row
  ScrBuf = ScrBuf
  ScrBufs = ScrBufs
  getAtr()I = Atr
  setAtr(I)V = Atr
  getCol()I = Col
  setCol(I)V = Col
  getRow()I = Row
  setRow(I)V = Row
  getSize()I = Size
  getDatas()[B = GetDatas()
  getScrBuf()[B = GetScrBuf()
  setScrBuf([B)V = SetScrBuf(byte[])
com/vanstone/utils/PPUpdate = Com.Vanstone.Utils.PPUpdate
  <init>(Landroid/content/Context;Lcom/vanstone/utils/PPUpdate$IUpdatePinPadListener;)V = .ctor(Android.Content.Context, Com.Vanstone.Utils.PPUpdate.IUpdatePinPadListener)
  GetPinPadVersions()Lcom/vanstone/utils/PPUpdate$PinPadVersion; = PinPadVersions
  PPAutoUpdate()I = PPAutoUpdate()
  PPAutoUpdate(Ljava/lang/String;)I = PPAutoUpdate(string)
com/vanstone/utils/QrcodeUtils = Com.Vanstone.Utils.QrcodeUtils
  <init>()V = .ctor()
  creatCodeBitmap(Ljava/lang/String;IILandroid/content/Context;)Landroid/graphics/Bitmap; = CreatCodeBitmap(string, int, int, Android.Content.Context)
  createQRImage(Ljava/lang/String;II)Landroid/graphics/Bitmap; = CreateQRImage(string, int, int)
  decode(Landroid/graphics/Bitmap;)Ljava/lang/String; = Decode(Android.Graphics.Bitmap)
  mixtureBitmap(Landroid/graphics/Bitmap;Landroid/graphics/Bitmap;Landroid/graphics/PointF;)Landroid/graphics/Bitmap; = MixtureBitmap(Android.Graphics.Bitmap, Android.Graphics.Bitmap, Android.Graphics.PointF)
com/vanstone/utils/RSAUtils = Com.Vanstone.Utils.RSAUtils
  <init>()V = .ctor()
  keySize = KeySize
  privatekeyMap = PrivatekeyMap
  privateModulus = PrivateModulus
  privatePublicExponent = PrivatePublicExponent
  publickeyMap = PublickeyMap
  publicModulus = PublicModulus
  publicPublicExponent = PublicPublicExponent
  SIGNATURE_INSTANCE = SignatureInstance
  bigIntegerToByteArray(Ljava/math/BigInteger;)[B = BigIntegerToByteArray(Java.Math.BigInteger)
  bytesToOneHexString([B)Ljava/lang/String; = BytesToOneHexString(byte[])
  decryptByPrivateKey([BLjava/lang/String;)[B = DecryptByPrivateKey(byte[], string)
  encryptByPublicKey([BLjava/lang/String;)[B = EncryptByPublicKey(byte[], string)
  getKeyPair(I)I = GetKeyPair(int)
  getPrivateKey(Ljava/lang/String;)Ljava/security/PrivateKey; = GetPrivateKey(string)
  getPublicKey(Ljava/lang/String;)Ljava/security/PublicKey; = GetPublicKey(string)
  RSAEnAndDe_Api(I[B[B[B)I = RSAEnAndDe_Api(int, byte[], byte[], byte[])
  RSASign_Api([B[B[B)I = RSASign_Api(byte[], byte[], byte[])
  RSAVerify_Api([B[B[B)I = RSAVerify_Api(byte[], byte[], byte[])
  sign([BLjava/lang/String;)[B = Sign(byte[], string)
  verify([B[BLjava/lang/String;)Z = Verify(byte[], byte[], string)
com/vanstone/utils/ShowMulline = Com.Vanstone.Utils.ShowMulline
  <init>()V = .ctor()
  atr = Atr
  col = Col
  row = Row
  str = Str
  strs = Strs
  getAtr()I = Atr
  setAtr(I)V = Atr
  getCol()I = Col
  setCol(I)V = Col
  getRow()I = Row
  setRow(I)V = Row
  getSize()I = Size
  getDatas()[B = GetDatas()
  getStr()[B = GetStr()
  setStr([B)V = SetStr(byte[])
com/vanstone/utils/StringUtils = Com.Vanstone.Utils.StringUtils
  <init>()V = .ctor()
  getNull()Ljava/lang/String; = Null
  containsSeparator(Ljava/lang/String;)Z = ContainsSeparator(string)
  FillStr(ICI)Ljava/lang/String; = FillStr(int, char, int)
  FillStr(ICII)Ljava/lang/String; = FillStr(int, char, int, int)
  FillStr(Ljava/lang/String;CI)Ljava/lang/String; = FillStr(string, char, int)
  FillStr(Ljava/lang/String;CII)Ljava/lang/String; = FillStr(string, char, int, int)
  FillStr(Ljava/lang/String;CIII)Ljava/lang/String; = FillStr(string, char, int, int, int)
  getCanonicalPath(Ljava/lang/String;)Ljava/lang/String; = GetCanonicalPath(string)
  getFirstLine(Ljava/lang/String;)Ljava/lang/String; = GetFirstLine(string)
  getFirstLine(Ljava/lang/String;I)Ljava/lang/String; = GetFirstLine(string, int)
  getNumber(Ljava/lang/String;)Ljava/lang/String; = GetNumber(string)
  hexDump(B)Ljava/lang/String; = HexDump(sbyte)
  hexDump([B)Ljava/lang/String; = HexDump(byte[])
  hexDump([BII)Ljava/lang/String; = HexDump(byte[], int, int)
  isChineseChar(Ljava/lang/String;)Z = IsChineseChar(string)
  isNum(Ljava/lang/String;)I = IsNum(string)
  replace(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String; = Replace(string, string, string)
  trim(Ljava/lang/String;)Ljava/lang/String; = Trim(string)
  trim(Ljava/lang/String;C)Ljava/lang/String; = Trim(string, char)
  trimLeft(Ljava/lang/String;C)Ljava/lang/String; = TrimLeft(string, char)
  trimRight(Ljava/lang/String;C)Ljava/lang/String; = TrimRight(string, char)
  trimToEmpty(Ljava/lang/String;)Ljava/lang/String; = TrimToEmpty(string)
com/vanstone/utils/TrafficInfos = Com.Vanstone.Utils.TrafficInfos
  <init>()V = .ctor()
  <init>(Landroid/graphics/drawable/Drawable;Ljava/lang/String;Ljava/lang/String;I)V = .ctor(Android.Graphics.Drawables.Drawable, string, string, int)
  getAppname()Ljava/lang/String; = Appname
  setAppname(Ljava/lang/String;)V = Appname
  getIcon()Landroid/graphics/drawable/Drawable; = Icon
  setIcon(Landroid/graphics/drawable/Drawable;)V = Icon
  getPackname()Ljava/lang/String; = Packname
  setPackname(Ljava/lang/String;)V = Packname
  getUid()I = Uid
  setUid(I)V = Uid
com/vanstone/utils/UpdateFileReader = Com.Vanstone.Utils.UpdateFileReader
  <init>()V = .ctor()
  getFileSize(Ljava/lang/String;)I = GetFileSize(string)
  readFile(Ljava/lang/String;[BII)I = ReadFile(string, byte[], int, int)
  readFile(Ljava/lang/String;[BIII)I = ReadFile(string, byte[], int, int, int)
com/vanstone/utils/UpdatePPWithUartDriver = Com.Vanstone.Utils.UpdatePPWithUartDriver
  <init>(Landroid/app/Activity;)V = .ctor(Android.App.Activity)
  getBaudPort()I = BaudPort
  setBaudPort(I)V = BaudPort
  isUsbOpen()Z = IsUsbOpen
  AlertDialogSetSingleChoiceItems()V = AlertDialogSetSingleChoiceItems()
  PortBaudSet()Ljava/lang/String; = PortBaudSet()
  PortClose()V = PortClose()
  PortOpen()I = PortOpen()
  PortParamsShowText()Ljava/lang/String; = PortParamsShowText()
  setDataPort(B)V = SetDataPort(sbyte)
  setFlowPort(B)V = SetFlowPort(sbyte)
  setParityPort(B)V = SetParityPort(sbyte)
  setStopPort(B)V = SetStopPort(sbyte)
  uartPortRecv([BI)I = UartPortRecv(byte[], int)
  uartPortSend([BI)I = UartPortSend(byte[], int)
com/vanstone/utils/ZipUtils = Com.Vanstone.Utils.ZipUtils
  <init>()V = .ctor()
  getEntriesEnumeration(Ljava/io/File;)Ljava/util/Enumeration; = GetEntriesEnumeration(Java.IO.File)
  getEntriesNames(Ljava/io/File;)Ljava/util/ArrayList; = GetEntriesNames(Java.IO.File)
  getEntryComment(Ljava/util/zip/ZipEntry;)Ljava/lang/String; = GetEntryComment(Java.Util.Zip.ZipEntry)
  getEntryName(Ljava/util/zip/ZipEntry;)Ljava/lang/String; = GetEntryName(Java.Util.Zip.ZipEntry)
  upZipFile(Ljava/io/File;Ljava/lang/String;)V = UpZipFile(Java.IO.File, string)
  upZipSelectedFile(Ljava/io/File;Ljava/lang/String;Ljava/lang/String;)Ljava/util/ArrayList; = UpZipSelectedFile(Java.IO.File, string, string)
  zipFiles(Ljava/util/Collection;Ljava/io/File;)V = ZipFiles(System.Collections.Generic.ICollection<Java.IO.File>, Java.IO.File)
  zipFiles(Ljava/util/Collection;Ljava/io/File;Ljava/lang/String;)V = ZipFiles(System.Collections.Generic.ICollection<Java.IO.File>, Java.IO.File, string)
fiscal/vanstone/com/fiscalserver/IFiscalModuleAidlInterface = Fiscal.Vanstone.Com.Fiscalserver.IFiscalModuleAidlInterface
  GetFreeDiskSpace()J = FreeDiskSpace
  GetTotalRow()I = TotalRow
  AuthChallenge([BI)I = AuthChallenge(byte[], int)
  Authexec([BI)I = Authexec(byte[], int)
  Authrequest()I = Authrequest()
  basicTypes(IJZFDLjava/lang/String;)V = BasicTypes(int, long, bool, float, double, string)
  BindExec([BI[BI)I = BindExec(byte[], int, byte[], int)
  BindQuery()I = BindQuery()
  BindRequest()I = BindRequest()
  ClearFiscalDatabase()I = ClearFiscalDatabase()
  ClearWormDatabase()I = ClearWormDatabase()
  CloseFiscalModuleDatabase()I = CloseFiscalModuleDatabase()
  databaseRecordCheck()I = DatabaseRecordCheck()
  databaseRecordClose()I = DatabaseRecordClose()
  databaseRecordOpen()I = DatabaseRecordOpen()
  databaseRecordRead(I[I[B[I)I = DatabaseRecordRead(int, int[], byte[], int[])
  DownloadFile([BI)I = DownloadFile(byte[], int)
  DownloadServer([BI)I = DownloadServer(byte[], int)
  FiscalModulePowerOff()I = FiscalModulePowerOff()
  FiscalModulePowerOn()I = FiscalModulePowerOn()
  GetFaxContentById(J)Ljava/lang/String; = GetFaxContentById(long)
  GetFaxIdsByDate(J)[J = GetFaxIdsByDate(long)
  GetFaxMessage(JLjava/lang/String;)Z = GetFaxMessage(long, string)
  GetFaxMessageDayNumber(JJ[B[Ljava/lang/String;)[B = GetFaxMessageDayNumber(long, long, byte[], string[])
  GetFaxVersion([B)Z = GetFaxVersion(byte[])
  GetFiscalModuleDataById(I[B)I = GetFiscalModuleDataById(int, byte[])
  GetFiscalModuleHardwareVersion([B)I = GetFiscalModuleHardwareVersion(byte[])
  GetFiscalModuleIds(III[B)I = GetFiscalModuleIds(int, int, int, byte[])
  GetFiscalModuleMkey(JI)I = GetFiscalModuleMkey(long, int)
  GetFiscalModuleSoftWareVersion([B)I = GetFiscalModuleSoftWareVersion(byte[])
  getreceipt(JJLjava/lang/String;)Z = Getreceipt(long, long, string)
  OpenFiscalModuleDatabase()I = OpenFiscalModuleDatabase()
  SysGetSN([B)I = SysGetSN(byte[])
  WriteFiscalOnly(I[BJ)I = WriteFiscalOnly(int, byte[], long)
  WriteWormOnly(J[BJ)J = WriteWormOnly(long, byte[], long)
