// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using wms_android.shared.Data;

#nullable disable

namespace wms_android.api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250925182139_MakeDestinationNullable")]
    partial class MakeDestinationNullable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DispatchParcel", b =>
                {
                    b.Property<Guid>("DispatchId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ParcelsId")
                        .HasColumnType("uuid");

                    b.HasKey("DispatchId", "ParcelsId");

                    b.HasIndex("ParcelsId");

                    b.ToTable("DispatchParcels", (string)null);
                });

            modelBuilder.Entity("wms_android.shared.Models.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.HasKey("Id");

                    b.ToTable("Branches");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Mombasa Address",
                            Email = "mombasa@email.com",
                            Name = "Mombasa",
                            Phone = "111"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Nairobi Address",
                            Email = "nairobi@email.com",
                            Name = "Nairobi",
                            Phone = "222"
                        },
                        new
                        {
                            Id = 3,
                            Address = "Kisumu Address",
                            Email = "kisumu@email.com",
                            Name = "Kisumu",
                            Phone = "333"
                        },
                        new
                        {
                            Id = 4,
                            Address = "Eldoret Address",
                            Email = "eldoret@email.com",
                            Name = "Eldoret",
                            Phone = "444"
                        },
                        new
                        {
                            Id = 5,
                            Address = "Nakuru Address",
                            Email = "nakuru@email.com",
                            Name = "Nakuru",
                            Phone = "555"
                        },
                        new
                        {
                            Id = 6,
                            Address = "Kericho Address",
                            Email = "kericho@email.com",
                            Name = "Kericho",
                            Phone = "666"
                        },
                        new
                        {
                            Id = 7,
                            Address = "Kakamega Address",
                            Email = "kakamega@email.com",
                            Name = "Kakamega",
                            Phone = "777"
                        },
                        new
                        {
                            Id = 8,
                            Address = "Kapsabet Address",
                            Email = "kapsabet@email.com",
                            Name = "Kapsabet",
                            Phone = "888"
                        },
                        new
                        {
                            Id = 9,
                            Address = "Kitale Address",
                            Email = "kitale@email.com",
                            Name = "Kitale",
                            Phone = "999"
                        });
                });

            modelBuilder.Entity("wms_android.shared.Models.ContractCustomer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("ContactPerson")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ContractNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CreatedById")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("PaymentTerms")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<decimal>("TaxRate")
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.ToTable("ContractCustomers");
                });

            modelBuilder.Entity("wms_android.shared.Models.Dispatch", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Destination")
                        .HasColumnType("text");

                    b.Property<string>("DispatchCode")
                        .HasColumnType("text");

                    b.Property<DateTime>("DispatchTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Driver")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<List<Guid>>("ParcelIds")
                        .IsRequired()
                        .HasColumnType("uuid[]");

                    b.Property<string>("SourceBranch")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("VehicleNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Dispatches");
                });

            modelBuilder.Entity("wms_android.shared.Models.Drivers", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Initials")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LicenseNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Drivers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("dda13c42-d7c0-4cc4-bdfb-c6dd955bd608"),
                            FirstName = "John",
                            Initials = "JN",
                            LastName = "Njuguna",
                            LicenseNumber = "DL123456"
                        },
                        new
                        {
                            Id = new Guid("2275eaec-7783-489e-a23c-292ee95c5025"),
                            FirstName = "Robert",
                            Initials = "RN",
                            LastName = "Njuguna",
                            LicenseNumber = "DL123456"
                        },
                        new
                        {
                            Id = new Guid("973a7126-0b41-4055-b10b-93b39de35247"),
                            FirstName = "John",
                            Initials = "JM",
                            LastName = "Mwai",
                            LicenseNumber = "DL123456"
                        },
                        new
                        {
                            Id = new Guid("373c8c86-0df1-4009-a68d-921afef3cd78"),
                            FirstName = "David",
                            Initials = "DM",
                            LastName = "Mwangi",
                            LicenseNumber = "DL123456"
                        },
                        new
                        {
                            Id = new Guid("c748251a-65f1-4014-b917-a9d7e76143ec"),
                            FirstName = "David",
                            Initials = "DK",
                            LastName = "Kibet",
                            LicenseNumber = "DL123456"
                        },
                        new
                        {
                            Id = new Guid("abf57ca0-6c59-4d92-a83f-ecb1ebed9e9b"),
                            FirstName = "Erastus",
                            Initials = "EK",
                            LastName = "Kagwa",
                            LicenseNumber = "DL123456"
                        },
                        new
                        {
                            Id = new Guid("163eac85-2666-4a23-b201-049c5baba385"),
                            FirstName = "Julius",
                            Initials = "JK",
                            LastName = "Kamula",
                            LicenseNumber = "DL123456"
                        },
                        new
                        {
                            Id = new Guid("6add5c43-b9b1-4519-90f7-e1c020a966f1"),
                            FirstName = "Stephen",
                            Initials = "SK",
                            LastName = "Kimuyu",
                            LicenseNumber = "DL123456"
                        },
                        new
                        {
                            Id = new Guid("4f506c2a-b1cb-40cf-807a-466c283878af"),
                            FirstName = "Charles",
                            Initials = "CM",
                            LastName = "Maina",
                            LicenseNumber = "DL123456"
                        },
                        new
                        {
                            Id = new Guid("ad12a36c-aac8-4739-b299-fe203ba3f189"),
                            FirstName = "James",
                            Initials = "JG",
                            LastName = "Gichohi",
                            LicenseNumber = "DL123456"
                        });
                });

            modelBuilder.Entity("wms_android.shared.Models.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CreatedById")
                        .HasColumnType("integer");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal>("TaxAmount")
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(12,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("CustomerId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("wms_android.shared.Models.InvoiceItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("integer");

                    b.Property<string>("ParcelId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("WaybillNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.ToTable("InvoiceItems");
                });

            modelBuilder.Entity("wms_android.shared.Models.Parcel", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("integer");

                    b.Property<string>("CreatorLastNameSnapshot")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Destination")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DispatchTrackingCode")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DispatchedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PaymentMethods")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("QRCode")
                        .HasColumnType("text");

                    b.Property<int?>("Quantity")
                        .HasColumnType("integer");

                    b.Property<decimal?>("Rate")
                        .HasColumnType("numeric");

                    b.Property<string>("Receiver")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ReceiverTelephone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Sender")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SenderTelephone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ShipmentId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TotalRate")
                        .HasColumnType("numeric");

                    b.Property<string>("WaybillNumber")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ShipmentId");

                    b.ToTable("Parcels");
                });

            modelBuilder.Entity("wms_android.shared.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("wms_android.shared.Models.Shipment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("integer");

                    b.Property<string>("CreatorLastNameSnapshot")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("WaybillNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("WaybillNumber")
                        .IsUnique();

                    b.ToTable("Shipments");
                });

            modelBuilder.Entity("wms_android.shared.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("BranchId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Email = "admin@example.com",
                            FirstName = "Admin",
                            LastName = "User",
                            PasswordHash = new byte[] { 163, 32, 130, 65, 64, 167, 185, 112, 162, 55, 148, 90, 30, 72, 40, 22, 150, 216, 242, 67, 203, 18, 25, 247, 230, 143, 103, 248, 89, 22, 56, 249, 98, 49, 45, 57, 40, 149, 147, 42, 46, 221, 9, 135, 222, 159, 44, 191, 176, 228, 195, 47, 7, 51, 89, 60, 27, 174, 142, 163, 86, 18, 140, 168 },
                            PasswordSalt = new byte[] { 51, 97, 223, 153, 210, 75, 110, 239, 110, 208, 187, 39, 23, 7, 80, 69, 211, 190, 130, 187, 186, 67, 76, 40, 39, 189, 177, 180, 30, 239, 118, 67, 171, 140, 27, 103, 237, 251, 68, 0, 50, 117, 248, 150, 35, 145, 161, 90, 177, 252, 170, 55, 138, 224, 1, 203, 8, 179, 234, 81, 64, 16, 2, 87, 140, 136, 240, 0, 12, 250, 116, 193, 222, 159, 87, 201, 18, 177, 212, 209, 130, 139, 68, 16, 218, 77, 27, 251, 98, 162, 225, 61, 78, 227, 204, 235, 59, 57, 132, 149, 212, 118, 6, 244, 62, 90, 237, 66, 107, 207, 113, 77, 146, 69, 147, 123, 41, 161, 86, 94, 35, 225, 116, 65, 143, 221, 248, 126 },
                            RoleId = 1,
                            Username = "admin"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Email = "manager@example.com",
                            FirstName = "Manager",
                            LastName = "Person",
                            PasswordHash = new byte[] { 163, 32, 130, 65, 64, 167, 185, 112, 162, 55, 148, 90, 30, 72, 40, 22, 150, 216, 242, 67, 203, 18, 25, 247, 230, 143, 103, 248, 89, 22, 56, 249, 98, 49, 45, 57, 40, 149, 147, 42, 46, 221, 9, 135, 222, 159, 44, 191, 176, 228, 195, 47, 7, 51, 89, 60, 27, 174, 142, 163, 86, 18, 140, 168 },
                            PasswordSalt = new byte[] { 51, 97, 223, 153, 210, 75, 110, 239, 110, 208, 187, 39, 23, 7, 80, 69, 211, 190, 130, 187, 186, 67, 76, 40, 39, 189, 177, 180, 30, 239, 118, 67, 171, 140, 27, 103, 237, 251, 68, 0, 50, 117, 248, 150, 35, 145, 161, 90, 177, 252, 170, 55, 138, 224, 1, 203, 8, 179, 234, 81, 64, 16, 2, 87, 140, 136, 240, 0, 12, 250, 116, 193, 222, 159, 87, 201, 18, 177, 212, 209, 130, 139, 68, 16, 218, 77, 27, 251, 98, 162, 225, 61, 78, 227, 204, 235, 59, 57, 132, 149, 212, 118, 6, 244, 62, 90, 237, 66, 107, 207, 113, 77, 146, 69, 147, 123, 41, 161, 86, 94, 35, 225, 116, 65, 143, 221, 248, 126 },
                            RoleId = 2,
                            Username = "manager"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Email = "clerk1@example.com",
                            FirstName = "Clerk",
                            LastName = "One",
                            PasswordHash = new byte[] { 163, 32, 130, 65, 64, 167, 185, 112, 162, 55, 148, 90, 30, 72, 40, 22, 150, 216, 242, 67, 203, 18, 25, 247, 230, 143, 103, 248, 89, 22, 56, 249, 98, 49, 45, 57, 40, 149, 147, 42, 46, 221, 9, 135, 222, 159, 44, 191, 176, 228, 195, 47, 7, 51, 89, 60, 27, 174, 142, 163, 86, 18, 140, 168 },
                            PasswordSalt = new byte[] { 51, 97, 223, 153, 210, 75, 110, 239, 110, 208, 187, 39, 23, 7, 80, 69, 211, 190, 130, 187, 186, 67, 76, 40, 39, 189, 177, 180, 30, 239, 118, 67, 171, 140, 27, 103, 237, 251, 68, 0, 50, 117, 248, 150, 35, 145, 161, 90, 177, 252, 170, 55, 138, 224, 1, 203, 8, 179, 234, 81, 64, 16, 2, 87, 140, 136, 240, 0, 12, 250, 116, 193, 222, 159, 87, 201, 18, 177, 212, 209, 130, 139, 68, 16, 218, 77, 27, 251, 98, 162, 225, 61, 78, 227, 204, 235, 59, 57, 132, 149, 212, 118, 6, 244, 62, 90, 237, 66, 107, 207, 113, 77, 146, 69, 147, 123, 41, 161, 86, 94, 35, 225, 116, 65, 143, 221, 248, 126 },
                            RoleId = 3,
                            Username = "clerk1"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Email = "clerk2@example.com",
                            FirstName = "Clerk",
                            LastName = "Two",
                            PasswordHash = new byte[] { 163, 32, 130, 65, 64, 167, 185, 112, 162, 55, 148, 90, 30, 72, 40, 22, 150, 216, 242, 67, 203, 18, 25, 247, 230, 143, 103, 248, 89, 22, 56, 249, 98, 49, 45, 57, 40, 149, 147, 42, 46, 221, 9, 135, 222, 159, 44, 191, 176, 228, 195, 47, 7, 51, 89, 60, 27, 174, 142, 163, 86, 18, 140, 168 },
                            PasswordSalt = new byte[] { 51, 97, 223, 153, 210, 75, 110, 239, 110, 208, 187, 39, 23, 7, 80, 69, 211, 190, 130, 187, 186, 67, 76, 40, 39, 189, 177, 180, 30, 239, 118, 67, 171, 140, 27, 103, 237, 251, 68, 0, 50, 117, 248, 150, 35, 145, 161, 90, 177, 252, 170, 55, 138, 224, 1, 203, 8, 179, 234, 81, 64, 16, 2, 87, 140, 136, 240, 0, 12, 250, 116, 193, 222, 159, 87, 201, 18, 177, 212, 209, 130, 139, 68, 16, 218, 77, 27, 251, 98, 162, 225, 61, 78, 227, 204, 235, 59, 57, 132, 149, 212, 118, 6, 244, 62, 90, 237, 66, 107, 207, 113, 77, 146, 69, 147, 123, 41, 161, 86, 94, 35, 225, 116, 65, 143, 221, 248, 126 },
                            RoleId = 3,
                            Username = "clerk2"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Email = "client@example.com",
                            FirstName = "Client",
                            LastName = "User",
                            PasswordHash = new byte[] { 163, 32, 130, 65, 64, 167, 185, 112, 162, 55, 148, 90, 30, 72, 40, 22, 150, 216, 242, 67, 203, 18, 25, 247, 230, 143, 103, 248, 89, 22, 56, 249, 98, 49, 45, 57, 40, 149, 147, 42, 46, 221, 9, 135, 222, 159, 44, 191, 176, 228, 195, 47, 7, 51, 89, 60, 27, 174, 142, 163, 86, 18, 140, 168 },
                            PasswordSalt = new byte[] { 51, 97, 223, 153, 210, 75, 110, 239, 110, 208, 187, 39, 23, 7, 80, 69, 211, 190, 130, 187, 186, 67, 76, 40, 39, 189, 177, 180, 30, 239, 118, 67, 171, 140, 27, 103, 237, 251, 68, 0, 50, 117, 248, 150, 35, 145, 161, 90, 177, 252, 170, 55, 138, 224, 1, 203, 8, 179, 234, 81, 64, 16, 2, 87, 140, 136, 240, 0, 12, 250, 116, 193, 222, 159, 87, 201, 18, 177, 212, 209, 130, 139, 68, 16, 218, 77, 27, 251, 98, 162, 225, 61, 78, 227, 204, 235, 59, 57, 132, 149, 212, 118, 6, 244, 62, 90, 237, 66, 107, 207, 113, 77, 146, 69, 147, 123, 41, 161, 86, 94, 35, 225, 116, 65, 143, 221, 248, 126 },
                            RoleId = 4,
                            Username = "client"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Email = "client2@example.com",
                            FirstName = "Client",
                            LastName = "UserTwo",
                            PasswordHash = new byte[] { 163, 32, 130, 65, 64, 167, 185, 112, 162, 55, 148, 90, 30, 72, 40, 22, 150, 216, 242, 67, 203, 18, 25, 247, 230, 143, 103, 248, 89, 22, 56, 249, 98, 49, 45, 57, 40, 149, 147, 42, 46, 221, 9, 135, 222, 159, 44, 191, 176, 228, 195, 47, 7, 51, 89, 60, 27, 174, 142, 163, 86, 18, 140, 168 },
                            PasswordSalt = new byte[] { 51, 97, 223, 153, 210, 75, 110, 239, 110, 208, 187, 39, 23, 7, 80, 69, 211, 190, 130, 187, 186, 67, 76, 40, 39, 189, 177, 180, 30, 239, 118, 67, 171, 140, 27, 103, 237, 251, 68, 0, 50, 117, 248, 150, 35, 145, 161, 90, 177, 252, 170, 55, 138, 224, 1, 203, 8, 179, 234, 81, 64, 16, 2, 87, 140, 136, 240, 0, 12, 250, 116, 193, 222, 159, 87, 201, 18, 177, 212, 209, 130, 139, 68, 16, 218, 77, 27, 251, 98, 162, 225, 61, 78, 227, 204, 235, 59, 57, 132, 149, 212, 118, 6, 244, 62, 90, 237, 66, 107, 207, 113, 77, 146, 69, 147, 123, 41, 161, 86, 94, 35, 225, 116, 65, 143, 221, 248, 126 },
                            RoleId = 4,
                            Username = "client2"
                        });
                });

            modelBuilder.Entity("wms_android.shared.Models.UserBranch", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("UserId");

                    b.Property<int>("BranchId")
                        .HasColumnType("integer")
                        .HasColumnName("BranchId");

                    b.HasKey("UserId", "BranchId");

                    b.HasIndex("BranchId");

                    b.ToTable("UserBranches");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            BranchId = 2
                        },
                        new
                        {
                            UserId = 2,
                            BranchId = 1
                        },
                        new
                        {
                            UserId = 3,
                            BranchId = 1
                        },
                        new
                        {
                            UserId = 4,
                            BranchId = 2
                        });
                });

            modelBuilder.Entity("wms_android.shared.Models.Vehicle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BodyType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("VehicleRegistrationNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Vehicles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("acabb659-b973-49b4-b2d6-566c06a20035"),
                            BodyType = "Truck",
                            VehicleRegistrationNumber = "KDL 085M"
                        },
                        new
                        {
                            Id = new Guid("1acfb8bd-792d-40fd-8fc6-20bc9ec127ce"),
                            BodyType = "Truck",
                            VehicleRegistrationNumber = "KCY 067A"
                        },
                        new
                        {
                            Id = new Guid("e419da28-0ee7-45af-a78f-6d7d6daa0536"),
                            BodyType = "Truck",
                            VehicleRegistrationNumber = "KCZ 595L"
                        },
                        new
                        {
                            Id = new Guid("83578eec-4d4e-43bf-aeea-eda0634faf7f"),
                            BodyType = "Truck",
                            VehicleRegistrationNumber = "KDB 387Q"
                        },
                        new
                        {
                            Id = new Guid("c79614be-b1bb-4069-89d6-4b7a6cac18c5"),
                            BodyType = "Truck",
                            VehicleRegistrationNumber = "KDE 228S"
                        },
                        new
                        {
                            Id = new Guid("2c67897b-9eeb-4878-9b79-e5caf61973a2"),
                            BodyType = "Van",
                            VehicleRegistrationNumber = "KAY 215H"
                        },
                        new
                        {
                            Id = new Guid("f592c1f6-07f7-41ab-a69d-a48455370d77"),
                            BodyType = "Van",
                            VehicleRegistrationNumber = "KBF 462A"
                        });
                });

            modelBuilder.Entity("DispatchParcel", b =>
                {
                    b.HasOne("wms_android.shared.Models.Dispatch", null)
                        .WithMany()
                        .HasForeignKey("DispatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wms_android.shared.Models.Parcel", null)
                        .WithMany()
                        .HasForeignKey("ParcelsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("wms_android.shared.Models.ContractCustomer", b =>
                {
                    b.HasOne("wms_android.shared.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("wms_android.shared.Models.Invoice", b =>
                {
                    b.HasOne("wms_android.shared.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("wms_android.shared.Models.ContractCustomer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("wms_android.shared.Models.InvoiceItem", b =>
                {
                    b.HasOne("wms_android.shared.Models.Invoice", "Invoice")
                        .WithMany("Items")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("wms_android.shared.Models.Parcel", b =>
                {
                    b.HasOne("wms_android.shared.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("wms_android.shared.Models.Shipment", "Shipment")
                        .WithMany("Parcels")
                        .HasForeignKey("ShipmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("CreatedBy");

                    b.Navigation("Shipment");
                });

            modelBuilder.Entity("wms_android.shared.Models.Shipment", b =>
                {
                    b.HasOne("wms_android.shared.Models.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("wms_android.shared.Models.User", b =>
                {
                    b.HasOne("wms_android.shared.Models.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("wms_android.shared.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("wms_android.shared.Models.UserBranch", b =>
                {
                    b.HasOne("wms_android.shared.Models.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wms_android.shared.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("User");
                });

            modelBuilder.Entity("wms_android.shared.Models.Invoice", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("wms_android.shared.Models.Shipment", b =>
                {
                    b.Navigation("Parcels");
                });
#pragma warning restore 612, 618
        }
    }
}
