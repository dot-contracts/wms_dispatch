// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using wms_android.shared.Data;

#nullable disable

namespace wms_android.api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250925055417_AddDestinationToDispatch")]
    partial class AddDestinationToDispatch
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DispatchParcel", b =>
                {
                    b.Property<Guid>("DispatchId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ParcelsId")
                        .HasColumnType("uuid");

                    b.HasKey("DispatchId", "ParcelsId");

                    b.HasIndex("ParcelsId");

                    b.ToTable("DispatchParcels", (string)null);
                });

            modelBuilder.Entity("wms_android.shared.Models.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.HasKey("Id");

                    b.ToTable("Branches");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Mombasa Address",
                            Email = "mombasa@email.com",
                            Name = "Mombasa",
                            Phone = "111"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Nairobi Address",
                            Email = "nairobi@email.com",
                            Name = "Nairobi",
                            Phone = "222"
                        },
                        new
                        {
                            Id = 3,
                            Address = "Kisumu Address",
                            Email = "kisumu@email.com",
                            Name = "Kisumu",
                            Phone = "333"
                        },
                        new
                        {
                            Id = 4,
                            Address = "Eldoret Address",
                            Email = "eldoret@email.com",
                            Name = "Eldoret",
                            Phone = "444"
                        },
                        new
                        {
                            Id = 5,
                            Address = "Nakuru Address",
                            Email = "nakuru@email.com",
                            Name = "Nakuru",
                            Phone = "555"
                        },
                        new
                        {
                            Id = 6,
                            Address = "Kericho Address",
                            Email = "kericho@email.com",
                            Name = "Kericho",
                            Phone = "666"
                        },
                        new
                        {
                            Id = 7,
                            Address = "Kakamega Address",
                            Email = "kakamega@email.com",
                            Name = "Kakamega",
                            Phone = "777"
                        },
                        new
                        {
                            Id = 8,
                            Address = "Kapsabet Address",
                            Email = "kapsabet@email.com",
                            Name = "Kapsabet",
                            Phone = "888"
                        },
                        new
                        {
                            Id = 9,
                            Address = "Kitale Address",
                            Email = "kitale@email.com",
                            Name = "Kitale",
                            Phone = "999"
                        });
                });

            modelBuilder.Entity("wms_android.shared.Models.ContractCustomer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("ContactPerson")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ContractNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CreatedById")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("PaymentTerms")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<decimal>("TaxRate")
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.ToTable("ContractCustomers");
                });

            modelBuilder.Entity("wms_android.shared.Models.Dispatch", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Destination")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DispatchCode")
                        .HasColumnType("text");

                    b.Property<DateTime>("DispatchTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Driver")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<List<Guid>>("ParcelIds")
                        .IsRequired()
                        .HasColumnType("uuid[]");

                    b.Property<string>("SourceBranch")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("VehicleNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Dispatches");
                });

            modelBuilder.Entity("wms_android.shared.Models.Drivers", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Initials")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LicenseNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Drivers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("75cd5dd2-4bf9-46e1-85b8-ba7d04191d1d"),
                            FirstName = "John",
                            Initials = "JN",
                            LastName = "Njuguna",
                            LicenseNumber = "DL123456"
                        },
                        new
                        {
                            Id = new Guid("c2adda8c-5c36-491a-ba7a-f230d63117d4"),
                            FirstName = "Robert",
                            Initials = "RN",
                            LastName = "Njuguna",
                            LicenseNumber = "DL123456"
                        },
                        new
                        {
                            Id = new Guid("7e4870b9-a598-4374-a475-0b81dd29c10e"),
                            FirstName = "John",
                            Initials = "JM",
                            LastName = "Mwai",
                            LicenseNumber = "DL123456"
                        },
                        new
                        {
                            Id = new Guid("8424130c-21b6-460e-8d17-fdbcc3fa2f35"),
                            FirstName = "David",
                            Initials = "DM",
                            LastName = "Mwangi",
                            LicenseNumber = "DL123456"
                        },
                        new
                        {
                            Id = new Guid("d114a9da-83c1-4f2c-891a-45497bd98775"),
                            FirstName = "David",
                            Initials = "DK",
                            LastName = "Kibet",
                            LicenseNumber = "DL123456"
                        },
                        new
                        {
                            Id = new Guid("ddd65053-d023-4ed6-b1f0-68b1d0ef0aac"),
                            FirstName = "Erastus",
                            Initials = "EK",
                            LastName = "Kagwa",
                            LicenseNumber = "DL123456"
                        },
                        new
                        {
                            Id = new Guid("e72bcbe1-7e1f-447a-9c22-e30962f962ae"),
                            FirstName = "Julius",
                            Initials = "JK",
                            LastName = "Kamula",
                            LicenseNumber = "DL123456"
                        },
                        new
                        {
                            Id = new Guid("cfe120cf-dcf2-4c5d-97cf-f786975de9eb"),
                            FirstName = "Stephen",
                            Initials = "SK",
                            LastName = "Kimuyu",
                            LicenseNumber = "DL123456"
                        },
                        new
                        {
                            Id = new Guid("d6e8f355-8c70-4497-852a-64a0abc1d08e"),
                            FirstName = "Charles",
                            Initials = "CM",
                            LastName = "Maina",
                            LicenseNumber = "DL123456"
                        },
                        new
                        {
                            Id = new Guid("49aa23c5-e454-4fcf-a543-e16dcf7f72e1"),
                            FirstName = "James",
                            Initials = "JG",
                            LastName = "Gichohi",
                            LicenseNumber = "DL123456"
                        });
                });

            modelBuilder.Entity("wms_android.shared.Models.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CreatedById")
                        .HasColumnType("integer");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal>("TaxAmount")
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(12,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("CustomerId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("wms_android.shared.Models.InvoiceItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("integer");

                    b.Property<string>("ParcelId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("WaybillNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.ToTable("InvoiceItems");
                });

            modelBuilder.Entity("wms_android.shared.Models.Parcel", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("integer");

                    b.Property<string>("CreatorLastNameSnapshot")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Destination")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DispatchTrackingCode")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DispatchedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PaymentMethods")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("QRCode")
                        .HasColumnType("text");

                    b.Property<int?>("Quantity")
                        .HasColumnType("integer");

                    b.Property<decimal?>("Rate")
                        .HasColumnType("numeric");

                    b.Property<string>("Receiver")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ReceiverTelephone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Sender")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SenderTelephone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ShipmentId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TotalRate")
                        .HasColumnType("numeric");

                    b.Property<string>("WaybillNumber")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ShipmentId");

                    b.ToTable("Parcels");
                });

            modelBuilder.Entity("wms_android.shared.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("wms_android.shared.Models.Shipment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("integer");

                    b.Property<string>("CreatorLastNameSnapshot")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("WaybillNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("WaybillNumber")
                        .IsUnique();

                    b.ToTable("Shipments");
                });

            modelBuilder.Entity("wms_android.shared.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("BranchId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Email = "admin@example.com",
                            FirstName = "Admin",
                            LastName = "User",
                            PasswordHash = new byte[] { 42, 127, 212, 3, 223, 31, 63, 201, 81, 130, 181, 78, 167, 235, 219, 83, 177, 174, 117, 97, 5, 30, 43, 75, 188, 65, 233, 69, 196, 208, 89, 207, 100, 129, 138, 174, 19, 69, 29, 208, 31, 95, 5, 218, 216, 194, 246, 98, 113, 109, 151, 177, 81, 56, 92, 74, 114, 54, 234, 139, 242, 124, 22, 63 },
                            PasswordSalt = new byte[] { 138, 142, 125, 46, 245, 66, 236, 40, 27, 191, 70, 30, 100, 110, 55, 52, 9, 150, 122, 203, 66, 161, 144, 89, 107, 21, 160, 150, 104, 174, 20, 181, 34, 241, 117, 71, 24, 177, 183, 41, 70, 154, 246, 61, 119, 170, 81, 123, 130, 132, 221, 163, 78, 202, 124, 60, 159, 33, 0, 163, 37, 65, 53, 55, 13, 106, 15, 33, 235, 213, 13, 165, 137, 239, 134, 178, 128, 187, 153, 1, 150, 250, 104, 5, 107, 29, 203, 3, 85, 25, 111, 28, 96, 73, 101, 235, 115, 20, 30, 251, 168, 181, 25, 18, 244, 133, 120, 93, 5, 180, 2, 101, 76, 202, 233, 52, 169, 43, 5, 81, 84, 192, 118, 11, 239, 61, 235, 87 },
                            RoleId = 1,
                            Username = "admin"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Email = "manager@example.com",
                            FirstName = "Manager",
                            LastName = "Person",
                            PasswordHash = new byte[] { 42, 127, 212, 3, 223, 31, 63, 201, 81, 130, 181, 78, 167, 235, 219, 83, 177, 174, 117, 97, 5, 30, 43, 75, 188, 65, 233, 69, 196, 208, 89, 207, 100, 129, 138, 174, 19, 69, 29, 208, 31, 95, 5, 218, 216, 194, 246, 98, 113, 109, 151, 177, 81, 56, 92, 74, 114, 54, 234, 139, 242, 124, 22, 63 },
                            PasswordSalt = new byte[] { 138, 142, 125, 46, 245, 66, 236, 40, 27, 191, 70, 30, 100, 110, 55, 52, 9, 150, 122, 203, 66, 161, 144, 89, 107, 21, 160, 150, 104, 174, 20, 181, 34, 241, 117, 71, 24, 177, 183, 41, 70, 154, 246, 61, 119, 170, 81, 123, 130, 132, 221, 163, 78, 202, 124, 60, 159, 33, 0, 163, 37, 65, 53, 55, 13, 106, 15, 33, 235, 213, 13, 165, 137, 239, 134, 178, 128, 187, 153, 1, 150, 250, 104, 5, 107, 29, 203, 3, 85, 25, 111, 28, 96, 73, 101, 235, 115, 20, 30, 251, 168, 181, 25, 18, 244, 133, 120, 93, 5, 180, 2, 101, 76, 202, 233, 52, 169, 43, 5, 81, 84, 192, 118, 11, 239, 61, 235, 87 },
                            RoleId = 2,
                            Username = "manager"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Email = "clerk1@example.com",
                            FirstName = "Clerk",
                            LastName = "One",
                            PasswordHash = new byte[] { 42, 127, 212, 3, 223, 31, 63, 201, 81, 130, 181, 78, 167, 235, 219, 83, 177, 174, 117, 97, 5, 30, 43, 75, 188, 65, 233, 69, 196, 208, 89, 207, 100, 129, 138, 174, 19, 69, 29, 208, 31, 95, 5, 218, 216, 194, 246, 98, 113, 109, 151, 177, 81, 56, 92, 74, 114, 54, 234, 139, 242, 124, 22, 63 },
                            PasswordSalt = new byte[] { 138, 142, 125, 46, 245, 66, 236, 40, 27, 191, 70, 30, 100, 110, 55, 52, 9, 150, 122, 203, 66, 161, 144, 89, 107, 21, 160, 150, 104, 174, 20, 181, 34, 241, 117, 71, 24, 177, 183, 41, 70, 154, 246, 61, 119, 170, 81, 123, 130, 132, 221, 163, 78, 202, 124, 60, 159, 33, 0, 163, 37, 65, 53, 55, 13, 106, 15, 33, 235, 213, 13, 165, 137, 239, 134, 178, 128, 187, 153, 1, 150, 250, 104, 5, 107, 29, 203, 3, 85, 25, 111, 28, 96, 73, 101, 235, 115, 20, 30, 251, 168, 181, 25, 18, 244, 133, 120, 93, 5, 180, 2, 101, 76, 202, 233, 52, 169, 43, 5, 81, 84, 192, 118, 11, 239, 61, 235, 87 },
                            RoleId = 3,
                            Username = "clerk1"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Email = "clerk2@example.com",
                            FirstName = "Clerk",
                            LastName = "Two",
                            PasswordHash = new byte[] { 42, 127, 212, 3, 223, 31, 63, 201, 81, 130, 181, 78, 167, 235, 219, 83, 177, 174, 117, 97, 5, 30, 43, 75, 188, 65, 233, 69, 196, 208, 89, 207, 100, 129, 138, 174, 19, 69, 29, 208, 31, 95, 5, 218, 216, 194, 246, 98, 113, 109, 151, 177, 81, 56, 92, 74, 114, 54, 234, 139, 242, 124, 22, 63 },
                            PasswordSalt = new byte[] { 138, 142, 125, 46, 245, 66, 236, 40, 27, 191, 70, 30, 100, 110, 55, 52, 9, 150, 122, 203, 66, 161, 144, 89, 107, 21, 160, 150, 104, 174, 20, 181, 34, 241, 117, 71, 24, 177, 183, 41, 70, 154, 246, 61, 119, 170, 81, 123, 130, 132, 221, 163, 78, 202, 124, 60, 159, 33, 0, 163, 37, 65, 53, 55, 13, 106, 15, 33, 235, 213, 13, 165, 137, 239, 134, 178, 128, 187, 153, 1, 150, 250, 104, 5, 107, 29, 203, 3, 85, 25, 111, 28, 96, 73, 101, 235, 115, 20, 30, 251, 168, 181, 25, 18, 244, 133, 120, 93, 5, 180, 2, 101, 76, 202, 233, 52, 169, 43, 5, 81, 84, 192, 118, 11, 239, 61, 235, 87 },
                            RoleId = 3,
                            Username = "clerk2"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Email = "client@example.com",
                            FirstName = "Client",
                            LastName = "User",
                            PasswordHash = new byte[] { 42, 127, 212, 3, 223, 31, 63, 201, 81, 130, 181, 78, 167, 235, 219, 83, 177, 174, 117, 97, 5, 30, 43, 75, 188, 65, 233, 69, 196, 208, 89, 207, 100, 129, 138, 174, 19, 69, 29, 208, 31, 95, 5, 218, 216, 194, 246, 98, 113, 109, 151, 177, 81, 56, 92, 74, 114, 54, 234, 139, 242, 124, 22, 63 },
                            PasswordSalt = new byte[] { 138, 142, 125, 46, 245, 66, 236, 40, 27, 191, 70, 30, 100, 110, 55, 52, 9, 150, 122, 203, 66, 161, 144, 89, 107, 21, 160, 150, 104, 174, 20, 181, 34, 241, 117, 71, 24, 177, 183, 41, 70, 154, 246, 61, 119, 170, 81, 123, 130, 132, 221, 163, 78, 202, 124, 60, 159, 33, 0, 163, 37, 65, 53, 55, 13, 106, 15, 33, 235, 213, 13, 165, 137, 239, 134, 178, 128, 187, 153, 1, 150, 250, 104, 5, 107, 29, 203, 3, 85, 25, 111, 28, 96, 73, 101, 235, 115, 20, 30, 251, 168, 181, 25, 18, 244, 133, 120, 93, 5, 180, 2, 101, 76, 202, 233, 52, 169, 43, 5, 81, 84, 192, 118, 11, 239, 61, 235, 87 },
                            RoleId = 4,
                            Username = "client"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Email = "client2@example.com",
                            FirstName = "Client",
                            LastName = "UserTwo",
                            PasswordHash = new byte[] { 42, 127, 212, 3, 223, 31, 63, 201, 81, 130, 181, 78, 167, 235, 219, 83, 177, 174, 117, 97, 5, 30, 43, 75, 188, 65, 233, 69, 196, 208, 89, 207, 100, 129, 138, 174, 19, 69, 29, 208, 31, 95, 5, 218, 216, 194, 246, 98, 113, 109, 151, 177, 81, 56, 92, 74, 114, 54, 234, 139, 242, 124, 22, 63 },
                            PasswordSalt = new byte[] { 138, 142, 125, 46, 245, 66, 236, 40, 27, 191, 70, 30, 100, 110, 55, 52, 9, 150, 122, 203, 66, 161, 144, 89, 107, 21, 160, 150, 104, 174, 20, 181, 34, 241, 117, 71, 24, 177, 183, 41, 70, 154, 246, 61, 119, 170, 81, 123, 130, 132, 221, 163, 78, 202, 124, 60, 159, 33, 0, 163, 37, 65, 53, 55, 13, 106, 15, 33, 235, 213, 13, 165, 137, 239, 134, 178, 128, 187, 153, 1, 150, 250, 104, 5, 107, 29, 203, 3, 85, 25, 111, 28, 96, 73, 101, 235, 115, 20, 30, 251, 168, 181, 25, 18, 244, 133, 120, 93, 5, 180, 2, 101, 76, 202, 233, 52, 169, 43, 5, 81, 84, 192, 118, 11, 239, 61, 235, 87 },
                            RoleId = 4,
                            Username = "client2"
                        });
                });

            modelBuilder.Entity("wms_android.shared.Models.UserBranch", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("UserId");

                    b.Property<int>("BranchId")
                        .HasColumnType("integer")
                        .HasColumnName("BranchId");

                    b.HasKey("UserId", "BranchId");

                    b.HasIndex("BranchId");

                    b.ToTable("UserBranches");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            BranchId = 2
                        },
                        new
                        {
                            UserId = 2,
                            BranchId = 1
                        },
                        new
                        {
                            UserId = 3,
                            BranchId = 1
                        },
                        new
                        {
                            UserId = 4,
                            BranchId = 2
                        });
                });

            modelBuilder.Entity("wms_android.shared.Models.Vehicle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BodyType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("VehicleRegistrationNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Vehicles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b21258c4-6a5b-47b2-9a9d-761a07f41484"),
                            BodyType = "Truck",
                            VehicleRegistrationNumber = "KDL 085M"
                        },
                        new
                        {
                            Id = new Guid("bb29615f-8726-4110-9830-a1f94a3c9582"),
                            BodyType = "Truck",
                            VehicleRegistrationNumber = "KCY 067A"
                        },
                        new
                        {
                            Id = new Guid("322bcf9f-0f7a-4290-907e-5671d62de217"),
                            BodyType = "Truck",
                            VehicleRegistrationNumber = "KCZ 595L"
                        },
                        new
                        {
                            Id = new Guid("ed257729-ac78-4352-87cb-0f5905ab955d"),
                            BodyType = "Truck",
                            VehicleRegistrationNumber = "KDB 387Q"
                        },
                        new
                        {
                            Id = new Guid("e7dfa1c7-5ef8-4dad-a63c-ced418c2d69a"),
                            BodyType = "Truck",
                            VehicleRegistrationNumber = "KDE 228S"
                        },
                        new
                        {
                            Id = new Guid("d1bfaeae-4998-4919-aa4a-23cd77487194"),
                            BodyType = "Van",
                            VehicleRegistrationNumber = "KAY 215H"
                        },
                        new
                        {
                            Id = new Guid("6f4bfe56-15a7-477c-89e4-bb3ac58a9c4d"),
                            BodyType = "Van",
                            VehicleRegistrationNumber = "KBF 462A"
                        });
                });

            modelBuilder.Entity("DispatchParcel", b =>
                {
                    b.HasOne("wms_android.shared.Models.Dispatch", null)
                        .WithMany()
                        .HasForeignKey("DispatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wms_android.shared.Models.Parcel", null)
                        .WithMany()
                        .HasForeignKey("ParcelsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("wms_android.shared.Models.ContractCustomer", b =>
                {
                    b.HasOne("wms_android.shared.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("wms_android.shared.Models.Invoice", b =>
                {
                    b.HasOne("wms_android.shared.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("wms_android.shared.Models.ContractCustomer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("wms_android.shared.Models.InvoiceItem", b =>
                {
                    b.HasOne("wms_android.shared.Models.Invoice", "Invoice")
                        .WithMany("Items")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("wms_android.shared.Models.Parcel", b =>
                {
                    b.HasOne("wms_android.shared.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("wms_android.shared.Models.Shipment", "Shipment")
                        .WithMany("Parcels")
                        .HasForeignKey("ShipmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("CreatedBy");

                    b.Navigation("Shipment");
                });

            modelBuilder.Entity("wms_android.shared.Models.Shipment", b =>
                {
                    b.HasOne("wms_android.shared.Models.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("wms_android.shared.Models.User", b =>
                {
                    b.HasOne("wms_android.shared.Models.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId");

                    b.HasOne("wms_android.shared.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("wms_android.shared.Models.UserBranch", b =>
                {
                    b.HasOne("wms_android.shared.Models.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wms_android.shared.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("User");
                });

            modelBuilder.Entity("wms_android.shared.Models.Invoice", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("wms_android.shared.Models.Shipment", b =>
                {
                    b.Navigation("Parcels");
                });
#pragma warning restore 612, 618
        }
    }
}
