// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using wms_android.shared.Data;

#nullable disable

namespace wms_android.api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DispatchParcel", b =>
                {
                    b.Property<Guid>("DispatchId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ParcelsId")
                        .HasColumnType("uuid");

                    b.HasKey("DispatchId", "ParcelsId");

                    b.HasIndex("ParcelsId");

                    b.ToTable("DispatchParcels", (string)null);
                });

            modelBuilder.Entity("wms_android.shared.Models.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.HasKey("Id");

                    b.ToTable("Branches");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Mombasa Address",
                            Email = "mombasa@email.com",
                            Name = "Mombasa",
                            Phone = "111"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Nairobi Address",
                            Email = "nairobi@email.com",
                            Name = "Nairobi",
                            Phone = "222"
                        },
                        new
                        {
                            Id = 3,
                            Address = "Kisumu Address",
                            Email = "kisumu@email.com",
                            Name = "Kisumu",
                            Phone = "333"
                        },
                        new
                        {
                            Id = 4,
                            Address = "Eldoret Address",
                            Email = "eldoret@email.com",
                            Name = "Eldoret",
                            Phone = "444"
                        },
                        new
                        {
                            Id = 5,
                            Address = "Nakuru Address",
                            Email = "nakuru@email.com",
                            Name = "Nakuru",
                            Phone = "555"
                        },
                        new
                        {
                            Id = 6,
                            Address = "Kericho Address",
                            Email = "kericho@email.com",
                            Name = "Kericho",
                            Phone = "666"
                        },
                        new
                        {
                            Id = 7,
                            Address = "Kakamega Address",
                            Email = "kakamega@email.com",
                            Name = "Kakamega",
                            Phone = "777"
                        },
                        new
                        {
                            Id = 8,
                            Address = "Kapsabet Address",
                            Email = "kapsabet@email.com",
                            Name = "Kapsabet",
                            Phone = "888"
                        },
                        new
                        {
                            Id = 9,
                            Address = "Kitale Address",
                            Email = "kitale@email.com",
                            Name = "Kitale",
                            Phone = "999"
                        });
                });

            modelBuilder.Entity("wms_android.shared.Models.ContractCustomer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("ContactPerson")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ContractNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CreatedById")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("PaymentTerms")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<decimal>("TaxRate")
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.ToTable("ContractCustomers");
                });

            modelBuilder.Entity("wms_android.shared.Models.Device", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AndroidVersion")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("AppVersion")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("DeviceName")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("DeviceType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasDefaultValue("android");

                    b.Property<DateTime>("FirstSeen")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("LastSeen")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Manufacturer")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Model")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("SerialNumber")
                        .IsUnique();

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("wms_android.shared.Models.Dispatch", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("Destination")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DispatchCode")
                        .HasColumnType("text");

                    b.Property<DateTime>("DispatchTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Driver")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<List<Guid>>("ParcelIds")
                        .IsRequired()
                        .HasColumnType("uuid[]");

                    b.Property<string>("SourceBranch")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("VehicleNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Dispatches");
                });

            modelBuilder.Entity("wms_android.shared.Models.Drivers", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Initials")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LicenseNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Drivers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5165eeca-e40c-4b2d-8f55-0996266b52c8"),
                            FirstName = "John",
                            Initials = "JN",
                            LastName = "Njuguna",
                            LicenseNumber = "DL123456"
                        },
                        new
                        {
                            Id = new Guid("bf900519-4688-4d9f-bd2e-a16c2fce87bf"),
                            FirstName = "Robert",
                            Initials = "RN",
                            LastName = "Njuguna",
                            LicenseNumber = "DL123456"
                        },
                        new
                        {
                            Id = new Guid("a5ef4aff-a37e-4cbf-a7bd-4747beac4b6b"),
                            FirstName = "John",
                            Initials = "JM",
                            LastName = "Mwai",
                            LicenseNumber = "DL123456"
                        },
                        new
                        {
                            Id = new Guid("a68fd189-500f-4cfd-bb16-2453480f78ee"),
                            FirstName = "David",
                            Initials = "DM",
                            LastName = "Mwangi",
                            LicenseNumber = "DL123456"
                        },
                        new
                        {
                            Id = new Guid("01b9d000-4b43-4257-8c79-4640178851f5"),
                            FirstName = "David",
                            Initials = "DK",
                            LastName = "Kibet",
                            LicenseNumber = "DL123456"
                        },
                        new
                        {
                            Id = new Guid("15178260-1f63-48b0-82d3-e6e327155011"),
                            FirstName = "Erastus",
                            Initials = "EK",
                            LastName = "Kagwa",
                            LicenseNumber = "DL123456"
                        },
                        new
                        {
                            Id = new Guid("6f12d8c2-b6e9-43fd-92ef-a2e890ad94f1"),
                            FirstName = "Julius",
                            Initials = "JK",
                            LastName = "Kamula",
                            LicenseNumber = "DL123456"
                        },
                        new
                        {
                            Id = new Guid("2d77ed35-9aef-4a97-99ce-23108657cd5c"),
                            FirstName = "Stephen",
                            Initials = "SK",
                            LastName = "Kimuyu",
                            LicenseNumber = "DL123456"
                        },
                        new
                        {
                            Id = new Guid("d39ad8c8-0fe7-4155-9e64-9e6ac0b038f9"),
                            FirstName = "Charles",
                            Initials = "CM",
                            LastName = "Maina",
                            LicenseNumber = "DL123456"
                        },
                        new
                        {
                            Id = new Guid("cd68e9c0-9892-466e-af07-f4f5727338bb"),
                            FirstName = "James",
                            Initials = "JG",
                            LastName = "Gichohi",
                            LicenseNumber = "DL123456"
                        });
                });

            modelBuilder.Entity("wms_android.shared.Models.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CreatedById")
                        .HasColumnType("integer");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal>("TaxAmount")
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(12,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("CustomerId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("wms_android.shared.Models.InvoiceItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("integer");

                    b.Property<string>("ParcelId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("WaybillNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.ToTable("InvoiceItems");
                });

            modelBuilder.Entity("wms_android.shared.Models.LoginSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("DeviceId")
                        .HasColumnType("integer");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Location")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<DateTime>("LoginTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("LogoutTime")
                        .HasColumnType("timestamp without time zone");

                    b.Property<Guid>("SessionId")
                        .HasColumnType("uuid");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.HasIndex("SessionId")
                        .IsUnique();

                    b.HasIndex("UserId");

                    b.ToTable("LoginSessions");
                });

            modelBuilder.Entity("wms_android.shared.Models.Parcel", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("integer");

                    b.Property<string>("CreatorLastNameSnapshot")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Destination")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DispatchTrackingCode")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DispatchedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PaymentMethods")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("QRCode")
                        .HasColumnType("text");

                    b.Property<int?>("Quantity")
                        .HasColumnType("integer");

                    b.Property<decimal?>("Rate")
                        .HasColumnType("numeric");

                    b.Property<string>("Receiver")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ReceiverTelephone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Sender")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SenderTelephone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ShipmentId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TotalRate")
                        .HasColumnType("numeric");

                    b.Property<string>("WaybillNumber")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ShipmentId");

                    b.ToTable("Parcels");
                });

            modelBuilder.Entity("wms_android.shared.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("wms_android.shared.Models.Shipment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("integer");

                    b.Property<string>("CreatorLastNameSnapshot")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("WaybillNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("WaybillNumber")
                        .IsUnique();

                    b.ToTable("Shipments");
                });

            modelBuilder.Entity("wms_android.shared.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("BranchId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Email = "admin@example.com",
                            FirstName = "Admin",
                            IsActive = true,
                            LastName = "User",
                            PasswordHash = new byte[] { 61, 103, 201, 176, 82, 111, 235, 157, 22, 64, 150, 71, 239, 61, 157, 5, 88, 42, 0, 153, 251, 187, 141, 91, 15, 216, 127, 238, 117, 123, 128, 156, 167, 30, 211, 81, 196, 233, 36, 243, 222, 89, 150, 229, 255, 51, 224, 233, 65, 130, 39, 79, 157, 176, 118, 121, 155, 3, 65, 9, 165, 160, 47, 96 },
                            PasswordSalt = new byte[] { 187, 51, 194, 110, 248, 163, 214, 19, 57, 245, 36, 43, 204, 103, 220, 66, 43, 31, 230, 210, 10, 255, 165, 138, 71, 167, 20, 42, 31, 69, 64, 180, 81, 158, 86, 73, 195, 24, 62, 125, 54, 79, 143, 230, 137, 254, 108, 200, 219, 180, 47, 50, 123, 134, 112, 121, 191, 191, 113, 195, 179, 16, 144, 22, 235, 141, 47, 150, 28, 112, 200, 63, 30, 155, 132, 254, 209, 165, 117, 7, 69, 171, 161, 198, 12, 44, 11, 45, 52, 137, 119, 126, 247, 223, 245, 91, 168, 206, 194, 194, 20, 75, 179, 153, 144, 170, 17, 231, 124, 170, 145, 15, 201, 89, 23, 31, 53, 142, 191, 2, 144, 117, 248, 115, 6, 180, 195, 34 },
                            RoleId = 1,
                            Username = "admin"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Email = "manager@example.com",
                            FirstName = "Manager",
                            IsActive = true,
                            LastName = "Person",
                            PasswordHash = new byte[] { 61, 103, 201, 176, 82, 111, 235, 157, 22, 64, 150, 71, 239, 61, 157, 5, 88, 42, 0, 153, 251, 187, 141, 91, 15, 216, 127, 238, 117, 123, 128, 156, 167, 30, 211, 81, 196, 233, 36, 243, 222, 89, 150, 229, 255, 51, 224, 233, 65, 130, 39, 79, 157, 176, 118, 121, 155, 3, 65, 9, 165, 160, 47, 96 },
                            PasswordSalt = new byte[] { 187, 51, 194, 110, 248, 163, 214, 19, 57, 245, 36, 43, 204, 103, 220, 66, 43, 31, 230, 210, 10, 255, 165, 138, 71, 167, 20, 42, 31, 69, 64, 180, 81, 158, 86, 73, 195, 24, 62, 125, 54, 79, 143, 230, 137, 254, 108, 200, 219, 180, 47, 50, 123, 134, 112, 121, 191, 191, 113, 195, 179, 16, 144, 22, 235, 141, 47, 150, 28, 112, 200, 63, 30, 155, 132, 254, 209, 165, 117, 7, 69, 171, 161, 198, 12, 44, 11, 45, 52, 137, 119, 126, 247, 223, 245, 91, 168, 206, 194, 194, 20, 75, 179, 153, 144, 170, 17, 231, 124, 170, 145, 15, 201, 89, 23, 31, 53, 142, 191, 2, 144, 117, 248, 115, 6, 180, 195, 34 },
                            RoleId = 2,
                            Username = "manager"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Email = "clerk1@example.com",
                            FirstName = "Clerk",
                            IsActive = true,
                            LastName = "One",
                            PasswordHash = new byte[] { 61, 103, 201, 176, 82, 111, 235, 157, 22, 64, 150, 71, 239, 61, 157, 5, 88, 42, 0, 153, 251, 187, 141, 91, 15, 216, 127, 238, 117, 123, 128, 156, 167, 30, 211, 81, 196, 233, 36, 243, 222, 89, 150, 229, 255, 51, 224, 233, 65, 130, 39, 79, 157, 176, 118, 121, 155, 3, 65, 9, 165, 160, 47, 96 },
                            PasswordSalt = new byte[] { 187, 51, 194, 110, 248, 163, 214, 19, 57, 245, 36, 43, 204, 103, 220, 66, 43, 31, 230, 210, 10, 255, 165, 138, 71, 167, 20, 42, 31, 69, 64, 180, 81, 158, 86, 73, 195, 24, 62, 125, 54, 79, 143, 230, 137, 254, 108, 200, 219, 180, 47, 50, 123, 134, 112, 121, 191, 191, 113, 195, 179, 16, 144, 22, 235, 141, 47, 150, 28, 112, 200, 63, 30, 155, 132, 254, 209, 165, 117, 7, 69, 171, 161, 198, 12, 44, 11, 45, 52, 137, 119, 126, 247, 223, 245, 91, 168, 206, 194, 194, 20, 75, 179, 153, 144, 170, 17, 231, 124, 170, 145, 15, 201, 89, 23, 31, 53, 142, 191, 2, 144, 117, 248, 115, 6, 180, 195, 34 },
                            RoleId = 3,
                            Username = "clerk1"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Email = "clerk2@example.com",
                            FirstName = "Clerk",
                            IsActive = true,
                            LastName = "Two",
                            PasswordHash = new byte[] { 61, 103, 201, 176, 82, 111, 235, 157, 22, 64, 150, 71, 239, 61, 157, 5, 88, 42, 0, 153, 251, 187, 141, 91, 15, 216, 127, 238, 117, 123, 128, 156, 167, 30, 211, 81, 196, 233, 36, 243, 222, 89, 150, 229, 255, 51, 224, 233, 65, 130, 39, 79, 157, 176, 118, 121, 155, 3, 65, 9, 165, 160, 47, 96 },
                            PasswordSalt = new byte[] { 187, 51, 194, 110, 248, 163, 214, 19, 57, 245, 36, 43, 204, 103, 220, 66, 43, 31, 230, 210, 10, 255, 165, 138, 71, 167, 20, 42, 31, 69, 64, 180, 81, 158, 86, 73, 195, 24, 62, 125, 54, 79, 143, 230, 137, 254, 108, 200, 219, 180, 47, 50, 123, 134, 112, 121, 191, 191, 113, 195, 179, 16, 144, 22, 235, 141, 47, 150, 28, 112, 200, 63, 30, 155, 132, 254, 209, 165, 117, 7, 69, 171, 161, 198, 12, 44, 11, 45, 52, 137, 119, 126, 247, 223, 245, 91, 168, 206, 194, 194, 20, 75, 179, 153, 144, 170, 17, 231, 124, 170, 145, 15, 201, 89, 23, 31, 53, 142, 191, 2, 144, 117, 248, 115, 6, 180, 195, 34 },
                            RoleId = 3,
                            Username = "clerk2"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Email = "client@example.com",
                            FirstName = "Client",
                            IsActive = true,
                            LastName = "User",
                            PasswordHash = new byte[] { 61, 103, 201, 176, 82, 111, 235, 157, 22, 64, 150, 71, 239, 61, 157, 5, 88, 42, 0, 153, 251, 187, 141, 91, 15, 216, 127, 238, 117, 123, 128, 156, 167, 30, 211, 81, 196, 233, 36, 243, 222, 89, 150, 229, 255, 51, 224, 233, 65, 130, 39, 79, 157, 176, 118, 121, 155, 3, 65, 9, 165, 160, 47, 96 },
                            PasswordSalt = new byte[] { 187, 51, 194, 110, 248, 163, 214, 19, 57, 245, 36, 43, 204, 103, 220, 66, 43, 31, 230, 210, 10, 255, 165, 138, 71, 167, 20, 42, 31, 69, 64, 180, 81, 158, 86, 73, 195, 24, 62, 125, 54, 79, 143, 230, 137, 254, 108, 200, 219, 180, 47, 50, 123, 134, 112, 121, 191, 191, 113, 195, 179, 16, 144, 22, 235, 141, 47, 150, 28, 112, 200, 63, 30, 155, 132, 254, 209, 165, 117, 7, 69, 171, 161, 198, 12, 44, 11, 45, 52, 137, 119, 126, 247, 223, 245, 91, 168, 206, 194, 194, 20, 75, 179, 153, 144, 170, 17, 231, 124, 170, 145, 15, 201, 89, 23, 31, 53, 142, 191, 2, 144, 117, 248, 115, 6, 180, 195, 34 },
                            RoleId = 4,
                            Username = "client"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Email = "client2@example.com",
                            FirstName = "Client",
                            IsActive = true,
                            LastName = "UserTwo",
                            PasswordHash = new byte[] { 61, 103, 201, 176, 82, 111, 235, 157, 22, 64, 150, 71, 239, 61, 157, 5, 88, 42, 0, 153, 251, 187, 141, 91, 15, 216, 127, 238, 117, 123, 128, 156, 167, 30, 211, 81, 196, 233, 36, 243, 222, 89, 150, 229, 255, 51, 224, 233, 65, 130, 39, 79, 157, 176, 118, 121, 155, 3, 65, 9, 165, 160, 47, 96 },
                            PasswordSalt = new byte[] { 187, 51, 194, 110, 248, 163, 214, 19, 57, 245, 36, 43, 204, 103, 220, 66, 43, 31, 230, 210, 10, 255, 165, 138, 71, 167, 20, 42, 31, 69, 64, 180, 81, 158, 86, 73, 195, 24, 62, 125, 54, 79, 143, 230, 137, 254, 108, 200, 219, 180, 47, 50, 123, 134, 112, 121, 191, 191, 113, 195, 179, 16, 144, 22, 235, 141, 47, 150, 28, 112, 200, 63, 30, 155, 132, 254, 209, 165, 117, 7, 69, 171, 161, 198, 12, 44, 11, 45, 52, 137, 119, 126, 247, 223, 245, 91, 168, 206, 194, 194, 20, 75, 179, 153, 144, 170, 17, 231, 124, 170, 145, 15, 201, 89, 23, 31, 53, 142, 191, 2, 144, 117, 248, 115, 6, 180, 195, 34 },
                            RoleId = 4,
                            Username = "client2"
                        });
                });

            modelBuilder.Entity("wms_android.shared.Models.UserActivity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ActivityType")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("Details")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("IpAddress")
                        .HasMaxLength(45)
                        .HasColumnType("character varying(45)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("UserAgent")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<int>("UserId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserActivities");
                });

            modelBuilder.Entity("wms_android.shared.Models.UserBranch", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("UserId");

                    b.Property<int>("BranchId")
                        .HasColumnType("integer")
                        .HasColumnName("BranchId");

                    b.HasKey("UserId", "BranchId");

                    b.HasIndex("BranchId");

                    b.ToTable("UserBranches");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            BranchId = 2
                        },
                        new
                        {
                            UserId = 2,
                            BranchId = 1
                        },
                        new
                        {
                            UserId = 3,
                            BranchId = 1
                        },
                        new
                        {
                            UserId = 4,
                            BranchId = 2
                        });
                });

            modelBuilder.Entity("wms_android.shared.Models.Vehicle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BodyType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("VehicleRegistrationNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Vehicles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5da5b147-aecb-442a-b9a7-0a5dea588453"),
                            BodyType = "Truck",
                            VehicleRegistrationNumber = "KDL 085M"
                        },
                        new
                        {
                            Id = new Guid("0abab865-83b8-4bb1-9cfe-1bdb2c2e30e9"),
                            BodyType = "Truck",
                            VehicleRegistrationNumber = "KCY 067A"
                        },
                        new
                        {
                            Id = new Guid("b28b10f7-e3d1-4a1a-a3c4-67554a1b0538"),
                            BodyType = "Truck",
                            VehicleRegistrationNumber = "KCZ 595L"
                        },
                        new
                        {
                            Id = new Guid("66652716-1260-4654-a987-8070cb7d125d"),
                            BodyType = "Truck",
                            VehicleRegistrationNumber = "KDB 387Q"
                        },
                        new
                        {
                            Id = new Guid("83e1a859-e675-45f8-b5e0-ecd4cd1e8ab3"),
                            BodyType = "Truck",
                            VehicleRegistrationNumber = "KDE 228S"
                        },
                        new
                        {
                            Id = new Guid("954e8dca-1a23-49a2-8af9-638cd10c4369"),
                            BodyType = "Van",
                            VehicleRegistrationNumber = "KAY 215H"
                        },
                        new
                        {
                            Id = new Guid("95c7cf16-43af-4917-ba92-64765d8791cf"),
                            BodyType = "Van",
                            VehicleRegistrationNumber = "KBF 462A"
                        });
                });

            modelBuilder.Entity("DispatchParcel", b =>
                {
                    b.HasOne("wms_android.shared.Models.Dispatch", null)
                        .WithMany()
                        .HasForeignKey("DispatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wms_android.shared.Models.Parcel", null)
                        .WithMany()
                        .HasForeignKey("ParcelsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("wms_android.shared.Models.ContractCustomer", b =>
                {
                    b.HasOne("wms_android.shared.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("wms_android.shared.Models.Invoice", b =>
                {
                    b.HasOne("wms_android.shared.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("wms_android.shared.Models.ContractCustomer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("wms_android.shared.Models.InvoiceItem", b =>
                {
                    b.HasOne("wms_android.shared.Models.Invoice", "Invoice")
                        .WithMany("Items")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("wms_android.shared.Models.LoginSession", b =>
                {
                    b.HasOne("wms_android.shared.Models.Device", "Device")
                        .WithMany("LoginSessions")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wms_android.shared.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Device");

                    b.Navigation("User");
                });

            modelBuilder.Entity("wms_android.shared.Models.Parcel", b =>
                {
                    b.HasOne("wms_android.shared.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("wms_android.shared.Models.Shipment", "Shipment")
                        .WithMany("Parcels")
                        .HasForeignKey("ShipmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("CreatedBy");

                    b.Navigation("Shipment");
                });

            modelBuilder.Entity("wms_android.shared.Models.Shipment", b =>
                {
                    b.HasOne("wms_android.shared.Models.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("wms_android.shared.Models.User", b =>
                {
                    b.HasOne("wms_android.shared.Models.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId");

                    b.HasOne("wms_android.shared.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("wms_android.shared.Models.UserActivity", b =>
                {
                    b.HasOne("wms_android.shared.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("wms_android.shared.Models.UserBranch", b =>
                {
                    b.HasOne("wms_android.shared.Models.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wms_android.shared.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("User");
                });

            modelBuilder.Entity("wms_android.shared.Models.Device", b =>
                {
                    b.Navigation("LoginSessions");
                });

            modelBuilder.Entity("wms_android.shared.Models.Invoice", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("wms_android.shared.Models.Shipment", b =>
                {
                    b.Navigation("Parcels");
                });
#pragma warning restore 612, 618
        }
    }
}
