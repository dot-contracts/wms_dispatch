// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using wms_android.shared.Data;

#nullable disable

namespace wms_android.api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250925182415_IgnoreDestinationColumn")]
    partial class IgnoreDestinationColumn
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("DispatchParcel", b =>
                {
                    b.Property<Guid>("DispatchId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ParcelsId")
                        .HasColumnType("uuid");

                    b.HasKey("DispatchId", "ParcelsId");

                    b.HasIndex("ParcelsId");

                    b.ToTable("DispatchParcels", (string)null);
                });

            modelBuilder.Entity("wms_android.shared.Models.Branch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("address");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("email");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("phone");

                    b.HasKey("Id");

                    b.ToTable("Branches");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Mombasa Address",
                            Email = "mombasa@email.com",
                            Name = "Mombasa",
                            Phone = "111"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Nairobi Address",
                            Email = "nairobi@email.com",
                            Name = "Nairobi",
                            Phone = "222"
                        },
                        new
                        {
                            Id = 3,
                            Address = "Kisumu Address",
                            Email = "kisumu@email.com",
                            Name = "Kisumu",
                            Phone = "333"
                        },
                        new
                        {
                            Id = 4,
                            Address = "Eldoret Address",
                            Email = "eldoret@email.com",
                            Name = "Eldoret",
                            Phone = "444"
                        },
                        new
                        {
                            Id = 5,
                            Address = "Nakuru Address",
                            Email = "nakuru@email.com",
                            Name = "Nakuru",
                            Phone = "555"
                        },
                        new
                        {
                            Id = 6,
                            Address = "Kericho Address",
                            Email = "kericho@email.com",
                            Name = "Kericho",
                            Phone = "666"
                        },
                        new
                        {
                            Id = 7,
                            Address = "Kakamega Address",
                            Email = "kakamega@email.com",
                            Name = "Kakamega",
                            Phone = "777"
                        },
                        new
                        {
                            Id = 8,
                            Address = "Kapsabet Address",
                            Email = "kapsabet@email.com",
                            Name = "Kapsabet",
                            Phone = "888"
                        },
                        new
                        {
                            Id = 9,
                            Address = "Kitale Address",
                            Email = "kitale@email.com",
                            Name = "Kitale",
                            Phone = "999"
                        });
                });

            modelBuilder.Entity("wms_android.shared.Models.ContractCustomer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("ContactPerson")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("ContractNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CreatedById")
                        .HasColumnType("integer");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("PaymentTerms")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<decimal>("TaxRate")
                        .HasColumnType("decimal(5,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.ToTable("ContractCustomers");
                });

            modelBuilder.Entity("wms_android.shared.Models.Dispatch", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<string>("DispatchCode")
                        .HasColumnType("text");

                    b.Property<DateTime>("DispatchTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Driver")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<List<Guid>>("ParcelIds")
                        .IsRequired()
                        .HasColumnType("uuid[]");

                    b.Property<string>("SourceBranch")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("VehicleNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Dispatches");
                });

            modelBuilder.Entity("wms_android.shared.Models.Drivers", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Initials")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LicenseNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Drivers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c2d98fea-83bc-43d3-aeeb-4473e4936c30"),
                            FirstName = "John",
                            Initials = "JN",
                            LastName = "Njuguna",
                            LicenseNumber = "DL123456"
                        },
                        new
                        {
                            Id = new Guid("06a60ac6-ad16-4f32-9689-9757b8b917f2"),
                            FirstName = "Robert",
                            Initials = "RN",
                            LastName = "Njuguna",
                            LicenseNumber = "DL123456"
                        },
                        new
                        {
                            Id = new Guid("b3ab115c-9157-438d-bf44-45e5546de244"),
                            FirstName = "John",
                            Initials = "JM",
                            LastName = "Mwai",
                            LicenseNumber = "DL123456"
                        },
                        new
                        {
                            Id = new Guid("3cc65188-1fe3-42c4-8edc-7543ca43c69c"),
                            FirstName = "David",
                            Initials = "DM",
                            LastName = "Mwangi",
                            LicenseNumber = "DL123456"
                        },
                        new
                        {
                            Id = new Guid("0bda8973-407d-4505-b922-ce27b136409a"),
                            FirstName = "David",
                            Initials = "DK",
                            LastName = "Kibet",
                            LicenseNumber = "DL123456"
                        },
                        new
                        {
                            Id = new Guid("a4e7cdef-c602-499f-b6d8-ac6b00f8c2ea"),
                            FirstName = "Erastus",
                            Initials = "EK",
                            LastName = "Kagwa",
                            LicenseNumber = "DL123456"
                        },
                        new
                        {
                            Id = new Guid("64b02103-e30d-4044-8ff0-be9fb1d869c9"),
                            FirstName = "Julius",
                            Initials = "JK",
                            LastName = "Kamula",
                            LicenseNumber = "DL123456"
                        },
                        new
                        {
                            Id = new Guid("d6931e85-b30e-4759-89b6-e3051bbf159a"),
                            FirstName = "Stephen",
                            Initials = "SK",
                            LastName = "Kimuyu",
                            LicenseNumber = "DL123456"
                        },
                        new
                        {
                            Id = new Guid("1aaaf0b6-22fe-4e54-9210-a4e47c08345b"),
                            FirstName = "Charles",
                            Initials = "CM",
                            LastName = "Maina",
                            LicenseNumber = "DL123456"
                        },
                        new
                        {
                            Id = new Guid("60d68c5f-2e48-4fed-9f41-771fbea625fc"),
                            FirstName = "James",
                            Initials = "JG",
                            LastName = "Gichohi",
                            LicenseNumber = "DL123456"
                        });
                });

            modelBuilder.Entity("wms_android.shared.Models.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("CreatedById")
                        .HasColumnType("integer");

                    b.Property<int>("CustomerId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DueDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("InvoiceNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<DateTime>("IssueDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("character varying(1000)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<decimal>("Subtotal")
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal>("TaxAmount")
                        .HasColumnType("decimal(12,2)");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("decimal(12,2)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("CustomerId");

                    b.ToTable("Invoices");
                });

            modelBuilder.Entity("wms_android.shared.Models.InvoiceItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("InvoiceId")
                        .HasColumnType("integer");

                    b.Property<string>("ParcelId")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<int>("Quantity")
                        .HasColumnType("integer");

                    b.Property<decimal>("TotalPrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(10,2)");

                    b.Property<string>("WaybillNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("InvoiceId");

                    b.ToTable("InvoiceItems");
                });

            modelBuilder.Entity("wms_android.shared.Models.Parcel", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("numeric");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("integer");

                    b.Property<string>("CreatorLastNameSnapshot")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Destination")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DispatchTrackingCode")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DispatchedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("PaymentMethods")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("QRCode")
                        .HasColumnType("text");

                    b.Property<int?>("Quantity")
                        .HasColumnType("integer");

                    b.Property<decimal?>("Rate")
                        .HasColumnType("numeric");

                    b.Property<string>("Receiver")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ReceiverTelephone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Sender")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SenderTelephone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid?>("ShipmentId")
                        .HasColumnType("uuid");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<decimal>("TotalAmount")
                        .HasColumnType("numeric");

                    b.Property<decimal>("TotalRate")
                        .HasColumnType("numeric");

                    b.Property<string>("WaybillNumber")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("ShipmentId");

                    b.ToTable("Parcels");
                });

            modelBuilder.Entity("wms_android.shared.Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("Id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("wms_android.shared.Models.Shipment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uuid");

                    b.Property<DateTimeOffset>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("CreatedById")
                        .HasColumnType("integer");

                    b.Property<string>("CreatorLastNameSnapshot")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("WaybillNumber")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedById");

                    b.HasIndex("WaybillNumber")
                        .IsUnique();

                    b.ToTable("Shipments");
                });

            modelBuilder.Entity("wms_android.shared.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("BranchId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.Property<byte[]>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<byte[]>("PasswordSalt")
                        .IsRequired()
                        .HasColumnType("bytea");

                    b.Property<int>("RoleId")
                        .HasColumnType("integer");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("BranchId");

                    b.HasIndex("RoleId");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Email = "admin@example.com",
                            FirstName = "Admin",
                            LastName = "User",
                            PasswordHash = new byte[] { 23, 140, 147, 29, 161, 78, 185, 169, 203, 157, 133, 18, 216, 58, 16, 220, 177, 56, 115, 114, 38, 45, 159, 183, 60, 69, 159, 228, 112, 39, 71, 244, 203, 119, 74, 154, 100, 32, 171, 31, 245, 56, 254, 186, 181, 54, 94, 246, 5, 206, 10, 152, 96, 12, 252, 145, 151, 162, 240, 125, 159, 226, 161, 75 },
                            PasswordSalt = new byte[] { 227, 107, 74, 84, 56, 205, 252, 78, 255, 84, 156, 107, 80, 90, 193, 150, 191, 124, 246, 3, 10, 133, 249, 104, 15, 79, 44, 231, 245, 42, 51, 53, 242, 191, 237, 193, 244, 183, 173, 180, 41, 232, 50, 99, 83, 67, 253, 37, 200, 58, 63, 141, 140, 224, 248, 127, 0, 49, 202, 224, 13, 49, 22, 5, 15, 81, 105, 228, 249, 63, 150, 136, 246, 99, 8, 0, 170, 30, 128, 164, 83, 80, 62, 176, 142, 34, 86, 160, 59, 1, 50, 8, 98, 6, 83, 99, 172, 40, 227, 97, 61, 173, 167, 150, 224, 33, 193, 167, 108, 53, 128, 75, 75, 133, 248, 184, 24, 249, 98, 173, 23, 233, 205, 75, 227, 140, 222, 233 },
                            RoleId = 1,
                            Username = "admin"
                        },
                        new
                        {
                            Id = 2,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Email = "manager@example.com",
                            FirstName = "Manager",
                            LastName = "Person",
                            PasswordHash = new byte[] { 23, 140, 147, 29, 161, 78, 185, 169, 203, 157, 133, 18, 216, 58, 16, 220, 177, 56, 115, 114, 38, 45, 159, 183, 60, 69, 159, 228, 112, 39, 71, 244, 203, 119, 74, 154, 100, 32, 171, 31, 245, 56, 254, 186, 181, 54, 94, 246, 5, 206, 10, 152, 96, 12, 252, 145, 151, 162, 240, 125, 159, 226, 161, 75 },
                            PasswordSalt = new byte[] { 227, 107, 74, 84, 56, 205, 252, 78, 255, 84, 156, 107, 80, 90, 193, 150, 191, 124, 246, 3, 10, 133, 249, 104, 15, 79, 44, 231, 245, 42, 51, 53, 242, 191, 237, 193, 244, 183, 173, 180, 41, 232, 50, 99, 83, 67, 253, 37, 200, 58, 63, 141, 140, 224, 248, 127, 0, 49, 202, 224, 13, 49, 22, 5, 15, 81, 105, 228, 249, 63, 150, 136, 246, 99, 8, 0, 170, 30, 128, 164, 83, 80, 62, 176, 142, 34, 86, 160, 59, 1, 50, 8, 98, 6, 83, 99, 172, 40, 227, 97, 61, 173, 167, 150, 224, 33, 193, 167, 108, 53, 128, 75, 75, 133, 248, 184, 24, 249, 98, 173, 23, 233, 205, 75, 227, 140, 222, 233 },
                            RoleId = 2,
                            Username = "manager"
                        },
                        new
                        {
                            Id = 3,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Email = "clerk1@example.com",
                            FirstName = "Clerk",
                            LastName = "One",
                            PasswordHash = new byte[] { 23, 140, 147, 29, 161, 78, 185, 169, 203, 157, 133, 18, 216, 58, 16, 220, 177, 56, 115, 114, 38, 45, 159, 183, 60, 69, 159, 228, 112, 39, 71, 244, 203, 119, 74, 154, 100, 32, 171, 31, 245, 56, 254, 186, 181, 54, 94, 246, 5, 206, 10, 152, 96, 12, 252, 145, 151, 162, 240, 125, 159, 226, 161, 75 },
                            PasswordSalt = new byte[] { 227, 107, 74, 84, 56, 205, 252, 78, 255, 84, 156, 107, 80, 90, 193, 150, 191, 124, 246, 3, 10, 133, 249, 104, 15, 79, 44, 231, 245, 42, 51, 53, 242, 191, 237, 193, 244, 183, 173, 180, 41, 232, 50, 99, 83, 67, 253, 37, 200, 58, 63, 141, 140, 224, 248, 127, 0, 49, 202, 224, 13, 49, 22, 5, 15, 81, 105, 228, 249, 63, 150, 136, 246, 99, 8, 0, 170, 30, 128, 164, 83, 80, 62, 176, 142, 34, 86, 160, 59, 1, 50, 8, 98, 6, 83, 99, 172, 40, 227, 97, 61, 173, 167, 150, 224, 33, 193, 167, 108, 53, 128, 75, 75, 133, 248, 184, 24, 249, 98, 173, 23, 233, 205, 75, 227, 140, 222, 233 },
                            RoleId = 3,
                            Username = "clerk1"
                        },
                        new
                        {
                            Id = 4,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Email = "clerk2@example.com",
                            FirstName = "Clerk",
                            LastName = "Two",
                            PasswordHash = new byte[] { 23, 140, 147, 29, 161, 78, 185, 169, 203, 157, 133, 18, 216, 58, 16, 220, 177, 56, 115, 114, 38, 45, 159, 183, 60, 69, 159, 228, 112, 39, 71, 244, 203, 119, 74, 154, 100, 32, 171, 31, 245, 56, 254, 186, 181, 54, 94, 246, 5, 206, 10, 152, 96, 12, 252, 145, 151, 162, 240, 125, 159, 226, 161, 75 },
                            PasswordSalt = new byte[] { 227, 107, 74, 84, 56, 205, 252, 78, 255, 84, 156, 107, 80, 90, 193, 150, 191, 124, 246, 3, 10, 133, 249, 104, 15, 79, 44, 231, 245, 42, 51, 53, 242, 191, 237, 193, 244, 183, 173, 180, 41, 232, 50, 99, 83, 67, 253, 37, 200, 58, 63, 141, 140, 224, 248, 127, 0, 49, 202, 224, 13, 49, 22, 5, 15, 81, 105, 228, 249, 63, 150, 136, 246, 99, 8, 0, 170, 30, 128, 164, 83, 80, 62, 176, 142, 34, 86, 160, 59, 1, 50, 8, 98, 6, 83, 99, 172, 40, 227, 97, 61, 173, 167, 150, 224, 33, 193, 167, 108, 53, 128, 75, 75, 133, 248, 184, 24, 249, 98, 173, 23, 233, 205, 75, 227, 140, 222, 233 },
                            RoleId = 3,
                            Username = "clerk2"
                        },
                        new
                        {
                            Id = 5,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Email = "client@example.com",
                            FirstName = "Client",
                            LastName = "User",
                            PasswordHash = new byte[] { 23, 140, 147, 29, 161, 78, 185, 169, 203, 157, 133, 18, 216, 58, 16, 220, 177, 56, 115, 114, 38, 45, 159, 183, 60, 69, 159, 228, 112, 39, 71, 244, 203, 119, 74, 154, 100, 32, 171, 31, 245, 56, 254, 186, 181, 54, 94, 246, 5, 206, 10, 152, 96, 12, 252, 145, 151, 162, 240, 125, 159, 226, 161, 75 },
                            PasswordSalt = new byte[] { 227, 107, 74, 84, 56, 205, 252, 78, 255, 84, 156, 107, 80, 90, 193, 150, 191, 124, 246, 3, 10, 133, 249, 104, 15, 79, 44, 231, 245, 42, 51, 53, 242, 191, 237, 193, 244, 183, 173, 180, 41, 232, 50, 99, 83, 67, 253, 37, 200, 58, 63, 141, 140, 224, 248, 127, 0, 49, 202, 224, 13, 49, 22, 5, 15, 81, 105, 228, 249, 63, 150, 136, 246, 99, 8, 0, 170, 30, 128, 164, 83, 80, 62, 176, 142, 34, 86, 160, 59, 1, 50, 8, 98, 6, 83, 99, 172, 40, 227, 97, 61, 173, 167, 150, 224, 33, 193, 167, 108, 53, 128, 75, 75, 133, 248, 184, 24, 249, 98, 173, 23, 233, 205, 75, 227, 140, 222, 233 },
                            RoleId = 4,
                            Username = "client"
                        },
                        new
                        {
                            Id = 6,
                            CreatedAt = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Local),
                            Email = "client2@example.com",
                            FirstName = "Client",
                            LastName = "UserTwo",
                            PasswordHash = new byte[] { 23, 140, 147, 29, 161, 78, 185, 169, 203, 157, 133, 18, 216, 58, 16, 220, 177, 56, 115, 114, 38, 45, 159, 183, 60, 69, 159, 228, 112, 39, 71, 244, 203, 119, 74, 154, 100, 32, 171, 31, 245, 56, 254, 186, 181, 54, 94, 246, 5, 206, 10, 152, 96, 12, 252, 145, 151, 162, 240, 125, 159, 226, 161, 75 },
                            PasswordSalt = new byte[] { 227, 107, 74, 84, 56, 205, 252, 78, 255, 84, 156, 107, 80, 90, 193, 150, 191, 124, 246, 3, 10, 133, 249, 104, 15, 79, 44, 231, 245, 42, 51, 53, 242, 191, 237, 193, 244, 183, 173, 180, 41, 232, 50, 99, 83, 67, 253, 37, 200, 58, 63, 141, 140, 224, 248, 127, 0, 49, 202, 224, 13, 49, 22, 5, 15, 81, 105, 228, 249, 63, 150, 136, 246, 99, 8, 0, 170, 30, 128, 164, 83, 80, 62, 176, 142, 34, 86, 160, 59, 1, 50, 8, 98, 6, 83, 99, 172, 40, 227, 97, 61, 173, 167, 150, 224, 33, 193, 167, 108, 53, 128, 75, 75, 133, 248, 184, 24, 249, 98, 173, 23, 233, 205, 75, 227, 140, 222, 233 },
                            RoleId = 4,
                            Username = "client2"
                        });
                });

            modelBuilder.Entity("wms_android.shared.Models.UserBranch", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("integer")
                        .HasColumnName("UserId");

                    b.Property<int>("BranchId")
                        .HasColumnType("integer")
                        .HasColumnName("BranchId");

                    b.HasKey("UserId", "BranchId");

                    b.HasIndex("BranchId");

                    b.ToTable("UserBranches");

                    b.HasData(
                        new
                        {
                            UserId = 1,
                            BranchId = 2
                        },
                        new
                        {
                            UserId = 2,
                            BranchId = 1
                        },
                        new
                        {
                            UserId = 3,
                            BranchId = 1
                        },
                        new
                        {
                            UserId = 4,
                            BranchId = 2
                        });
                });

            modelBuilder.Entity("wms_android.shared.Models.Vehicle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("BodyType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("VehicleRegistrationNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Vehicles");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b64ff640-5bad-4f04-802e-9b3fa49abcfd"),
                            BodyType = "Truck",
                            VehicleRegistrationNumber = "KDL 085M"
                        },
                        new
                        {
                            Id = new Guid("b4810684-932a-452f-bb94-61b04775a861"),
                            BodyType = "Truck",
                            VehicleRegistrationNumber = "KCY 067A"
                        },
                        new
                        {
                            Id = new Guid("325b4f35-a298-43b1-853e-816230ccca0a"),
                            BodyType = "Truck",
                            VehicleRegistrationNumber = "KCZ 595L"
                        },
                        new
                        {
                            Id = new Guid("81c7681b-2800-4197-9314-eee5de080201"),
                            BodyType = "Truck",
                            VehicleRegistrationNumber = "KDB 387Q"
                        },
                        new
                        {
                            Id = new Guid("8d7451fe-9d32-44b3-ba36-3c5c407bfb89"),
                            BodyType = "Truck",
                            VehicleRegistrationNumber = "KDE 228S"
                        },
                        new
                        {
                            Id = new Guid("c79129b3-8e23-4e97-8ce4-21f03d0f245e"),
                            BodyType = "Van",
                            VehicleRegistrationNumber = "KAY 215H"
                        },
                        new
                        {
                            Id = new Guid("3c208f95-3fe2-43f2-a672-aa6809e51d04"),
                            BodyType = "Van",
                            VehicleRegistrationNumber = "KBF 462A"
                        });
                });

            modelBuilder.Entity("DispatchParcel", b =>
                {
                    b.HasOne("wms_android.shared.Models.Dispatch", null)
                        .WithMany()
                        .HasForeignKey("DispatchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wms_android.shared.Models.Parcel", null)
                        .WithMany()
                        .HasForeignKey("ParcelsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("wms_android.shared.Models.ContractCustomer", b =>
                {
                    b.HasOne("wms_android.shared.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedBy");
                });

            modelBuilder.Entity("wms_android.shared.Models.Invoice", b =>
                {
                    b.HasOne("wms_android.shared.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("wms_android.shared.Models.ContractCustomer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("CreatedBy");

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("wms_android.shared.Models.InvoiceItem", b =>
                {
                    b.HasOne("wms_android.shared.Models.Invoice", "Invoice")
                        .WithMany("Items")
                        .HasForeignKey("InvoiceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Invoice");
                });

            modelBuilder.Entity("wms_android.shared.Models.Parcel", b =>
                {
                    b.HasOne("wms_android.shared.Models.User", "CreatedBy")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("wms_android.shared.Models.Shipment", "Shipment")
                        .WithMany("Parcels")
                        .HasForeignKey("ShipmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("CreatedBy");

                    b.Navigation("Shipment");
                });

            modelBuilder.Entity("wms_android.shared.Models.Shipment", b =>
                {
                    b.HasOne("wms_android.shared.Models.User", "Creator")
                        .WithMany()
                        .HasForeignKey("CreatedById")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("wms_android.shared.Models.User", b =>
                {
                    b.HasOne("wms_android.shared.Models.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("wms_android.shared.Models.Role", "Role")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("wms_android.shared.Models.UserBranch", b =>
                {
                    b.HasOne("wms_android.shared.Models.Branch", "Branch")
                        .WithMany()
                        .HasForeignKey("BranchId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("wms_android.shared.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Branch");

                    b.Navigation("User");
                });

            modelBuilder.Entity("wms_android.shared.Models.Invoice", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("wms_android.shared.Models.Shipment", b =>
                {
                    b.Navigation("Parcels");
                });
#pragma warning restore 612, 618
        }
    }
}
